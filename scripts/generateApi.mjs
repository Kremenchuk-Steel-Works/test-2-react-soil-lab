import { execSync } from 'child_process'
import { existsSync, mkdirSync, readFileSync, writeFileSync } from 'fs'
import path from 'path'

// --- –ù–∞—á–∞–ª–æ: –≠—Ç–∞ —á–∞—Å—Ç—å –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å ---
const config = JSON.parse(readFileSync('./api-services.config.json', 'utf-8'))
const serviceName = process.argv[2]

if (!serviceName) {
  console.error('‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–∫–∞–∑–∞–Ω–æ –∏–º—è —Å–µ—Ä–≤–∏—Å–∞.')
  console.log('‚úÖ –ü—Ä–∏–º–µ—Ä: npm run api main')
  process.exit(1)
}

const service = config[serviceName]

if (!service) {
  console.error(`‚ùå –û—à–∏–±–∫–∞: –°–µ—Ä–≤–∏—Å —Å –∏–º–µ–Ω–µ–º "${serviceName}" –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ api-services.config.json.`)
  process.exit(1)
}

const { url, path: servicePath } = service

// –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å–µ—Ä–≤–∏—Å–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
if (!existsSync(servicePath)) {
  mkdirSync(servicePath, { recursive: true })
}

const openapiJsonPath = path.join(servicePath, 'openapi.json')
const schemaTsPath = path.join(servicePath, 'schema.ts')
const typesTsPath = path.join(servicePath, 'types.ts') // –ü—É—Ç—å –∫ –Ω–æ–≤–æ–º—É —Ñ–∞–π–ª—É
const casingFilePath = 'casing.yaml'
// --- –ö–æ–Ω–µ—Ü: –≠—Ç–∞ —á–∞—Å—Ç—å –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å ---

try {
  console.log(`üöÄ [${serviceName}] –®–∞–≥ 1/3: –ü–æ–ª—É—á–µ–Ω–∏–µ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ö–µ–º—ã...`)
  execSync(`npx openapi-format ${url} -o ${openapiJsonPath} --casingFile ${casingFilePath}`, {
    stdio: 'inherit',
  })

  console.log(`üöÄ [${serviceName}] –®–∞–≥ 2/3: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ —Ç–∏–ø–æ–≤ schema.ts...`)
  execSync(`npx openapi-typescript ${openapiJsonPath} -o ${schemaTsPath}`, { stdio: 'inherit' })

  console.log(`üöÄ [${serviceName}] –®–∞–≥ 3/3: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∞–π–ª–∞ —Å –ø—Å–µ–≤–¥–æ–Ω–∏–º–∞–º–∏ types.ts...`)

  // –ß–∏—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ —á—Ç–æ —Å–æ–∑–¥–∞–Ω–Ω—ã–π openapi.json
  const apiSpec = JSON.parse(readFileSync(openapiJsonPath, 'utf-8'))
  const schemas = apiSpec.components?.schemas

  if (!schemas) {
    console.warn(
      `‚ö†Ô∏è [${serviceName}] –í —Å—Ö–µ–º–µ –Ω–µ –Ω–∞–π–¥–µ–Ω —Ä–∞–∑–¥–µ–ª components.schemas. –§–∞–π–ª types.ts –Ω–µ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω.`,
    )
  } else {
    const schemaNames = Object.keys(schemas)

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ types.ts
    const header = `/**
 * This file was auto-generated by scripts/generateApi.mjs.
 * Do not make direct changes to the file.
 */\n\nimport type { components } from './schema';\n\n`
    const typeAliases = schemaNames
      .map((name) => `export type ${name} = components['schemas']['${name}'];`)
      .join('\n')

    writeFileSync(typesTsPath, header + typeAliases, 'utf-8')
    console.log(
      `‚úÖ [${serviceName}] –§–∞–π–ª types.ts —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω —Å ${schemaNames.length} –ø—Å–µ–≤–¥–æ–Ω–∏–º–∞–º–∏.`,
    )
  }

  console.log(`\nüéâ [${serviceName}] –ì–æ—Ç–æ–≤–æ! –í—Å–µ —Ç–∏–ø—ã —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã.`)
} catch (error) {
  console.error(`‚ùå [${serviceName}] –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ API:`, error.message)
  process.exit(1)
}
