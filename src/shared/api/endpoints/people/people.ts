/**
 * Generated by orval v7.11.2 🍺
 * Do not edit manually.
 * Main Service
 * OpenAPI spec version: 0.1.0
 */
import {
  useMutation,
  useQuery,
  type DataTag,
  type DefinedInitialDataOptions,
  type DefinedUseQueryResult,
  type MutationFunction,
  type QueryClient,
  type QueryFunction,
  type QueryKey,
  type UndefinedInitialDataOptions,
  type UseMutationOptions,
  type UseMutationResult,
  type UseQueryOptions,
  type UseQueryResult,
} from '@tanstack/react-query'
import { customMutator } from '../../mutator'
import type {
  GetPeopleListApiV1PeopleGetParams,
  HttpValidationError,
  PersonCreate,
  PersonDetailResponse,
  PersonListResponse,
  PersonResponse,
  PersonUpdate,
} from '../../schemas'

/**
 * @summary Get People List
 */
export const getPeopleListApiV1PeopleGet = (
  params?: GetPeopleListApiV1PeopleGetParams,
  signal?: AbortSignal,
) => {
  return customMutator<PersonListResponse>({
    url: `/api/v1/people/`,
    method: 'GET',
    params,
    signal,
  })
}

export const getGetPeopleListApiV1PeopleGetQueryKey = (
  params?: GetPeopleListApiV1PeopleGetParams,
) => {
  return [`/api/v1/people/`, ...(params ? [params] : [])] as const
}

export const getGetPeopleListApiV1PeopleGetQueryOptions = <
  TData = Awaited<ReturnType<typeof getPeopleListApiV1PeopleGet>>,
  TError = HttpValidationError,
>(
  params?: GetPeopleListApiV1PeopleGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getPeopleListApiV1PeopleGet>>, TError, TData>
    >
  },
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetPeopleListApiV1PeopleGetQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getPeopleListApiV1PeopleGet>>> = ({
    signal,
  }) => getPeopleListApiV1PeopleGet(params, signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getPeopleListApiV1PeopleGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetPeopleListApiV1PeopleGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof getPeopleListApiV1PeopleGet>>
>
export type GetPeopleListApiV1PeopleGetQueryError = HttpValidationError

export function useGetPeopleListApiV1PeopleGet<
  TData = Awaited<ReturnType<typeof getPeopleListApiV1PeopleGet>>,
  TError = HttpValidationError,
>(
  params: undefined | GetPeopleListApiV1PeopleGetParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getPeopleListApiV1PeopleGet>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPeopleListApiV1PeopleGet>>,
          TError,
          Awaited<ReturnType<typeof getPeopleListApiV1PeopleGet>>
        >,
        'initialData'
      >
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetPeopleListApiV1PeopleGet<
  TData = Awaited<ReturnType<typeof getPeopleListApiV1PeopleGet>>,
  TError = HttpValidationError,
>(
  params?: GetPeopleListApiV1PeopleGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getPeopleListApiV1PeopleGet>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPeopleListApiV1PeopleGet>>,
          TError,
          Awaited<ReturnType<typeof getPeopleListApiV1PeopleGet>>
        >,
        'initialData'
      >
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetPeopleListApiV1PeopleGet<
  TData = Awaited<ReturnType<typeof getPeopleListApiV1PeopleGet>>,
  TError = HttpValidationError,
>(
  params?: GetPeopleListApiV1PeopleGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getPeopleListApiV1PeopleGet>>, TError, TData>
    >
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get People List
 */

export function useGetPeopleListApiV1PeopleGet<
  TData = Awaited<ReturnType<typeof getPeopleListApiV1PeopleGet>>,
  TError = HttpValidationError,
>(
  params?: GetPeopleListApiV1PeopleGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getPeopleListApiV1PeopleGet>>, TError, TData>
    >
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetPeopleListApiV1PeopleGetQueryOptions(params, options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Create Person
 */
export const createPersonApiV1PeoplePost = (personCreate: PersonCreate, signal?: AbortSignal) => {
  return customMutator<PersonResponse>({
    url: `/api/v1/people/`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: personCreate,
    signal,
  })
}

export const getCreatePersonApiV1PeoplePostMutationOptions = <
  TError = HttpValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createPersonApiV1PeoplePost>>,
    TError,
    { data: PersonCreate },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof createPersonApiV1PeoplePost>>,
  TError,
  { data: PersonCreate },
  TContext
> => {
  const mutationKey = ['createPersonApiV1PeoplePost']
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createPersonApiV1PeoplePost>>,
    { data: PersonCreate }
  > = (props) => {
    const { data } = props ?? {}

    return createPersonApiV1PeoplePost(data)
  }

  return { mutationFn, ...mutationOptions }
}

export type CreatePersonApiV1PeoplePostMutationResult = NonNullable<
  Awaited<ReturnType<typeof createPersonApiV1PeoplePost>>
>
export type CreatePersonApiV1PeoplePostMutationBody = PersonCreate
export type CreatePersonApiV1PeoplePostMutationError = HttpValidationError

/**
 * @summary Create Person
 */
export const useCreatePersonApiV1PeoplePost = <TError = HttpValidationError, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof createPersonApiV1PeoplePost>>,
      TError,
      { data: PersonCreate },
      TContext
    >
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof createPersonApiV1PeoplePost>>,
  TError,
  { data: PersonCreate },
  TContext
> => {
  const mutationOptions = getCreatePersonApiV1PeoplePostMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * @summary Get Person
 */
export const getPersonApiV1PeoplePersonIdGet = (personId: string, signal?: AbortSignal) => {
  return customMutator<PersonDetailResponse>({
    url: `/api/v1/people/${personId}`,
    method: 'GET',
    signal,
  })
}

export const getGetPersonApiV1PeoplePersonIdGetQueryKey = (personId?: string) => {
  return [`/api/v1/people/${personId}`] as const
}

export const getGetPersonApiV1PeoplePersonIdGetQueryOptions = <
  TData = Awaited<ReturnType<typeof getPersonApiV1PeoplePersonIdGet>>,
  TError = HttpValidationError,
>(
  personId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getPersonApiV1PeoplePersonIdGet>>, TError, TData>
    >
  },
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetPersonApiV1PeoplePersonIdGetQueryKey(personId)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getPersonApiV1PeoplePersonIdGet>>> = ({
    signal,
  }) => getPersonApiV1PeoplePersonIdGet(personId, signal)

  return { queryKey, queryFn, enabled: !!personId, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getPersonApiV1PeoplePersonIdGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetPersonApiV1PeoplePersonIdGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof getPersonApiV1PeoplePersonIdGet>>
>
export type GetPersonApiV1PeoplePersonIdGetQueryError = HttpValidationError

export function useGetPersonApiV1PeoplePersonIdGet<
  TData = Awaited<ReturnType<typeof getPersonApiV1PeoplePersonIdGet>>,
  TError = HttpValidationError,
>(
  personId: string,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getPersonApiV1PeoplePersonIdGet>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPersonApiV1PeoplePersonIdGet>>,
          TError,
          Awaited<ReturnType<typeof getPersonApiV1PeoplePersonIdGet>>
        >,
        'initialData'
      >
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetPersonApiV1PeoplePersonIdGet<
  TData = Awaited<ReturnType<typeof getPersonApiV1PeoplePersonIdGet>>,
  TError = HttpValidationError,
>(
  personId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getPersonApiV1PeoplePersonIdGet>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPersonApiV1PeoplePersonIdGet>>,
          TError,
          Awaited<ReturnType<typeof getPersonApiV1PeoplePersonIdGet>>
        >,
        'initialData'
      >
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetPersonApiV1PeoplePersonIdGet<
  TData = Awaited<ReturnType<typeof getPersonApiV1PeoplePersonIdGet>>,
  TError = HttpValidationError,
>(
  personId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getPersonApiV1PeoplePersonIdGet>>, TError, TData>
    >
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Person
 */

export function useGetPersonApiV1PeoplePersonIdGet<
  TData = Awaited<ReturnType<typeof getPersonApiV1PeoplePersonIdGet>>,
  TError = HttpValidationError,
>(
  personId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getPersonApiV1PeoplePersonIdGet>>, TError, TData>
    >
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetPersonApiV1PeoplePersonIdGetQueryOptions(personId, options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Update Person
 */
export const updatePersonApiV1PeoplePersonIdPut = (
  personId: string,
  personUpdate: PersonUpdate,
) => {
  return customMutator<PersonResponse>({
    url: `/api/v1/people/${personId}`,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json' },
    data: personUpdate,
  })
}

export const getUpdatePersonApiV1PeoplePersonIdPutMutationOptions = <
  TError = HttpValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updatePersonApiV1PeoplePersonIdPut>>,
    TError,
    { personId: string; data: PersonUpdate },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof updatePersonApiV1PeoplePersonIdPut>>,
  TError,
  { personId: string; data: PersonUpdate },
  TContext
> => {
  const mutationKey = ['updatePersonApiV1PeoplePersonIdPut']
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updatePersonApiV1PeoplePersonIdPut>>,
    { personId: string; data: PersonUpdate }
  > = (props) => {
    const { personId, data } = props ?? {}

    return updatePersonApiV1PeoplePersonIdPut(personId, data)
  }

  return { mutationFn, ...mutationOptions }
}

export type UpdatePersonApiV1PeoplePersonIdPutMutationResult = NonNullable<
  Awaited<ReturnType<typeof updatePersonApiV1PeoplePersonIdPut>>
>
export type UpdatePersonApiV1PeoplePersonIdPutMutationBody = PersonUpdate
export type UpdatePersonApiV1PeoplePersonIdPutMutationError = HttpValidationError

/**
 * @summary Update Person
 */
export const useUpdatePersonApiV1PeoplePersonIdPut = <
  TError = HttpValidationError,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof updatePersonApiV1PeoplePersonIdPut>>,
      TError,
      { personId: string; data: PersonUpdate },
      TContext
    >
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof updatePersonApiV1PeoplePersonIdPut>>,
  TError,
  { personId: string; data: PersonUpdate },
  TContext
> => {
  const mutationOptions = getUpdatePersonApiV1PeoplePersonIdPutMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * @summary Delete Person
 */
export const deletePersonApiV1PeoplePersonIdDelete = (personId: string) => {
  return customMutator<unknown>({ url: `/api/v1/people/${personId}`, method: 'DELETE' })
}

export const getDeletePersonApiV1PeoplePersonIdDeleteMutationOptions = <
  TError = HttpValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deletePersonApiV1PeoplePersonIdDelete>>,
    TError,
    { personId: string },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof deletePersonApiV1PeoplePersonIdDelete>>,
  TError,
  { personId: string },
  TContext
> => {
  const mutationKey = ['deletePersonApiV1PeoplePersonIdDelete']
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deletePersonApiV1PeoplePersonIdDelete>>,
    { personId: string }
  > = (props) => {
    const { personId } = props ?? {}

    return deletePersonApiV1PeoplePersonIdDelete(personId)
  }

  return { mutationFn, ...mutationOptions }
}

export type DeletePersonApiV1PeoplePersonIdDeleteMutationResult = NonNullable<
  Awaited<ReturnType<typeof deletePersonApiV1PeoplePersonIdDelete>>
>

export type DeletePersonApiV1PeoplePersonIdDeleteMutationError = HttpValidationError

/**
 * @summary Delete Person
 */
export const useDeletePersonApiV1PeoplePersonIdDelete = <
  TError = HttpValidationError,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deletePersonApiV1PeoplePersonIdDelete>>,
      TError,
      { personId: string },
      TContext
    >
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof deletePersonApiV1PeoplePersonIdDelete>>,
  TError,
  { personId: string },
  TContext
> => {
  const mutationOptions = getDeletePersonApiV1PeoplePersonIdDeleteMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
