/**
 * Generated by orval v7.11.2 🍺
 * Do not edit manually.
 * Main Service
 * OpenAPI spec version: 0.1.0
 */
import {
  useQuery,
  type DataTag,
  type DefinedInitialDataOptions,
  type DefinedUseQueryResult,
  type QueryClient,
  type QueryFunction,
  type QueryKey,
  type UndefinedInitialDataOptions,
  type UseQueryOptions,
  type UseQueryResult,
} from '@tanstack/react-query'
import { customMutator } from '../../mutator'
import type {
  CityLookupResponse,
  CountryLookupResponse,
  DepartmentLookupResponse,
  GetCitiesListApiV1LookupsCitiesGetParams,
  GetCountriesListApiV1LookupsCountriesGetParams,
  GetDepartmentsListApiV1LookupsDepartmentsGetParams,
  GetOrganizationsListApiV1LookupsOrganizationsGetParams,
  GetPeopleListApiV1LookupsPeopleGetParams,
  GetPermissionsListApiV1LookupsPermissionsGetParams,
  GetPositionsListApiV1LookupsPositionsGetParams,
  GetRolesListApiV1LookupsRolesGetParams,
  HttpValidationError,
  OrganizationLookupResponse,
  PermissionLookupResponse,
  PersonLookupResponse,
  PositionLookupResponse,
  RoleLookupResponse,
} from '../../schemas'

/**
 * @summary Get Cities List
 */
export const getCitiesListApiV1LookupsCitiesGet = (
  params?: GetCitiesListApiV1LookupsCitiesGetParams,
  signal?: AbortSignal,
) => {
  return customMutator<CityLookupResponse[]>({
    url: `/api/v1/lookups/cities`,
    method: 'GET',
    params,
    signal,
  })
}

export const getGetCitiesListApiV1LookupsCitiesGetQueryKey = (
  params?: GetCitiesListApiV1LookupsCitiesGetParams,
) => {
  return [`/api/v1/lookups/cities`, ...(params ? [params] : [])] as const
}

export const getGetCitiesListApiV1LookupsCitiesGetQueryOptions = <
  TData = Awaited<ReturnType<typeof getCitiesListApiV1LookupsCitiesGet>>,
  TError = HttpValidationError,
>(
  params?: GetCitiesListApiV1LookupsCitiesGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getCitiesListApiV1LookupsCitiesGet>>, TError, TData>
    >
  },
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetCitiesListApiV1LookupsCitiesGetQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getCitiesListApiV1LookupsCitiesGet>>> = ({
    signal,
  }) => getCitiesListApiV1LookupsCitiesGet(params, signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getCitiesListApiV1LookupsCitiesGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetCitiesListApiV1LookupsCitiesGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCitiesListApiV1LookupsCitiesGet>>
>
export type GetCitiesListApiV1LookupsCitiesGetQueryError = HttpValidationError

export function useGetCitiesListApiV1LookupsCitiesGet<
  TData = Awaited<ReturnType<typeof getCitiesListApiV1LookupsCitiesGet>>,
  TError = HttpValidationError,
>(
  params: undefined | GetCitiesListApiV1LookupsCitiesGetParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getCitiesListApiV1LookupsCitiesGet>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCitiesListApiV1LookupsCitiesGet>>,
          TError,
          Awaited<ReturnType<typeof getCitiesListApiV1LookupsCitiesGet>>
        >,
        'initialData'
      >
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetCitiesListApiV1LookupsCitiesGet<
  TData = Awaited<ReturnType<typeof getCitiesListApiV1LookupsCitiesGet>>,
  TError = HttpValidationError,
>(
  params?: GetCitiesListApiV1LookupsCitiesGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getCitiesListApiV1LookupsCitiesGet>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCitiesListApiV1LookupsCitiesGet>>,
          TError,
          Awaited<ReturnType<typeof getCitiesListApiV1LookupsCitiesGet>>
        >,
        'initialData'
      >
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetCitiesListApiV1LookupsCitiesGet<
  TData = Awaited<ReturnType<typeof getCitiesListApiV1LookupsCitiesGet>>,
  TError = HttpValidationError,
>(
  params?: GetCitiesListApiV1LookupsCitiesGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getCitiesListApiV1LookupsCitiesGet>>, TError, TData>
    >
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Cities List
 */

export function useGetCitiesListApiV1LookupsCitiesGet<
  TData = Awaited<ReturnType<typeof getCitiesListApiV1LookupsCitiesGet>>,
  TError = HttpValidationError,
>(
  params?: GetCitiesListApiV1LookupsCitiesGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getCitiesListApiV1LookupsCitiesGet>>, TError, TData>
    >
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetCitiesListApiV1LookupsCitiesGetQueryOptions(params, options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Get Countries List
 */
export const getCountriesListApiV1LookupsCountriesGet = (
  params?: GetCountriesListApiV1LookupsCountriesGetParams,
  signal?: AbortSignal,
) => {
  return customMutator<CountryLookupResponse[]>({
    url: `/api/v1/lookups/countries`,
    method: 'GET',
    params,
    signal,
  })
}

export const getGetCountriesListApiV1LookupsCountriesGetQueryKey = (
  params?: GetCountriesListApiV1LookupsCountriesGetParams,
) => {
  return [`/api/v1/lookups/countries`, ...(params ? [params] : [])] as const
}

export const getGetCountriesListApiV1LookupsCountriesGetQueryOptions = <
  TData = Awaited<ReturnType<typeof getCountriesListApiV1LookupsCountriesGet>>,
  TError = HttpValidationError,
>(
  params?: GetCountriesListApiV1LookupsCountriesGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCountriesListApiV1LookupsCountriesGet>>,
        TError,
        TData
      >
    >
  },
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getGetCountriesListApiV1LookupsCountriesGetQueryKey(params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getCountriesListApiV1LookupsCountriesGet>>
  > = ({ signal }) => getCountriesListApiV1LookupsCountriesGet(params, signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getCountriesListApiV1LookupsCountriesGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetCountriesListApiV1LookupsCountriesGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCountriesListApiV1LookupsCountriesGet>>
>
export type GetCountriesListApiV1LookupsCountriesGetQueryError = HttpValidationError

export function useGetCountriesListApiV1LookupsCountriesGet<
  TData = Awaited<ReturnType<typeof getCountriesListApiV1LookupsCountriesGet>>,
  TError = HttpValidationError,
>(
  params: undefined | GetCountriesListApiV1LookupsCountriesGetParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCountriesListApiV1LookupsCountriesGet>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCountriesListApiV1LookupsCountriesGet>>,
          TError,
          Awaited<ReturnType<typeof getCountriesListApiV1LookupsCountriesGet>>
        >,
        'initialData'
      >
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetCountriesListApiV1LookupsCountriesGet<
  TData = Awaited<ReturnType<typeof getCountriesListApiV1LookupsCountriesGet>>,
  TError = HttpValidationError,
>(
  params?: GetCountriesListApiV1LookupsCountriesGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCountriesListApiV1LookupsCountriesGet>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCountriesListApiV1LookupsCountriesGet>>,
          TError,
          Awaited<ReturnType<typeof getCountriesListApiV1LookupsCountriesGet>>
        >,
        'initialData'
      >
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetCountriesListApiV1LookupsCountriesGet<
  TData = Awaited<ReturnType<typeof getCountriesListApiV1LookupsCountriesGet>>,
  TError = HttpValidationError,
>(
  params?: GetCountriesListApiV1LookupsCountriesGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCountriesListApiV1LookupsCountriesGet>>,
        TError,
        TData
      >
    >
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Countries List
 */

export function useGetCountriesListApiV1LookupsCountriesGet<
  TData = Awaited<ReturnType<typeof getCountriesListApiV1LookupsCountriesGet>>,
  TError = HttpValidationError,
>(
  params?: GetCountriesListApiV1LookupsCountriesGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCountriesListApiV1LookupsCountriesGet>>,
        TError,
        TData
      >
    >
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetCountriesListApiV1LookupsCountriesGetQueryOptions(params, options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Get Departments List
 */
export const getDepartmentsListApiV1LookupsDepartmentsGet = (
  params?: GetDepartmentsListApiV1LookupsDepartmentsGetParams,
  signal?: AbortSignal,
) => {
  return customMutator<DepartmentLookupResponse[]>({
    url: `/api/v1/lookups/departments`,
    method: 'GET',
    params,
    signal,
  })
}

export const getGetDepartmentsListApiV1LookupsDepartmentsGetQueryKey = (
  params?: GetDepartmentsListApiV1LookupsDepartmentsGetParams,
) => {
  return [`/api/v1/lookups/departments`, ...(params ? [params] : [])] as const
}

export const getGetDepartmentsListApiV1LookupsDepartmentsGetQueryOptions = <
  TData = Awaited<ReturnType<typeof getDepartmentsListApiV1LookupsDepartmentsGet>>,
  TError = HttpValidationError,
>(
  params?: GetDepartmentsListApiV1LookupsDepartmentsGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getDepartmentsListApiV1LookupsDepartmentsGet>>,
        TError,
        TData
      >
    >
  },
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getGetDepartmentsListApiV1LookupsDepartmentsGetQueryKey(params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getDepartmentsListApiV1LookupsDepartmentsGet>>
  > = ({ signal }) => getDepartmentsListApiV1LookupsDepartmentsGet(params, signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getDepartmentsListApiV1LookupsDepartmentsGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetDepartmentsListApiV1LookupsDepartmentsGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof getDepartmentsListApiV1LookupsDepartmentsGet>>
>
export type GetDepartmentsListApiV1LookupsDepartmentsGetQueryError = HttpValidationError

export function useGetDepartmentsListApiV1LookupsDepartmentsGet<
  TData = Awaited<ReturnType<typeof getDepartmentsListApiV1LookupsDepartmentsGet>>,
  TError = HttpValidationError,
>(
  params: undefined | GetDepartmentsListApiV1LookupsDepartmentsGetParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getDepartmentsListApiV1LookupsDepartmentsGet>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDepartmentsListApiV1LookupsDepartmentsGet>>,
          TError,
          Awaited<ReturnType<typeof getDepartmentsListApiV1LookupsDepartmentsGet>>
        >,
        'initialData'
      >
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetDepartmentsListApiV1LookupsDepartmentsGet<
  TData = Awaited<ReturnType<typeof getDepartmentsListApiV1LookupsDepartmentsGet>>,
  TError = HttpValidationError,
>(
  params?: GetDepartmentsListApiV1LookupsDepartmentsGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getDepartmentsListApiV1LookupsDepartmentsGet>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDepartmentsListApiV1LookupsDepartmentsGet>>,
          TError,
          Awaited<ReturnType<typeof getDepartmentsListApiV1LookupsDepartmentsGet>>
        >,
        'initialData'
      >
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetDepartmentsListApiV1LookupsDepartmentsGet<
  TData = Awaited<ReturnType<typeof getDepartmentsListApiV1LookupsDepartmentsGet>>,
  TError = HttpValidationError,
>(
  params?: GetDepartmentsListApiV1LookupsDepartmentsGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getDepartmentsListApiV1LookupsDepartmentsGet>>,
        TError,
        TData
      >
    >
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Departments List
 */

export function useGetDepartmentsListApiV1LookupsDepartmentsGet<
  TData = Awaited<ReturnType<typeof getDepartmentsListApiV1LookupsDepartmentsGet>>,
  TError = HttpValidationError,
>(
  params?: GetDepartmentsListApiV1LookupsDepartmentsGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getDepartmentsListApiV1LookupsDepartmentsGet>>,
        TError,
        TData
      >
    >
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetDepartmentsListApiV1LookupsDepartmentsGetQueryOptions(params, options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Get Organizations List
 */
export const getOrganizationsListApiV1LookupsOrganizationsGet = (
  params?: GetOrganizationsListApiV1LookupsOrganizationsGetParams,
  signal?: AbortSignal,
) => {
  return customMutator<OrganizationLookupResponse[]>({
    url: `/api/v1/lookups/organizations`,
    method: 'GET',
    params,
    signal,
  })
}

export const getGetOrganizationsListApiV1LookupsOrganizationsGetQueryKey = (
  params?: GetOrganizationsListApiV1LookupsOrganizationsGetParams,
) => {
  return [`/api/v1/lookups/organizations`, ...(params ? [params] : [])] as const
}

export const getGetOrganizationsListApiV1LookupsOrganizationsGetQueryOptions = <
  TData = Awaited<ReturnType<typeof getOrganizationsListApiV1LookupsOrganizationsGet>>,
  TError = HttpValidationError,
>(
  params?: GetOrganizationsListApiV1LookupsOrganizationsGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getOrganizationsListApiV1LookupsOrganizationsGet>>,
        TError,
        TData
      >
    >
  },
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getGetOrganizationsListApiV1LookupsOrganizationsGetQueryKey(params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getOrganizationsListApiV1LookupsOrganizationsGet>>
  > = ({ signal }) => getOrganizationsListApiV1LookupsOrganizationsGet(params, signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getOrganizationsListApiV1LookupsOrganizationsGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetOrganizationsListApiV1LookupsOrganizationsGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof getOrganizationsListApiV1LookupsOrganizationsGet>>
>
export type GetOrganizationsListApiV1LookupsOrganizationsGetQueryError = HttpValidationError

export function useGetOrganizationsListApiV1LookupsOrganizationsGet<
  TData = Awaited<ReturnType<typeof getOrganizationsListApiV1LookupsOrganizationsGet>>,
  TError = HttpValidationError,
>(
  params: undefined | GetOrganizationsListApiV1LookupsOrganizationsGetParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getOrganizationsListApiV1LookupsOrganizationsGet>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrganizationsListApiV1LookupsOrganizationsGet>>,
          TError,
          Awaited<ReturnType<typeof getOrganizationsListApiV1LookupsOrganizationsGet>>
        >,
        'initialData'
      >
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetOrganizationsListApiV1LookupsOrganizationsGet<
  TData = Awaited<ReturnType<typeof getOrganizationsListApiV1LookupsOrganizationsGet>>,
  TError = HttpValidationError,
>(
  params?: GetOrganizationsListApiV1LookupsOrganizationsGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getOrganizationsListApiV1LookupsOrganizationsGet>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrganizationsListApiV1LookupsOrganizationsGet>>,
          TError,
          Awaited<ReturnType<typeof getOrganizationsListApiV1LookupsOrganizationsGet>>
        >,
        'initialData'
      >
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetOrganizationsListApiV1LookupsOrganizationsGet<
  TData = Awaited<ReturnType<typeof getOrganizationsListApiV1LookupsOrganizationsGet>>,
  TError = HttpValidationError,
>(
  params?: GetOrganizationsListApiV1LookupsOrganizationsGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getOrganizationsListApiV1LookupsOrganizationsGet>>,
        TError,
        TData
      >
    >
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Organizations List
 */

export function useGetOrganizationsListApiV1LookupsOrganizationsGet<
  TData = Awaited<ReturnType<typeof getOrganizationsListApiV1LookupsOrganizationsGet>>,
  TError = HttpValidationError,
>(
  params?: GetOrganizationsListApiV1LookupsOrganizationsGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getOrganizationsListApiV1LookupsOrganizationsGet>>,
        TError,
        TData
      >
    >
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetOrganizationsListApiV1LookupsOrganizationsGetQueryOptions(
    params,
    options,
  )

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Get People List
 */
export const getPeopleListApiV1LookupsPeopleGet = (
  params?: GetPeopleListApiV1LookupsPeopleGetParams,
  signal?: AbortSignal,
) => {
  return customMutator<PersonLookupResponse[]>({
    url: `/api/v1/lookups/people`,
    method: 'GET',
    params,
    signal,
  })
}

export const getGetPeopleListApiV1LookupsPeopleGetQueryKey = (
  params?: GetPeopleListApiV1LookupsPeopleGetParams,
) => {
  return [`/api/v1/lookups/people`, ...(params ? [params] : [])] as const
}

export const getGetPeopleListApiV1LookupsPeopleGetQueryOptions = <
  TData = Awaited<ReturnType<typeof getPeopleListApiV1LookupsPeopleGet>>,
  TError = HttpValidationError,
>(
  params?: GetPeopleListApiV1LookupsPeopleGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getPeopleListApiV1LookupsPeopleGet>>, TError, TData>
    >
  },
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetPeopleListApiV1LookupsPeopleGetQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getPeopleListApiV1LookupsPeopleGet>>> = ({
    signal,
  }) => getPeopleListApiV1LookupsPeopleGet(params, signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getPeopleListApiV1LookupsPeopleGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetPeopleListApiV1LookupsPeopleGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof getPeopleListApiV1LookupsPeopleGet>>
>
export type GetPeopleListApiV1LookupsPeopleGetQueryError = HttpValidationError

export function useGetPeopleListApiV1LookupsPeopleGet<
  TData = Awaited<ReturnType<typeof getPeopleListApiV1LookupsPeopleGet>>,
  TError = HttpValidationError,
>(
  params: undefined | GetPeopleListApiV1LookupsPeopleGetParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getPeopleListApiV1LookupsPeopleGet>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPeopleListApiV1LookupsPeopleGet>>,
          TError,
          Awaited<ReturnType<typeof getPeopleListApiV1LookupsPeopleGet>>
        >,
        'initialData'
      >
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetPeopleListApiV1LookupsPeopleGet<
  TData = Awaited<ReturnType<typeof getPeopleListApiV1LookupsPeopleGet>>,
  TError = HttpValidationError,
>(
  params?: GetPeopleListApiV1LookupsPeopleGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getPeopleListApiV1LookupsPeopleGet>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPeopleListApiV1LookupsPeopleGet>>,
          TError,
          Awaited<ReturnType<typeof getPeopleListApiV1LookupsPeopleGet>>
        >,
        'initialData'
      >
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetPeopleListApiV1LookupsPeopleGet<
  TData = Awaited<ReturnType<typeof getPeopleListApiV1LookupsPeopleGet>>,
  TError = HttpValidationError,
>(
  params?: GetPeopleListApiV1LookupsPeopleGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getPeopleListApiV1LookupsPeopleGet>>, TError, TData>
    >
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get People List
 */

export function useGetPeopleListApiV1LookupsPeopleGet<
  TData = Awaited<ReturnType<typeof getPeopleListApiV1LookupsPeopleGet>>,
  TError = HttpValidationError,
>(
  params?: GetPeopleListApiV1LookupsPeopleGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getPeopleListApiV1LookupsPeopleGet>>, TError, TData>
    >
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetPeopleListApiV1LookupsPeopleGetQueryOptions(params, options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Get Positions List
 */
export const getPositionsListApiV1LookupsPositionsGet = (
  params?: GetPositionsListApiV1LookupsPositionsGetParams,
  signal?: AbortSignal,
) => {
  return customMutator<PositionLookupResponse[]>({
    url: `/api/v1/lookups/positions`,
    method: 'GET',
    params,
    signal,
  })
}

export const getGetPositionsListApiV1LookupsPositionsGetQueryKey = (
  params?: GetPositionsListApiV1LookupsPositionsGetParams,
) => {
  return [`/api/v1/lookups/positions`, ...(params ? [params] : [])] as const
}

export const getGetPositionsListApiV1LookupsPositionsGetQueryOptions = <
  TData = Awaited<ReturnType<typeof getPositionsListApiV1LookupsPositionsGet>>,
  TError = HttpValidationError,
>(
  params?: GetPositionsListApiV1LookupsPositionsGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getPositionsListApiV1LookupsPositionsGet>>,
        TError,
        TData
      >
    >
  },
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getGetPositionsListApiV1LookupsPositionsGetQueryKey(params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getPositionsListApiV1LookupsPositionsGet>>
  > = ({ signal }) => getPositionsListApiV1LookupsPositionsGet(params, signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getPositionsListApiV1LookupsPositionsGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetPositionsListApiV1LookupsPositionsGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof getPositionsListApiV1LookupsPositionsGet>>
>
export type GetPositionsListApiV1LookupsPositionsGetQueryError = HttpValidationError

export function useGetPositionsListApiV1LookupsPositionsGet<
  TData = Awaited<ReturnType<typeof getPositionsListApiV1LookupsPositionsGet>>,
  TError = HttpValidationError,
>(
  params: undefined | GetPositionsListApiV1LookupsPositionsGetParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getPositionsListApiV1LookupsPositionsGet>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPositionsListApiV1LookupsPositionsGet>>,
          TError,
          Awaited<ReturnType<typeof getPositionsListApiV1LookupsPositionsGet>>
        >,
        'initialData'
      >
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetPositionsListApiV1LookupsPositionsGet<
  TData = Awaited<ReturnType<typeof getPositionsListApiV1LookupsPositionsGet>>,
  TError = HttpValidationError,
>(
  params?: GetPositionsListApiV1LookupsPositionsGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getPositionsListApiV1LookupsPositionsGet>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPositionsListApiV1LookupsPositionsGet>>,
          TError,
          Awaited<ReturnType<typeof getPositionsListApiV1LookupsPositionsGet>>
        >,
        'initialData'
      >
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetPositionsListApiV1LookupsPositionsGet<
  TData = Awaited<ReturnType<typeof getPositionsListApiV1LookupsPositionsGet>>,
  TError = HttpValidationError,
>(
  params?: GetPositionsListApiV1LookupsPositionsGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getPositionsListApiV1LookupsPositionsGet>>,
        TError,
        TData
      >
    >
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Positions List
 */

export function useGetPositionsListApiV1LookupsPositionsGet<
  TData = Awaited<ReturnType<typeof getPositionsListApiV1LookupsPositionsGet>>,
  TError = HttpValidationError,
>(
  params?: GetPositionsListApiV1LookupsPositionsGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getPositionsListApiV1LookupsPositionsGet>>,
        TError,
        TData
      >
    >
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetPositionsListApiV1LookupsPositionsGetQueryOptions(params, options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Get Permissions List
 */
export const getPermissionsListApiV1LookupsPermissionsGet = (
  params?: GetPermissionsListApiV1LookupsPermissionsGetParams,
  signal?: AbortSignal,
) => {
  return customMutator<PermissionLookupResponse[]>({
    url: `/api/v1/lookups/permissions`,
    method: 'GET',
    params,
    signal,
  })
}

export const getGetPermissionsListApiV1LookupsPermissionsGetQueryKey = (
  params?: GetPermissionsListApiV1LookupsPermissionsGetParams,
) => {
  return [`/api/v1/lookups/permissions`, ...(params ? [params] : [])] as const
}

export const getGetPermissionsListApiV1LookupsPermissionsGetQueryOptions = <
  TData = Awaited<ReturnType<typeof getPermissionsListApiV1LookupsPermissionsGet>>,
  TError = HttpValidationError,
>(
  params?: GetPermissionsListApiV1LookupsPermissionsGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getPermissionsListApiV1LookupsPermissionsGet>>,
        TError,
        TData
      >
    >
  },
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getGetPermissionsListApiV1LookupsPermissionsGetQueryKey(params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getPermissionsListApiV1LookupsPermissionsGet>>
  > = ({ signal }) => getPermissionsListApiV1LookupsPermissionsGet(params, signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getPermissionsListApiV1LookupsPermissionsGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetPermissionsListApiV1LookupsPermissionsGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof getPermissionsListApiV1LookupsPermissionsGet>>
>
export type GetPermissionsListApiV1LookupsPermissionsGetQueryError = HttpValidationError

export function useGetPermissionsListApiV1LookupsPermissionsGet<
  TData = Awaited<ReturnType<typeof getPermissionsListApiV1LookupsPermissionsGet>>,
  TError = HttpValidationError,
>(
  params: undefined | GetPermissionsListApiV1LookupsPermissionsGetParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getPermissionsListApiV1LookupsPermissionsGet>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPermissionsListApiV1LookupsPermissionsGet>>,
          TError,
          Awaited<ReturnType<typeof getPermissionsListApiV1LookupsPermissionsGet>>
        >,
        'initialData'
      >
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetPermissionsListApiV1LookupsPermissionsGet<
  TData = Awaited<ReturnType<typeof getPermissionsListApiV1LookupsPermissionsGet>>,
  TError = HttpValidationError,
>(
  params?: GetPermissionsListApiV1LookupsPermissionsGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getPermissionsListApiV1LookupsPermissionsGet>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPermissionsListApiV1LookupsPermissionsGet>>,
          TError,
          Awaited<ReturnType<typeof getPermissionsListApiV1LookupsPermissionsGet>>
        >,
        'initialData'
      >
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetPermissionsListApiV1LookupsPermissionsGet<
  TData = Awaited<ReturnType<typeof getPermissionsListApiV1LookupsPermissionsGet>>,
  TError = HttpValidationError,
>(
  params?: GetPermissionsListApiV1LookupsPermissionsGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getPermissionsListApiV1LookupsPermissionsGet>>,
        TError,
        TData
      >
    >
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Permissions List
 */

export function useGetPermissionsListApiV1LookupsPermissionsGet<
  TData = Awaited<ReturnType<typeof getPermissionsListApiV1LookupsPermissionsGet>>,
  TError = HttpValidationError,
>(
  params?: GetPermissionsListApiV1LookupsPermissionsGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getPermissionsListApiV1LookupsPermissionsGet>>,
        TError,
        TData
      >
    >
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetPermissionsListApiV1LookupsPermissionsGetQueryOptions(params, options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Get Roles List
 */
export const getRolesListApiV1LookupsRolesGet = (
  params?: GetRolesListApiV1LookupsRolesGetParams,
  signal?: AbortSignal,
) => {
  return customMutator<RoleLookupResponse[]>({
    url: `/api/v1/lookups/roles`,
    method: 'GET',
    params,
    signal,
  })
}

export const getGetRolesListApiV1LookupsRolesGetQueryKey = (
  params?: GetRolesListApiV1LookupsRolesGetParams,
) => {
  return [`/api/v1/lookups/roles`, ...(params ? [params] : [])] as const
}

export const getGetRolesListApiV1LookupsRolesGetQueryOptions = <
  TData = Awaited<ReturnType<typeof getRolesListApiV1LookupsRolesGet>>,
  TError = HttpValidationError,
>(
  params?: GetRolesListApiV1LookupsRolesGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getRolesListApiV1LookupsRolesGet>>, TError, TData>
    >
  },
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetRolesListApiV1LookupsRolesGetQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getRolesListApiV1LookupsRolesGet>>> = ({
    signal,
  }) => getRolesListApiV1LookupsRolesGet(params, signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getRolesListApiV1LookupsRolesGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetRolesListApiV1LookupsRolesGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof getRolesListApiV1LookupsRolesGet>>
>
export type GetRolesListApiV1LookupsRolesGetQueryError = HttpValidationError

export function useGetRolesListApiV1LookupsRolesGet<
  TData = Awaited<ReturnType<typeof getRolesListApiV1LookupsRolesGet>>,
  TError = HttpValidationError,
>(
  params: undefined | GetRolesListApiV1LookupsRolesGetParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getRolesListApiV1LookupsRolesGet>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getRolesListApiV1LookupsRolesGet>>,
          TError,
          Awaited<ReturnType<typeof getRolesListApiV1LookupsRolesGet>>
        >,
        'initialData'
      >
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetRolesListApiV1LookupsRolesGet<
  TData = Awaited<ReturnType<typeof getRolesListApiV1LookupsRolesGet>>,
  TError = HttpValidationError,
>(
  params?: GetRolesListApiV1LookupsRolesGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getRolesListApiV1LookupsRolesGet>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getRolesListApiV1LookupsRolesGet>>,
          TError,
          Awaited<ReturnType<typeof getRolesListApiV1LookupsRolesGet>>
        >,
        'initialData'
      >
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetRolesListApiV1LookupsRolesGet<
  TData = Awaited<ReturnType<typeof getRolesListApiV1LookupsRolesGet>>,
  TError = HttpValidationError,
>(
  params?: GetRolesListApiV1LookupsRolesGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getRolesListApiV1LookupsRolesGet>>, TError, TData>
    >
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Roles List
 */

export function useGetRolesListApiV1LookupsRolesGet<
  TData = Awaited<ReturnType<typeof getRolesListApiV1LookupsRolesGet>>,
  TError = HttpValidationError,
>(
  params?: GetRolesListApiV1LookupsRolesGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getRolesListApiV1LookupsRolesGet>>, TError, TData>
    >
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetRolesListApiV1LookupsRolesGetQueryOptions(params, options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = queryOptions.queryKey

  return query
}
