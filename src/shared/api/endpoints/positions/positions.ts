/**
 * Generated by orval v7.11.2 🍺
 * Do not edit manually.
 * Main Service
 * OpenAPI spec version: 0.1.0
 */
import {
  useMutation,
  useQuery,
  type DataTag,
  type DefinedInitialDataOptions,
  type DefinedUseQueryResult,
  type MutationFunction,
  type QueryClient,
  type QueryFunction,
  type QueryKey,
  type UndefinedInitialDataOptions,
  type UseMutationOptions,
  type UseMutationResult,
  type UseQueryOptions,
  type UseQueryResult,
} from '@tanstack/react-query'
import { customMutator } from '../../mutator'
import type {
  GetPositionsListApiV1PositionsGetParams,
  HttpValidationError,
  PositionCreate,
  PositionDetailResponse,
  PositionListResponse,
  PositionResponse,
  PositionUpdate,
} from '../../schemas'

/**
 * @summary Get Positions List
 */
export const getPositionsListApiV1PositionsGet = (
  params?: GetPositionsListApiV1PositionsGetParams,
  signal?: AbortSignal,
) => {
  return customMutator<PositionListResponse>({
    url: `/api/v1/positions/`,
    method: 'GET',
    params,
    signal,
  })
}

export const getGetPositionsListApiV1PositionsGetQueryKey = (
  params?: GetPositionsListApiV1PositionsGetParams,
) => {
  return [`/api/v1/positions/`, ...(params ? [params] : [])] as const
}

export const getGetPositionsListApiV1PositionsGetQueryOptions = <
  TData = Awaited<ReturnType<typeof getPositionsListApiV1PositionsGet>>,
  TError = HttpValidationError,
>(
  params?: GetPositionsListApiV1PositionsGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getPositionsListApiV1PositionsGet>>, TError, TData>
    >
  },
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetPositionsListApiV1PositionsGetQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getPositionsListApiV1PositionsGet>>> = ({
    signal,
  }) => getPositionsListApiV1PositionsGet(params, signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getPositionsListApiV1PositionsGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetPositionsListApiV1PositionsGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof getPositionsListApiV1PositionsGet>>
>
export type GetPositionsListApiV1PositionsGetQueryError = HttpValidationError

export function useGetPositionsListApiV1PositionsGet<
  TData = Awaited<ReturnType<typeof getPositionsListApiV1PositionsGet>>,
  TError = HttpValidationError,
>(
  params: undefined | GetPositionsListApiV1PositionsGetParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getPositionsListApiV1PositionsGet>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPositionsListApiV1PositionsGet>>,
          TError,
          Awaited<ReturnType<typeof getPositionsListApiV1PositionsGet>>
        >,
        'initialData'
      >
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetPositionsListApiV1PositionsGet<
  TData = Awaited<ReturnType<typeof getPositionsListApiV1PositionsGet>>,
  TError = HttpValidationError,
>(
  params?: GetPositionsListApiV1PositionsGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getPositionsListApiV1PositionsGet>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPositionsListApiV1PositionsGet>>,
          TError,
          Awaited<ReturnType<typeof getPositionsListApiV1PositionsGet>>
        >,
        'initialData'
      >
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetPositionsListApiV1PositionsGet<
  TData = Awaited<ReturnType<typeof getPositionsListApiV1PositionsGet>>,
  TError = HttpValidationError,
>(
  params?: GetPositionsListApiV1PositionsGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getPositionsListApiV1PositionsGet>>, TError, TData>
    >
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Positions List
 */

export function useGetPositionsListApiV1PositionsGet<
  TData = Awaited<ReturnType<typeof getPositionsListApiV1PositionsGet>>,
  TError = HttpValidationError,
>(
  params?: GetPositionsListApiV1PositionsGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getPositionsListApiV1PositionsGet>>, TError, TData>
    >
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetPositionsListApiV1PositionsGetQueryOptions(params, options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Create Position
 */
export const createPositionApiV1PositionsPost = (
  positionCreate: PositionCreate,
  signal?: AbortSignal,
) => {
  return customMutator<PositionResponse>({
    url: `/api/v1/positions/`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: positionCreate,
    signal,
  })
}

export const getCreatePositionApiV1PositionsPostMutationOptions = <
  TError = HttpValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createPositionApiV1PositionsPost>>,
    TError,
    { data: PositionCreate },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof createPositionApiV1PositionsPost>>,
  TError,
  { data: PositionCreate },
  TContext
> => {
  const mutationKey = ['createPositionApiV1PositionsPost']
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createPositionApiV1PositionsPost>>,
    { data: PositionCreate }
  > = (props) => {
    const { data } = props ?? {}

    return createPositionApiV1PositionsPost(data)
  }

  return { mutationFn, ...mutationOptions }
}

export type CreatePositionApiV1PositionsPostMutationResult = NonNullable<
  Awaited<ReturnType<typeof createPositionApiV1PositionsPost>>
>
export type CreatePositionApiV1PositionsPostMutationBody = PositionCreate
export type CreatePositionApiV1PositionsPostMutationError = HttpValidationError

/**
 * @summary Create Position
 */
export const useCreatePositionApiV1PositionsPost = <
  TError = HttpValidationError,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof createPositionApiV1PositionsPost>>,
      TError,
      { data: PositionCreate },
      TContext
    >
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof createPositionApiV1PositionsPost>>,
  TError,
  { data: PositionCreate },
  TContext
> => {
  const mutationOptions = getCreatePositionApiV1PositionsPostMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * @summary Get Position
 */
export const getPositionApiV1PositionsPositionIdGet = (
  positionId: string,
  signal?: AbortSignal,
) => {
  return customMutator<PositionDetailResponse>({
    url: `/api/v1/positions/${positionId}`,
    method: 'GET',
    signal,
  })
}

export const getGetPositionApiV1PositionsPositionIdGetQueryKey = (positionId?: string) => {
  return [`/api/v1/positions/${positionId}`] as const
}

export const getGetPositionApiV1PositionsPositionIdGetQueryOptions = <
  TData = Awaited<ReturnType<typeof getPositionApiV1PositionsPositionIdGet>>,
  TError = HttpValidationError,
>(
  positionId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getPositionApiV1PositionsPositionIdGet>>,
        TError,
        TData
      >
    >
  },
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getGetPositionApiV1PositionsPositionIdGetQueryKey(positionId)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getPositionApiV1PositionsPositionIdGet>>
  > = ({ signal }) => getPositionApiV1PositionsPositionIdGet(positionId, signal)

  return { queryKey, queryFn, enabled: !!positionId, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getPositionApiV1PositionsPositionIdGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetPositionApiV1PositionsPositionIdGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof getPositionApiV1PositionsPositionIdGet>>
>
export type GetPositionApiV1PositionsPositionIdGetQueryError = HttpValidationError

export function useGetPositionApiV1PositionsPositionIdGet<
  TData = Awaited<ReturnType<typeof getPositionApiV1PositionsPositionIdGet>>,
  TError = HttpValidationError,
>(
  positionId: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getPositionApiV1PositionsPositionIdGet>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPositionApiV1PositionsPositionIdGet>>,
          TError,
          Awaited<ReturnType<typeof getPositionApiV1PositionsPositionIdGet>>
        >,
        'initialData'
      >
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetPositionApiV1PositionsPositionIdGet<
  TData = Awaited<ReturnType<typeof getPositionApiV1PositionsPositionIdGet>>,
  TError = HttpValidationError,
>(
  positionId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getPositionApiV1PositionsPositionIdGet>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPositionApiV1PositionsPositionIdGet>>,
          TError,
          Awaited<ReturnType<typeof getPositionApiV1PositionsPositionIdGet>>
        >,
        'initialData'
      >
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetPositionApiV1PositionsPositionIdGet<
  TData = Awaited<ReturnType<typeof getPositionApiV1PositionsPositionIdGet>>,
  TError = HttpValidationError,
>(
  positionId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getPositionApiV1PositionsPositionIdGet>>,
        TError,
        TData
      >
    >
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Position
 */

export function useGetPositionApiV1PositionsPositionIdGet<
  TData = Awaited<ReturnType<typeof getPositionApiV1PositionsPositionIdGet>>,
  TError = HttpValidationError,
>(
  positionId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getPositionApiV1PositionsPositionIdGet>>,
        TError,
        TData
      >
    >
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetPositionApiV1PositionsPositionIdGetQueryOptions(positionId, options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Update Position
 */
export const updatePositionApiV1PositionsPositionIdPut = (
  positionId: string,
  positionUpdate: PositionUpdate,
) => {
  return customMutator<PositionResponse>({
    url: `/api/v1/positions/${positionId}`,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json' },
    data: positionUpdate,
  })
}

export const getUpdatePositionApiV1PositionsPositionIdPutMutationOptions = <
  TError = HttpValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updatePositionApiV1PositionsPositionIdPut>>,
    TError,
    { positionId: string; data: PositionUpdate },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof updatePositionApiV1PositionsPositionIdPut>>,
  TError,
  { positionId: string; data: PositionUpdate },
  TContext
> => {
  const mutationKey = ['updatePositionApiV1PositionsPositionIdPut']
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updatePositionApiV1PositionsPositionIdPut>>,
    { positionId: string; data: PositionUpdate }
  > = (props) => {
    const { positionId, data } = props ?? {}

    return updatePositionApiV1PositionsPositionIdPut(positionId, data)
  }

  return { mutationFn, ...mutationOptions }
}

export type UpdatePositionApiV1PositionsPositionIdPutMutationResult = NonNullable<
  Awaited<ReturnType<typeof updatePositionApiV1PositionsPositionIdPut>>
>
export type UpdatePositionApiV1PositionsPositionIdPutMutationBody = PositionUpdate
export type UpdatePositionApiV1PositionsPositionIdPutMutationError = HttpValidationError

/**
 * @summary Update Position
 */
export const useUpdatePositionApiV1PositionsPositionIdPut = <
  TError = HttpValidationError,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof updatePositionApiV1PositionsPositionIdPut>>,
      TError,
      { positionId: string; data: PositionUpdate },
      TContext
    >
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof updatePositionApiV1PositionsPositionIdPut>>,
  TError,
  { positionId: string; data: PositionUpdate },
  TContext
> => {
  const mutationOptions = getUpdatePositionApiV1PositionsPositionIdPutMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * @summary Delete Position
 */
export const deletePositionApiV1PositionsPositionIdDelete = (positionId: string) => {
  return customMutator<unknown>({ url: `/api/v1/positions/${positionId}`, method: 'DELETE' })
}

export const getDeletePositionApiV1PositionsPositionIdDeleteMutationOptions = <
  TError = HttpValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deletePositionApiV1PositionsPositionIdDelete>>,
    TError,
    { positionId: string },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof deletePositionApiV1PositionsPositionIdDelete>>,
  TError,
  { positionId: string },
  TContext
> => {
  const mutationKey = ['deletePositionApiV1PositionsPositionIdDelete']
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deletePositionApiV1PositionsPositionIdDelete>>,
    { positionId: string }
  > = (props) => {
    const { positionId } = props ?? {}

    return deletePositionApiV1PositionsPositionIdDelete(positionId)
  }

  return { mutationFn, ...mutationOptions }
}

export type DeletePositionApiV1PositionsPositionIdDeleteMutationResult = NonNullable<
  Awaited<ReturnType<typeof deletePositionApiV1PositionsPositionIdDelete>>
>

export type DeletePositionApiV1PositionsPositionIdDeleteMutationError = HttpValidationError

/**
 * @summary Delete Position
 */
export const useDeletePositionApiV1PositionsPositionIdDelete = <
  TError = HttpValidationError,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deletePositionApiV1PositionsPositionIdDelete>>,
      TError,
      { positionId: string },
      TContext
    >
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof deletePositionApiV1PositionsPositionIdDelete>>,
  TError,
  { positionId: string },
  TContext
> => {
  const mutationOptions = getDeletePositionApiV1PositionsPositionIdDeleteMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
