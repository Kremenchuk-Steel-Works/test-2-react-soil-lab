/**
 * Generated by orval v7.11.2 🍺
 * Do not edit manually.
 * Main Service
 * OpenAPI spec version: 0.1.0
 */
import {
  useMutation,
  useQuery,
  type DataTag,
  type DefinedInitialDataOptions,
  type DefinedUseQueryResult,
  type MutationFunction,
  type QueryClient,
  type QueryFunction,
  type QueryKey,
  type UndefinedInitialDataOptions,
  type UseMutationOptions,
  type UseMutationResult,
  type UseQueryOptions,
  type UseQueryResult,
} from '@tanstack/react-query'
import { customMutator } from '../../mutator'
import type {
  GetRolesListApiV1RolesGetParams,
  HttpValidationError,
  RoleCreate,
  RoleDetailResponse,
  RoleListResponse,
  RoleResponse,
  RoleUpdate,
} from '../../schemas'

/**
 * @summary Get Roles List
 */
export const getRolesListApiV1RolesGet = (
  params?: GetRolesListApiV1RolesGetParams,
  signal?: AbortSignal,
) => {
  return customMutator<RoleListResponse>({ url: `/api/v1/roles/`, method: 'GET', params, signal })
}

export const getGetRolesListApiV1RolesGetQueryKey = (params?: GetRolesListApiV1RolesGetParams) => {
  return [`/api/v1/roles/`, ...(params ? [params] : [])] as const
}

export const getGetRolesListApiV1RolesGetQueryOptions = <
  TData = Awaited<ReturnType<typeof getRolesListApiV1RolesGet>>,
  TError = HttpValidationError,
>(
  params?: GetRolesListApiV1RolesGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getRolesListApiV1RolesGet>>, TError, TData>
    >
  },
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetRolesListApiV1RolesGetQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getRolesListApiV1RolesGet>>> = ({
    signal,
  }) => getRolesListApiV1RolesGet(params, signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getRolesListApiV1RolesGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetRolesListApiV1RolesGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof getRolesListApiV1RolesGet>>
>
export type GetRolesListApiV1RolesGetQueryError = HttpValidationError

export function useGetRolesListApiV1RolesGet<
  TData = Awaited<ReturnType<typeof getRolesListApiV1RolesGet>>,
  TError = HttpValidationError,
>(
  params: undefined | GetRolesListApiV1RolesGetParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getRolesListApiV1RolesGet>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getRolesListApiV1RolesGet>>,
          TError,
          Awaited<ReturnType<typeof getRolesListApiV1RolesGet>>
        >,
        'initialData'
      >
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetRolesListApiV1RolesGet<
  TData = Awaited<ReturnType<typeof getRolesListApiV1RolesGet>>,
  TError = HttpValidationError,
>(
  params?: GetRolesListApiV1RolesGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getRolesListApiV1RolesGet>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getRolesListApiV1RolesGet>>,
          TError,
          Awaited<ReturnType<typeof getRolesListApiV1RolesGet>>
        >,
        'initialData'
      >
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetRolesListApiV1RolesGet<
  TData = Awaited<ReturnType<typeof getRolesListApiV1RolesGet>>,
  TError = HttpValidationError,
>(
  params?: GetRolesListApiV1RolesGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getRolesListApiV1RolesGet>>, TError, TData>
    >
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Roles List
 */

export function useGetRolesListApiV1RolesGet<
  TData = Awaited<ReturnType<typeof getRolesListApiV1RolesGet>>,
  TError = HttpValidationError,
>(
  params?: GetRolesListApiV1RolesGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getRolesListApiV1RolesGet>>, TError, TData>
    >
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetRolesListApiV1RolesGetQueryOptions(params, options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Create Role
 */
export const createRoleApiV1RolesPost = (roleCreate: RoleCreate, signal?: AbortSignal) => {
  return customMutator<RoleResponse>({
    url: `/api/v1/roles/`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: roleCreate,
    signal,
  })
}

export const getCreateRoleApiV1RolesPostMutationOptions = <
  TError = HttpValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createRoleApiV1RolesPost>>,
    TError,
    { data: RoleCreate },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof createRoleApiV1RolesPost>>,
  TError,
  { data: RoleCreate },
  TContext
> => {
  const mutationKey = ['createRoleApiV1RolesPost']
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createRoleApiV1RolesPost>>,
    { data: RoleCreate }
  > = (props) => {
    const { data } = props ?? {}

    return createRoleApiV1RolesPost(data)
  }

  return { mutationFn, ...mutationOptions }
}

export type CreateRoleApiV1RolesPostMutationResult = NonNullable<
  Awaited<ReturnType<typeof createRoleApiV1RolesPost>>
>
export type CreateRoleApiV1RolesPostMutationBody = RoleCreate
export type CreateRoleApiV1RolesPostMutationError = HttpValidationError

/**
 * @summary Create Role
 */
export const useCreateRoleApiV1RolesPost = <TError = HttpValidationError, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof createRoleApiV1RolesPost>>,
      TError,
      { data: RoleCreate },
      TContext
    >
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof createRoleApiV1RolesPost>>,
  TError,
  { data: RoleCreate },
  TContext
> => {
  const mutationOptions = getCreateRoleApiV1RolesPostMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * @summary Get Role
 */
export const getRoleApiV1RolesRoleIdGet = (roleId: number, signal?: AbortSignal) => {
  return customMutator<RoleDetailResponse>({
    url: `/api/v1/roles/${roleId}`,
    method: 'GET',
    signal,
  })
}

export const getGetRoleApiV1RolesRoleIdGetQueryKey = (roleId?: number) => {
  return [`/api/v1/roles/${roleId}`] as const
}

export const getGetRoleApiV1RolesRoleIdGetQueryOptions = <
  TData = Awaited<ReturnType<typeof getRoleApiV1RolesRoleIdGet>>,
  TError = HttpValidationError,
>(
  roleId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getRoleApiV1RolesRoleIdGet>>, TError, TData>
    >
  },
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetRoleApiV1RolesRoleIdGetQueryKey(roleId)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getRoleApiV1RolesRoleIdGet>>> = ({
    signal,
  }) => getRoleApiV1RolesRoleIdGet(roleId, signal)

  return { queryKey, queryFn, enabled: !!roleId, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getRoleApiV1RolesRoleIdGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetRoleApiV1RolesRoleIdGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof getRoleApiV1RolesRoleIdGet>>
>
export type GetRoleApiV1RolesRoleIdGetQueryError = HttpValidationError

export function useGetRoleApiV1RolesRoleIdGet<
  TData = Awaited<ReturnType<typeof getRoleApiV1RolesRoleIdGet>>,
  TError = HttpValidationError,
>(
  roleId: number,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getRoleApiV1RolesRoleIdGet>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getRoleApiV1RolesRoleIdGet>>,
          TError,
          Awaited<ReturnType<typeof getRoleApiV1RolesRoleIdGet>>
        >,
        'initialData'
      >
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetRoleApiV1RolesRoleIdGet<
  TData = Awaited<ReturnType<typeof getRoleApiV1RolesRoleIdGet>>,
  TError = HttpValidationError,
>(
  roleId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getRoleApiV1RolesRoleIdGet>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getRoleApiV1RolesRoleIdGet>>,
          TError,
          Awaited<ReturnType<typeof getRoleApiV1RolesRoleIdGet>>
        >,
        'initialData'
      >
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetRoleApiV1RolesRoleIdGet<
  TData = Awaited<ReturnType<typeof getRoleApiV1RolesRoleIdGet>>,
  TError = HttpValidationError,
>(
  roleId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getRoleApiV1RolesRoleIdGet>>, TError, TData>
    >
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Role
 */

export function useGetRoleApiV1RolesRoleIdGet<
  TData = Awaited<ReturnType<typeof getRoleApiV1RolesRoleIdGet>>,
  TError = HttpValidationError,
>(
  roleId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getRoleApiV1RolesRoleIdGet>>, TError, TData>
    >
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetRoleApiV1RolesRoleIdGetQueryOptions(roleId, options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Update Role
 */
export const updateRoleApiV1RolesRoleIdPut = (roleId: number, roleUpdate: RoleUpdate) => {
  return customMutator<RoleResponse>({
    url: `/api/v1/roles/${roleId}`,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json' },
    data: roleUpdate,
  })
}

export const getUpdateRoleApiV1RolesRoleIdPutMutationOptions = <
  TError = HttpValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateRoleApiV1RolesRoleIdPut>>,
    TError,
    { roleId: number; data: RoleUpdate },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateRoleApiV1RolesRoleIdPut>>,
  TError,
  { roleId: number; data: RoleUpdate },
  TContext
> => {
  const mutationKey = ['updateRoleApiV1RolesRoleIdPut']
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateRoleApiV1RolesRoleIdPut>>,
    { roleId: number; data: RoleUpdate }
  > = (props) => {
    const { roleId, data } = props ?? {}

    return updateRoleApiV1RolesRoleIdPut(roleId, data)
  }

  return { mutationFn, ...mutationOptions }
}

export type UpdateRoleApiV1RolesRoleIdPutMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateRoleApiV1RolesRoleIdPut>>
>
export type UpdateRoleApiV1RolesRoleIdPutMutationBody = RoleUpdate
export type UpdateRoleApiV1RolesRoleIdPutMutationError = HttpValidationError

/**
 * @summary Update Role
 */
export const useUpdateRoleApiV1RolesRoleIdPut = <TError = HttpValidationError, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof updateRoleApiV1RolesRoleIdPut>>,
      TError,
      { roleId: number; data: RoleUpdate },
      TContext
    >
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof updateRoleApiV1RolesRoleIdPut>>,
  TError,
  { roleId: number; data: RoleUpdate },
  TContext
> => {
  const mutationOptions = getUpdateRoleApiV1RolesRoleIdPutMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * @summary Delete Role
 */
export const deleteRoleApiV1RolesRoleIdDelete = (roleId: number) => {
  return customMutator<unknown>({ url: `/api/v1/roles/${roleId}`, method: 'DELETE' })
}

export const getDeleteRoleApiV1RolesRoleIdDeleteMutationOptions = <
  TError = HttpValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteRoleApiV1RolesRoleIdDelete>>,
    TError,
    { roleId: number },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteRoleApiV1RolesRoleIdDelete>>,
  TError,
  { roleId: number },
  TContext
> => {
  const mutationKey = ['deleteRoleApiV1RolesRoleIdDelete']
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteRoleApiV1RolesRoleIdDelete>>,
    { roleId: number }
  > = (props) => {
    const { roleId } = props ?? {}

    return deleteRoleApiV1RolesRoleIdDelete(roleId)
  }

  return { mutationFn, ...mutationOptions }
}

export type DeleteRoleApiV1RolesRoleIdDeleteMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteRoleApiV1RolesRoleIdDelete>>
>

export type DeleteRoleApiV1RolesRoleIdDeleteMutationError = HttpValidationError

/**
 * @summary Delete Role
 */
export const useDeleteRoleApiV1RolesRoleIdDelete = <
  TError = HttpValidationError,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deleteRoleApiV1RolesRoleIdDelete>>,
      TError,
      { roleId: number },
      TContext
    >
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof deleteRoleApiV1RolesRoleIdDelete>>,
  TError,
  { roleId: number },
  TContext
> => {
  const mutationOptions = getDeleteRoleApiV1RolesRoleIdDeleteMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
