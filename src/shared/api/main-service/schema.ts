/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/api/v1/auth/login': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Login User
     * @description Authenticate the user and issue access and refresh tokens to start a new session.
     */
    post: operations['login_api_v1_auth_login_post']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/auth/refresh': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Refresh Access Token
     * @description Use a refresh token to issue a new access token and maintain the user session.
     */
    post: operations['refresh_access_token_api_v1_auth_refresh_post']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/auth/logout': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Logout User
     * @description Revoke the refresh token to log the user out and end the current session.
     */
    post: operations['logout_api_v1_auth_logout_post']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/cities/': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get Cities List */
    get: operations['get_cities_list_api_v1_cities__get']
    put?: never
    /** Create City */
    post: operations['create_city_api_v1_cities__post']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/cities/{city_id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get City */
    get: operations['get_city_api_v1_cities__city_id__get']
    /** Update City */
    put: operations['update_city_api_v1_cities__city_id__put']
    post?: never
    /** Delete City */
    delete: operations['delete_city_api_v1_cities__city_id__delete']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/counties/': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get Counties List */
    get: operations['get_counties_list_api_v1_counties__get']
    put?: never
    /** Create Country */
    post: operations['create_country_api_v1_counties__post']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/counties/{country_id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get Country */
    get: operations['get_country_api_v1_counties__country_id__get']
    /** Update Country */
    put: operations['update_country_api_v1_counties__country_id__put']
    post?: never
    /** Delete Country */
    delete: operations['delete_country_api_v1_counties__country_id__delete']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/departments/': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get Departments List */
    get: operations['get_departments_list_api_v1_departments__get']
    put?: never
    /** Create Department */
    post: operations['create_department_api_v1_departments__post']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/departments/{department_id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get Department */
    get: operations['get_department_api_v1_departments__department_id__get']
    /** Update Department */
    put: operations['update_department_api_v1_departments__department_id__put']
    post?: never
    /** Delete Department */
    delete: operations['delete_department_api_v1_departments__department_id__delete']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/lookups/cities': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get Cities List */
    get: operations['get_cities_list_api_v1_lookups_cities_get']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/lookups/countries': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get Countries List */
    get: operations['get_countries_list_api_v1_lookups_countries_get']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/lookups/departments': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get Departments List */
    get: operations['get_departments_list_api_v1_lookups_departments_get']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/lookups/organizations': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get Organizations List */
    get: operations['get_organizations_list_api_v1_lookups_organizations_get']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/lookups/people': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get People List */
    get: operations['get_people_list_api_v1_lookups_people_get']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/lookups/positions': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get Positions List */
    get: operations['get_positions_list_api_v1_lookups_positions_get']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/lookups/permissions': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get Permissions List */
    get: operations['get_permissions_list_api_v1_lookups_permissions_get']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/lookups/roles': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get Roles List */
    get: operations['get_roles_list_api_v1_lookups_roles_get']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/organizations/': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get Organizations List */
    get: operations['get_organizations_list_api_v1_organizations__get']
    put?: never
    /** Create Organization */
    post: operations['create_organization_api_v1_organizations__post']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/organizations/{organization_id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get Organization */
    get: operations['get_organization_api_v1_organizations__organization_id__get']
    /** Update Organization */
    put: operations['update_organization_api_v1_organizations__organization_id__put']
    post?: never
    /** Delete Organization */
    delete: operations['delete_organization_api_v1_organizations__organization_id__delete']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/people/': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get People List */
    get: operations['get_people_list_api_v1_people__get']
    put?: never
    /** Create Person */
    post: operations['create_person_api_v1_people__post']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/people/{person_id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get Person */
    get: operations['get_person_api_v1_people__person_id__get']
    /** Update Person */
    put: operations['update_person_api_v1_people__person_id__put']
    post?: never
    /** Delete Person */
    delete: operations['delete_person_api_v1_people__person_id__delete']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/permissions/': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get Permissions List */
    get: operations['get_permissions_list_api_v1_permissions__get']
    put?: never
    /** Create Permission */
    post: operations['create_permission_api_v1_permissions__post']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/permissions/{permission_id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get Permission */
    get: operations['get_permission_api_v1_permissions__permission_id__get']
    /** Update Permission */
    put: operations['update_permission_api_v1_permissions__permission_id__put']
    post?: never
    /** Delete Permission */
    delete: operations['delete_permission_api_v1_permissions__permission_id__delete']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/positions/': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get Positions List */
    get: operations['get_positions_list_api_v1_positions__get']
    put?: never
    /** Create Position */
    post: operations['create_position_api_v1_positions__post']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/positions/{position_id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get Position */
    get: operations['get_position_api_v1_positions__position_id__get']
    /** Update Position */
    put: operations['update_position_api_v1_positions__position_id__put']
    post?: never
    /** Delete Position */
    delete: operations['delete_position_api_v1_positions__position_id__delete']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/roles/': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get Roles List */
    get: operations['get_roles_list_api_v1_roles__get']
    put?: never
    /** Create Role */
    post: operations['create_role_api_v1_roles__post']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/roles/{role_id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get Role */
    get: operations['get_role_api_v1_roles__role_id__get']
    /** Update Role */
    put: operations['update_role_api_v1_roles__role_id__put']
    post?: never
    /** Delete Role */
    delete: operations['delete_role_api_v1_roles__role_id__delete']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/users/': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get Users List */
    get: operations['get_users_list_api_v1_users__get']
    put?: never
    /** Create User */
    post: operations['create_user_api_v1_users__post']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/users/me': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get Me */
    get: operations['get_me_api_v1_users_me_get']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/users/{user_id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get User */
    get: operations['get_user_api_v1_users__user_id__get']
    /** Update User */
    put: operations['update_user_api_v1_users__user_id__put']
    post?: never
    /** Delete User */
    delete: operations['delete_user_api_v1_users__user_id__delete']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
}
export type webhooks = Record<string, never>
export interface components {
  schemas: {
    /**
     * AddressCreate
     * @description Schema for creating a new Address.
     */
    AddressCreate: {
      /** Street */
      street: string
      /** Postal Code */
      postalCode?: string | null
      type: components['schemas']['AddressType']
      /** Is Primary */
      isPrimary: boolean
      /** Note */
      note?: string | null
      /** City Id */
      cityId: number
    }
    /**
     * AddressDetailResponse
     * @description Complete response schema for Address entity.
     */
    AddressDetailResponse: {
      /** Street */
      street: string
      /** Postal Code */
      postalCode?: string | null
      type: components['schemas']['AddressType']
      /** Is Primary */
      isPrimary: boolean
      /** Note */
      note?: string | null
      /**
       * Id
       * Format: uuid
       */
      id: string
      /** City Id */
      cityId: number
      /**
       * Created At
       * Format: date-time
       */
      createdAt: string
      /**
       * Updated At
       * Format: date-time
       */
      updatedAt: string
    }
    /** AddressOperation */
    AddressOperation: {
      /**
       * Action
       * @enum {string}
       */
      action: 'create' | 'update' | 'delete'
      /** Data */
      data?: components['schemas']['AddressCreate'] | components['schemas']['AddressUpdate'] | null
      /** Id */
      id?: string | null
    }
    /**
     * AddressResponse
     * @description Response schema for Address entity.
     */
    AddressResponse: {
      /**
       * Id
       * Format: uuid
       */
      id: string
      /** City Id */
      cityId: number
      type: components['schemas']['AddressType']
      /** Is Primary */
      isPrimary: boolean
    }
    /**
     * AddressType
     * @description Enumerates the functional purpose of an address
     * @enum {string}
     */
    AddressType: 'billing' | 'shipping' | 'warehouse' | 'plant' | 'office' | 'home'
    /**
     * AddressUpdate
     * @description Schema for updating Address.
     */
    AddressUpdate: {
      /** City Id */
      cityId?: number | null
      /** Street */
      street?: string | null
      /** Postal Code */
      postalCode?: string | null
      type?: components['schemas']['AddressType'] | null
      /** Is Primary */
      isPrimary?: boolean | null
      /** Note */
      note?: string | null
    }
    /** CityCreate */
    CityCreate: {
      /** Name */
      name: string
      /** Name Local */
      nameLocal: string
      /** Country Id */
      countryId: number
    }
    /** CityDetailResponse */
    CityDetailResponse: {
      /** Name */
      name: string
      /** Name Local */
      nameLocal: string
      /** Id */
      id: number
      country: components['schemas']['CountryShortResponse']
      /**
       * Created At
       * Format: date-time
       */
      createdAt: string
      /**
       * Updated At
       * Format: date-time
       */
      updatedAt: string
    }
    /** CityListResponse */
    CityListResponse: {
      /** Page */
      page: number
      /** Total Pages */
      totalPages: number
      /** Total Items */
      totalItems: number
      /** Data */
      data: components['schemas']['CityShortResponse'][]
    }
    /** CityLookupResponse */
    CityLookupResponse: {
      /** Name */
      name: string
      /** Name Local */
      nameLocal: string
      /** Id */
      id: number
      /** Country Id */
      countryId: number
    }
    /** CityResponse */
    CityResponse: {
      /** Name */
      name: string
      /** Name Local */
      nameLocal: string
      /** Id */
      id: number
      /** Country Id */
      countryId: number
    }
    /** CityShortResponse */
    CityShortResponse: {
      /** Name */
      name: string
      /** Name Local */
      nameLocal: string
      /** Id */
      id: number
    }
    /** CityUpdate */
    CityUpdate: {
      /** Country Id */
      countryId?: number | null
      /** Name */
      name?: string | null
      /** Name Local */
      nameLocal?: string | null
    }
    /**
     * ContactCreate
     * @description Schema for creating a new Contact.
     */
    ContactCreate: {
      type: components['schemas']['ContactType']
      /** Value */
      value: string
      /** Is Primary */
      isPrimary: boolean
      /** Note */
      note?: string | null
    }
    /**
     * ContactDetailResponse
     * @description Complete response schema for Contact entity.
     */
    ContactDetailResponse: {
      type: components['schemas']['ContactType']
      /** Value */
      value: string
      /** Is Primary */
      isPrimary: boolean
      /** Note */
      note?: string | null
      /**
       * Id
       * Format: uuid
       */
      id: string
      /**
       * Created At
       * Format: date-time
       */
      createdAt: string
      /**
       * Updated At
       * Format: date-time
       */
      updatedAt: string
    }
    /** ContactOperation */
    ContactOperation: {
      /**
       * Action
       * @enum {string}
       */
      action: 'create' | 'update' | 'delete'
      /** Data */
      data?: components['schemas']['ContactCreate'] | components['schemas']['ContactUpdate'] | null
      /** Id */
      id?: string | null
    }
    /**
     * ContactResponse
     * @description Response schema for Contact entity.
     */
    ContactResponse: {
      type: components['schemas']['ContactType']
      /** Value */
      value: string
      /** Is Primary */
      isPrimary: boolean
      /** Note */
      note?: string | null
      /**
       * Id
       * Format: uuid
       */
      id: string
    }
    /**
     * ContactType
     * @description Enumerates contact methods used in the system
     * @enum {string}
     */
    ContactType: 'email' | 'phone' | 'telegram' | 'linkedin' | 'website'
    /**
     * ContactUpdate
     * @description Schema for updating Contact.
     */
    ContactUpdate: {
      type?: components['schemas']['ContactType'] | null
      /** Value */
      value?: string | null
      /** Is Primary */
      isPrimary?: boolean | null
      /** Note */
      note?: string | null
    }
    /** CountryCreate */
    CountryCreate: {
      /** Code */
      code: string
      /** Code3 */
      code3?: string | null
      /** Numeric Code */
      numericCode?: string | null
      /** Name */
      name: string
      /** Name Local */
      nameLocal: string
    }
    /** CountryDetailResponse */
    CountryDetailResponse: {
      /** Code */
      code: string
      /** Code3 */
      code3?: string | null
      /** Numeric Code */
      numericCode?: string | null
      /** Name */
      name: string
      /** Name Local */
      nameLocal: string
      /** Id */
      id: number
      /** Cities */
      cities: components['schemas']['CityShortResponse'][]
      /**
       * Created At
       * Format: date-time
       */
      createdAt: string
      /**
       * Updated At
       * Format: date-time
       */
      updatedAt: string
    }
    /** CountryListResponse */
    CountryListResponse: {
      /** Page */
      page: number
      /** Total Pages */
      totalPages: number
      /** Total Items */
      totalItems: number
      /** Data */
      data: components['schemas']['CountryShortResponse'][]
    }
    /** CountryLookupResponse */
    CountryLookupResponse: {
      /** Id */
      id: number
      /** Code */
      code: string
      /** Name */
      name: string
      /** Name Local */
      nameLocal: string
    }
    /** CountryResponse */
    CountryResponse: {
      /** Code */
      code: string
      /** Code3 */
      code3?: string | null
      /** Numeric Code */
      numericCode?: string | null
      /** Name */
      name: string
      /** Name Local */
      nameLocal: string
      /** Id */
      id: number
    }
    /** CountryShortResponse */
    CountryShortResponse: {
      /** Id */
      id: number
      /** Code */
      code: string
      /** Name */
      name: string
      /** Name Local */
      nameLocal: string
    }
    /** CountryUpdate */
    CountryUpdate: {
      /** Code */
      code?: string | null
      /** Code3 */
      code3?: string | null
      /** Numeric Code */
      numericCode?: string | null
      /** Name */
      name?: string | null
      /** Name Local */
      nameLocal?: string | null
    }
    /** DepartmentCreate */
    DepartmentCreate: {
      /** Name */
      name: string
      /** Description */
      description?: string | null
    }
    /** DepartmentDetailResponse */
    DepartmentDetailResponse: {
      /** Name */
      name: string
      /** Description */
      description?: string | null
      /**
       * Id
       * Format: uuid
       */
      id: string
      /** Permissions */
      permissions: components['schemas']['PermissionShortResponse'][]
      /**
       * Created At
       * Format: date-time
       */
      createdAt: string
      /**
       * Updated At
       * Format: date-time
       */
      updatedAt: string
    }
    /** DepartmentListResponse */
    DepartmentListResponse: {
      /** Page */
      page: number
      /** Total Pages */
      totalPages: number
      /** Total Items */
      totalItems: number
      /** Data */
      data: components['schemas']['DepartmentShortResponse'][]
    }
    /** DepartmentLookupResponse */
    DepartmentLookupResponse: {
      /**
       * Id
       * Format: uuid
       */
      id: string
      /** Name */
      name: string
    }
    /** DepartmentResponse */
    DepartmentResponse: {
      /** Name */
      name: string
      /** Description */
      description?: string | null
      /**
       * Id
       * Format: uuid
       */
      id: string
    }
    /** DepartmentShortResponse */
    DepartmentShortResponse: {
      /** Name */
      name: string
      /** Description */
      description?: string | null
      /**
       * Id
       * Format: uuid
       */
      id: string
    }
    /** DepartmentUpdate */
    DepartmentUpdate: {
      /** Name */
      name?: string | null
      /** Description */
      description?: string | null
    }
    /**
     * EmployeeProfileCreate
     * @description Schema for creating a new EmployeeProfile.
     */
    EmployeeProfileCreate: {
      /** Employee Number */
      employeeNumber?: string | null
      /**
       * Hired At
       * Format: date
       */
      hiredAt: string
      employmentStatus: components['schemas']['EmploymentStatus']
    }
    /**
     * EmployeeProfileDetailResponse
     * @description Complete response schema for EmployeeProfile entity.
     */
    EmployeeProfileDetailResponse: {
      /** Employee Number */
      employeeNumber?: string | null
      /**
       * Hired At
       * Format: date
       */
      hiredAt: string
      employmentStatus: components['schemas']['EmploymentStatus']
      /**
       * Created At
       * Format: date-time
       */
      createdAt: string
      /**
       * Updated At
       * Format: date-time
       */
      updatedAt: string
    }
    /** EmployeeProfileResponse */
    EmployeeProfileResponse: {
      /** Employee Number */
      employeeNumber?: string | null
      /**
       * Hired At
       * Format: date
       */
      hiredAt: string
      employmentStatus: components['schemas']['EmploymentStatus']
    }
    /**
     * EmployeeProfileUpdate
     * @description Schema for updating an existing EmployeeProfile.
     */
    EmployeeProfileUpdate: {
      /** Employee Number */
      employeeNumber?: string | null
      /** Hired At */
      hiredAt?: string | null
      employmentStatus?: components['schemas']['EmploymentStatus'] | null
    }
    /**
     * EmploymentStatus
     * @description Employment status enumeration for EmployeeProfile model
     * @enum {string}
     */
    EmploymentStatus:
      | 'intern'
      | 'full-time'
      | 'part-time'
      | 'contract'
      | 'on-leave'
      | 'suspended'
      | 'terminated'
      | 'retired'
    /**
     * Gender
     * @description Enumerates gender options for Person model
     * @enum {string}
     */
    Gender: 'male' | 'female' | 'other'
    /** HTTPValidationError */
    HttpValidationError: {
      /** Detail */
      detail?: components['schemas']['ValidationError'][]
    }
    /** LoginRequest */
    LoginRequest: {
      /**
       * Email
       * Format: email
       */
      email: string
      /** Password */
      password: string
    }
    /** LogoutRequest */
    LogoutRequest: {
      /** Refresh Token */
      refreshToken: string
    }
    /** OrganizationCreate */
    OrganizationCreate: {
      /** Legal Name */
      legalName: string
      /** Registration Number */
      registrationNumber?: string | null
      /** Tax Id */
      taxId?: string | null
      /** Country Id */
      countryId: number
      /** Contacts */
      contacts?: components['schemas']['ContactCreate'][] | null
      /** Addresses */
      addresses?: components['schemas']['AddressCreate'][] | null
    }
    /** OrganizationDetailResponse */
    OrganizationDetailResponse: {
      /** Legal Name */
      legalName: string
      /** Registration Number */
      registrationNumber?: string | null
      /** Tax Id */
      taxId?: string | null
      /**
       * Id
       * Format: uuid
       */
      id: string
      country: components['schemas']['CountryShortResponse']
      /** Contacts */
      contacts: components['schemas']['ContactDetailResponse'][]
      /** Addresses */
      addresses: components['schemas']['AddressDetailResponse'][]
      /**
       * Created At
       * Format: date-time
       */
      createdAt: string
      /**
       * Updated At
       * Format: date-time
       */
      updatedAt: string
    }
    /** OrganizationListResponse */
    OrganizationListResponse: {
      /** Page */
      page: number
      /** Total Pages */
      totalPages: number
      /** Total Items */
      totalItems: number
      /** Data */
      data: components['schemas']['OrganizationShortResponse'][]
    }
    /** OrganizationLookupResponse */
    OrganizationLookupResponse: {
      /**
       * Id
       * Format: uuid
       */
      id: string
      /** Legal Name */
      legalName: string
      /** Registration Number */
      registrationNumber: string | null
    }
    /** OrganizationResponse */
    OrganizationResponse: {
      /** Legal Name */
      legalName: string
      /** Registration Number */
      registrationNumber?: string | null
      /** Tax Id */
      taxId?: string | null
      /**
       * Id
       * Format: uuid
       */
      id: string
      country: components['schemas']['CountryShortResponse']
      /** Contacts */
      contacts: components['schemas']['ContactResponse'][]
      /** Addresses */
      addresses: components['schemas']['AddressResponse'][]
    }
    /** OrganizationShortResponse */
    OrganizationShortResponse: {
      /** Legal Name */
      legalName: string
      /** Registration Number */
      registrationNumber?: string | null
      /** Tax Id */
      taxId?: string | null
      /**
       * Id
       * Format: uuid
       */
      id: string
      /** Country Name */
      countryName: string
    }
    /** OrganizationUpdate */
    OrganizationUpdate: {
      /** Country Id */
      countryId?: number | null
      /** Legal Name */
      legalName?: string | null
      /** Registration Number */
      registrationNumber?: string | null
      /** Tax Id */
      taxId?: string | null
      /** Contact Operations */
      contactOperations?: components['schemas']['ContactOperation'][] | null
      /** Address Operations */
      addressOperations?: components['schemas']['AddressOperation'][] | null
    }
    /** PermissionCreate */
    PermissionCreate: {
      /** Name */
      name: string
      /** Description */
      description?: string | null
      /**
       * Department Id
       * Format: uuid
       */
      departmentId: string
    }
    /** PermissionDetailResponse */
    PermissionDetailResponse: {
      /** Name */
      name: string
      /** Description */
      description?: string | null
      /** Id */
      id: number
      department: components['schemas']['DepartmentShortResponse']
      /**
       * Created At
       * Format: date-time
       */
      createdAt: string
      /**
       * Updated At
       * Format: date-time
       */
      updatedAt: string
    }
    /** PermissionListItemResponse */
    PermissionListItemResponse: {
      /** Id */
      id: number
      /** Name */
      name: string
      /** Department Name */
      departmentName: string
    }
    /** PermissionListResponse */
    PermissionListResponse: {
      /** Page */
      page: number
      /** Total Pages */
      totalPages: number
      /** Total Items */
      totalItems: number
      /** Data */
      data: components['schemas']['PermissionListItemResponse'][]
    }
    /** PermissionLookupResponse */
    PermissionLookupResponse: {
      /** Id */
      id: number
      /** Name */
      name: string
      /** Department Name */
      departmentName: string
    }
    /** PermissionResponse */
    PermissionResponse: {
      /** Name */
      name: string
      /** Description */
      description?: string | null
      /** Id */
      id: number
      department: components['schemas']['DepartmentShortResponse']
    }
    /** PermissionShortResponse */
    PermissionShortResponse: {
      /** Name */
      name: string
      /** Description */
      description?: string | null
      /** Id */
      id: number
    }
    /** PermissionUpdate */
    PermissionUpdate: {
      /** Department Id */
      departmentId?: string | null
      /** Name */
      name?: string | null
      /** Description */
      description?: string | null
    }
    /**
     * PersonCreate
     * @description Schema for creating a new Person with related entities.
     *
     *     Extends PersonBase to include core personal information.
     */
    PersonCreate: {
      /** First Name */
      firstName: string
      /** Middle Name */
      middleName?: string | null
      /** Last Name */
      lastName: string
      gender: components['schemas']['Gender']
      /** Birth Date */
      birthDate?: string | null
      /** Photo Url */
      photoUrl?: string | null
      employeeProfile?: components['schemas']['EmployeeProfileCreate'] | null
      /** Contacts */
      contacts?: components['schemas']['ContactCreate'][] | null
      /** Addresses */
      addresses?: components['schemas']['AddressCreate'][] | null
      /** Organization Ids */
      organizationIds?: string[] | null
      /** Position Ids */
      positionIds?: string[] | null
    }
    /**
     * PersonDetailResponse
     * @description Complete response schema for Person entity with all related data.
     *
     *     Used for detailed person information retrieval, including all relationships and metadata.
     *     Configured for ORM compatibility.
     */
    PersonDetailResponse: {
      /** First Name */
      firstName: string
      /** Middle Name */
      middleName?: string | null
      /** Last Name */
      lastName: string
      gender: components['schemas']['Gender']
      /** Birth Date */
      birthDate?: string | null
      /** Photo Url */
      photoUrl?: string | null
      /**
       * Id
       * Format: uuid
       */
      id: string
      /** Is User */
      isUser: boolean
      employeeProfile?: components['schemas']['EmployeeProfileDetailResponse'] | null
      /** Contacts */
      contacts: components['schemas']['ContactDetailResponse'][]
      /** Addresses */
      addresses: components['schemas']['AddressDetailResponse'][]
      /** Organizations */
      organizations: components['schemas']['OrganizationShortResponse'][]
      /** Positions */
      positions: components['schemas']['PositionShortResponse'][]
      /**
       * Created At
       * Format: date-time
       */
      createdAt: string
      /**
       * Updated At
       * Format: date-time
       */
      updatedAt: string
    }
    /**
     * PersonListItemResponse
     * @description Optimized schema for Person list items in paginated responses.
     *
     *     Contains minimal essential information for list displays, reducing payload size and improving
     *     performance for large datasets while providing key business information.
     */
    PersonListItemResponse: {
      /**
       * Id
       * Format: uuid
       */
      id: string
      /** Full Name */
      fullName: string
      gender: components['schemas']['Gender']
      /** Photo Url */
      photoUrl: string | null
      /** Is User */
      isUser: boolean
      /** Is Employee */
      isEmployee: boolean
      /** Contacts Count */
      contactsCount: number
      /** Addresses Count */
      addressesCount: number
      /** Organization Names */
      organizationNames: string[]
      /** Position Names */
      positionNames: string[]
    }
    /**
     * PersonListResponse
     * @description Paginated response container for Person list operations.
     *
     *     Extends base list response with Person-specific list items, providing pagination metadata and
     *     standardized list structure.
     */
    PersonListResponse: {
      /** Page */
      page: number
      /** Total Pages */
      totalPages: number
      /** Total Items */
      totalItems: number
      /** Data */
      data: components['schemas']['PersonListItemResponse'][]
    }
    /** PersonLookupResponse */
    PersonLookupResponse: {
      /**
       * Id
       * Format: uuid
       */
      id: string
      /** Full Name */
      fullName: string
    }
    /**
     * PersonResponse
     * @description Response schema for Person entity with all related data.
     */
    PersonResponse: {
      /**
       * Id
       * Format: uuid
       */
      id: string
      /** Full Name */
      fullName: string
      gender: components['schemas']['Gender']
      /** Photo Url */
      photoUrl: string | null
      employeeProfile?: components['schemas']['EmployeeProfileResponse'] | null
      /** Contacts */
      contacts: components['schemas']['ContactResponse'][]
      /** Addresses */
      addresses: components['schemas']['AddressResponse'][]
      /** Organization Names */
      organizationNames: string[]
      /** Position Names */
      positionNames: string[]
    }
    /**
     * PersonUpdate
     * @description Schema for updating Person with complex relationship operations.
     *
     *     Supports partial updates of person data and sophisticated operations on related entities
     *     including creation, updates, and deletions. All fields are optional to support partial updates.
     */
    PersonUpdate: {
      /** First Name */
      firstName?: string | null
      /** Middle Name */
      middleName?: string | null
      /** Last Name */
      lastName?: string | null
      gender?: components['schemas']['Gender'] | null
      /** Birth Date */
      birthDate?: string | null
      /** Photo Url */
      photoUrl?: string | null
      /** Employee Profile Action */
      employeeProfileAction?: ('create' | 'update' | 'delete') | null
      /** Employee Profile Data */
      employeeProfileData?:
        | components['schemas']['EmployeeProfileCreate']
        | components['schemas']['EmployeeProfileUpdate']
        | null
      /** Contact Operations */
      contactOperations?: components['schemas']['ContactOperation'][] | null
      /** Address Operations */
      addressOperations?: components['schemas']['AddressOperation'][] | null
      /** Organization Ids */
      organizationIds?: string[] | null
      /** Position Ids */
      positionIds?: string[] | null
    }
    /**
     * PositionCreate
     * @description Schema for creating a new Position.
     */
    PositionCreate: {
      /** Name */
      name: string
      /** Description */
      description?: string | null
    }
    /**
     * PositionDetailResponse
     * @description Complete response schema for Position entity.
     */
    PositionDetailResponse: {
      /** Name */
      name: string
      /** Description */
      description?: string | null
      /**
       * Id
       * Format: uuid
       */
      id: string
      /**
       * Created At
       * Format: date-time
       */
      createdAt: string
      /**
       * Updated At
       * Format: date-time
       */
      updatedAt: string
    }
    /**
     * PositionListResponse
     * @description Paginated response container for Position list operations.
     */
    PositionListResponse: {
      /** Page */
      page: number
      /** Total Pages */
      totalPages: number
      /** Total Items */
      totalItems: number
      /** Data */
      data: components['schemas']['PositionShortResponse'][]
    }
    /** PositionLookupResponse */
    PositionLookupResponse: {
      /**
       * Id
       * Format: uuid
       */
      id: string
      /** Name */
      name: string
    }
    /**
     * PositionResponse
     * @description Regular response schema for Position entity.
     */
    PositionResponse: {
      /** Name */
      name: string
      /** Description */
      description?: string | null
      /**
       * Id
       * Format: uuid
       */
      id: string
    }
    /**
     * PositionShortResponse
     * @description Short response schema for Position entity.
     */
    PositionShortResponse: {
      /** Name */
      name: string
      /** Description */
      description?: string | null
      /**
       * Id
       * Format: uuid
       */
      id: string
    }
    /**
     * PositionUpdate
     * @description Schema for updating an existing Position.
     */
    PositionUpdate: {
      /** Name */
      name?: string | null
      /** Description */
      description?: string | null
    }
    /** RoleCreate */
    RoleCreate: {
      /** Name */
      name: string
      /** Description */
      description?: string | null
      /** Permission Ids */
      permissionIds?: number[] | null
    }
    /** RoleDetailResponse */
    RoleDetailResponse: {
      /** Name */
      name: string
      /** Description */
      description?: string | null
      /** Id */
      id: number
      /** Permissions */
      permissions: components['schemas']['PermissionListItemResponse'][]
      /**
       * Created At
       * Format: date-time
       */
      createdAt: string
      /**
       * Updated At
       * Format: date-time
       */
      updatedAt: string
    }
    /** RoleListResponse */
    RoleListResponse: {
      /** Page */
      page: number
      /** Total Pages */
      totalPages: number
      /** Total Items */
      totalItems: number
      /** Data */
      data: components['schemas']['RoleShortResponse'][]
    }
    /** RoleLookupResponse */
    RoleLookupResponse: {
      /** Id */
      id: number
      /** Name */
      name: string
    }
    /** RoleResponse */
    RoleResponse: {
      /** Name */
      name: string
      /** Description */
      description?: string | null
      /** Id */
      id: number
    }
    /** RoleShortResponse */
    RoleShortResponse: {
      /** Id */
      id: number
      /** Name */
      name: string
      /** Permissions */
      permissions: components['schemas']['PermissionListItemResponse'][]
    }
    /** RoleUpdate */
    RoleUpdate: {
      /** Name */
      name?: string | null
      /** Description */
      description?: string | null
      /** Permission Ids */
      permissionIds?: number[] | null
    }
    /** TokenPairResponse */
    TokenPairResponse: {
      /** Access Token */
      accessToken: string
      /** Refresh Token */
      refreshToken?: string | null
      /**
       * Token Type
       * @default bearer
       */
      tokenType: string
    }
    /** TokenRefreshRequest */
    TokenRefreshRequest: {
      /** Refresh Token */
      refreshToken: string
    }
    /** TokenRefreshResponse */
    TokenRefreshResponse: {
      /** Access Token */
      accessToken: string
      /**
       * Token Type
       * @default bearer
       */
      tokenType: string
    }
    /** UserCreate */
    UserCreate: {
      /**
       * Email
       * Format: email
       */
      email: string
      /**
       * Person Id
       * Format: uuid
       */
      personId: string
      /** Raw Password */
      rawPassword: string
      /**
       * Is Active
       * @default true
       */
      isActive: boolean
      /**
       * Is Superuser
       * @default false
       */
      isSuperuser: boolean
      /** Roles Ids */
      rolesIds?: number[] | null
      /** Permissions Ids */
      permissionsIds?: number[] | null
    }
    /** UserDetailResponse */
    UserDetailResponse: {
      /**
       * Email
       * Format: email
       */
      email: string
      /**
       * Id
       * Format: uuid
       */
      id: string
      /** Is Active */
      isActive: boolean
      /** Is Superuser */
      isSuperuser: boolean
      /** Last Login At */
      lastLoginAt?: string | null
      /** Roles */
      roles: components['schemas']['RoleResponse'][]
      /** Permissions */
      permissions: components['schemas']['PermissionResponse'][]
      /**
       * Created At
       * Format: date-time
       */
      createdAt: string
      /**
       * Updated At
       * Format: date-time
       */
      updatedAt: string
    }
    /** UserListResponse */
    UserListResponse: {
      /** Page */
      page: number
      /** Total Pages */
      totalPages: number
      /** Total Items */
      totalItems: number
      /** Data */
      data: components['schemas']['UserShortResponse'][]
    }
    /** UserResponse */
    UserResponse: {
      /**
       * Email
       * Format: email
       */
      email: string
      /**
       * Id
       * Format: uuid
       */
      id: string
      /** Is Active */
      isActive: boolean
      /** Is Superuser */
      isSuperuser: boolean
      /** Last Login At */
      lastLoginAt?: string | null
      /** Roles */
      roles: components['schemas']['RoleResponse'][]
      /** Permissions */
      permissions: components['schemas']['PermissionResponse'][]
    }
    /** UserShortResponse */
    UserShortResponse: {
      /**
       * Email
       * Format: email
       */
      email: string
      /**
       * Id
       * Format: uuid
       */
      id: string
      /** Full Name */
      fullName: string
      /** Is Active */
      isActive: boolean
      /** Is Superuser */
      isSuperuser: boolean
      /** Last Login At */
      lastLoginAt?: string | null
      /** Role Names */
      roleNames: string[]
      /** Permission Names */
      permissionNames: string[]
    }
    /** UserUpdate */
    UserUpdate: {
      /** Email */
      email?: string | null
      /** Is Active */
      isActive?: boolean | null
      /** Is Superuser */
      isSuperuser?: boolean | null
      /** Roles Ids */
      rolesIds?: number[] | null
      /** Permissions Ids */
      permissionsIds?: number[] | null
    }
    /** ValidationError */
    ValidationError: {
      /** Location */
      loc: (string | number)[]
      /** Message */
      msg: string
      /** Error Type */
      type: string
    }
  }
  responses: never
  parameters: never
  requestBodies: never
  headers: never
  pathItems: never
}
export type $defs = Record<string, never>
export interface operations {
  login_api_v1_auth_login_post: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['LoginRequest']
      }
    }
    responses: {
      /** @description Successful Response */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['TokenPairResponse']
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HttpValidationError']
        }
      }
    }
  }
  refresh_access_token_api_v1_auth_refresh_post: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['TokenRefreshRequest']
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['TokenRefreshResponse']
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HttpValidationError']
        }
      }
    }
  }
  logout_api_v1_auth_logout_post: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['LogoutRequest']
      }
    }
    responses: {
      /** @description Successful Response */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HttpValidationError']
        }
      }
    }
  }
  get_cities_list_api_v1_cities__get: {
    parameters: {
      query?: {
        page?: number
        perPage?: number
      }
      header?: {
        xUserId?: string | null
        xUserEmail?: string | null
      }
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CityListResponse']
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HttpValidationError']
        }
      }
    }
  }
  create_city_api_v1_cities__post: {
    parameters: {
      query?: never
      header?: {
        xUserId?: string | null
        xUserEmail?: string | null
      }
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CityCreate']
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CityResponse']
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HttpValidationError']
        }
      }
    }
  }
  get_city_api_v1_cities__city_id__get: {
    parameters: {
      query?: never
      header?: {
        xUserId?: string | null
        xUserEmail?: string | null
      }
      path: {
        cityId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CityDetailResponse']
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HttpValidationError']
        }
      }
    }
  }
  update_city_api_v1_cities__city_id__put: {
    parameters: {
      query?: never
      header?: {
        xUserId?: string | null
        xUserEmail?: string | null
      }
      path: {
        cityId: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CityUpdate']
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CityResponse']
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HttpValidationError']
        }
      }
    }
  }
  delete_city_api_v1_cities__city_id__delete: {
    parameters: {
      query?: never
      header?: {
        xUserId?: string | null
        xUserEmail?: string | null
      }
      path: {
        cityId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': unknown
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HttpValidationError']
        }
      }
    }
  }
  get_counties_list_api_v1_counties__get: {
    parameters: {
      query?: {
        page?: number
        perPage?: number
      }
      header?: {
        xUserId?: string | null
        xUserEmail?: string | null
      }
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CountryListResponse']
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HttpValidationError']
        }
      }
    }
  }
  create_country_api_v1_counties__post: {
    parameters: {
      query?: never
      header?: {
        xUserId?: string | null
        xUserEmail?: string | null
      }
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CountryCreate']
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CountryResponse']
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HttpValidationError']
        }
      }
    }
  }
  get_country_api_v1_counties__country_id__get: {
    parameters: {
      query?: never
      header?: {
        xUserId?: string | null
        xUserEmail?: string | null
      }
      path: {
        countryId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CountryDetailResponse']
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HttpValidationError']
        }
      }
    }
  }
  update_country_api_v1_counties__country_id__put: {
    parameters: {
      query?: never
      header?: {
        xUserId?: string | null
        xUserEmail?: string | null
      }
      path: {
        countryId: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CountryUpdate']
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CountryResponse']
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HttpValidationError']
        }
      }
    }
  }
  delete_country_api_v1_counties__country_id__delete: {
    parameters: {
      query?: never
      header?: {
        xUserId?: string | null
        xUserEmail?: string | null
      }
      path: {
        countryId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': unknown
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HttpValidationError']
        }
      }
    }
  }
  get_departments_list_api_v1_departments__get: {
    parameters: {
      query?: {
        page?: number
        perPage?: number
      }
      header?: {
        xUserId?: string | null
        xUserEmail?: string | null
      }
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['DepartmentListResponse']
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HttpValidationError']
        }
      }
    }
  }
  create_department_api_v1_departments__post: {
    parameters: {
      query?: never
      header?: {
        xUserId?: string | null
        xUserEmail?: string | null
      }
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['DepartmentCreate']
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['DepartmentResponse']
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HttpValidationError']
        }
      }
    }
  }
  get_department_api_v1_departments__department_id__get: {
    parameters: {
      query?: never
      header?: {
        xUserId?: string | null
        xUserEmail?: string | null
      }
      path: {
        departmentId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['DepartmentDetailResponse']
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HttpValidationError']
        }
      }
    }
  }
  update_department_api_v1_departments__department_id__put: {
    parameters: {
      query?: never
      header?: {
        xUserId?: string | null
        xUserEmail?: string | null
      }
      path: {
        departmentId: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['DepartmentUpdate']
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['DepartmentResponse']
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HttpValidationError']
        }
      }
    }
  }
  delete_department_api_v1_departments__department_id__delete: {
    parameters: {
      query?: never
      header?: {
        xUserId?: string | null
        xUserEmail?: string | null
      }
      path: {
        departmentId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': unknown
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HttpValidationError']
        }
      }
    }
  }
  get_cities_list_api_v1_lookups_cities_get: {
    parameters: {
      query?: {
        limit?: number | null
        search?: string | null
      }
      header?: {
        xUserId?: string | null
        xUserEmail?: string | null
      }
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CityLookupResponse'][]
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HttpValidationError']
        }
      }
    }
  }
  get_countries_list_api_v1_lookups_countries_get: {
    parameters: {
      query?: {
        limit?: number | null
        search?: string | null
      }
      header?: {
        xUserId?: string | null
        xUserEmail?: string | null
      }
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CountryLookupResponse'][]
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HttpValidationError']
        }
      }
    }
  }
  get_departments_list_api_v1_lookups_departments_get: {
    parameters: {
      query?: {
        limit?: number | null
        search?: string | null
      }
      header?: {
        xUserId?: string | null
        xUserEmail?: string | null
      }
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['DepartmentLookupResponse'][]
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HttpValidationError']
        }
      }
    }
  }
  get_organizations_list_api_v1_lookups_organizations_get: {
    parameters: {
      query?: {
        limit?: number | null
        search?: string | null
      }
      header?: {
        xUserId?: string | null
        xUserEmail?: string | null
      }
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['OrganizationLookupResponse'][]
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HttpValidationError']
        }
      }
    }
  }
  get_people_list_api_v1_lookups_people_get: {
    parameters: {
      query?: {
        limit?: number | null
        search?: string | null
      }
      header?: {
        xUserId?: string | null
        xUserEmail?: string | null
      }
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PersonLookupResponse'][]
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HttpValidationError']
        }
      }
    }
  }
  get_positions_list_api_v1_lookups_positions_get: {
    parameters: {
      query?: {
        limit?: number | null
        search?: string | null
      }
      header?: {
        xUserId?: string | null
        xUserEmail?: string | null
      }
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PositionLookupResponse'][]
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HttpValidationError']
        }
      }
    }
  }
  get_permissions_list_api_v1_lookups_permissions_get: {
    parameters: {
      query?: {
        limit?: number | null
        search?: string | null
      }
      header?: {
        xUserId?: string | null
        xUserEmail?: string | null
      }
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PermissionLookupResponse'][]
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HttpValidationError']
        }
      }
    }
  }
  get_roles_list_api_v1_lookups_roles_get: {
    parameters: {
      query?: {
        limit?: number | null
        search?: string | null
      }
      header?: {
        xUserId?: string | null
        xUserEmail?: string | null
      }
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['RoleLookupResponse'][]
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HttpValidationError']
        }
      }
    }
  }
  get_organizations_list_api_v1_organizations__get: {
    parameters: {
      query?: {
        page?: number
        perPage?: number
      }
      header?: {
        xUserId?: string | null
        xUserEmail?: string | null
      }
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['OrganizationListResponse']
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HttpValidationError']
        }
      }
    }
  }
  create_organization_api_v1_organizations__post: {
    parameters: {
      query?: never
      header?: {
        xUserId?: string | null
        xUserEmail?: string | null
      }
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['OrganizationCreate']
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['OrganizationResponse']
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HttpValidationError']
        }
      }
    }
  }
  get_organization_api_v1_organizations__organization_id__get: {
    parameters: {
      query?: never
      header?: {
        xUserId?: string | null
        xUserEmail?: string | null
      }
      path: {
        organizationId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['OrganizationDetailResponse']
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HttpValidationError']
        }
      }
    }
  }
  update_organization_api_v1_organizations__organization_id__put: {
    parameters: {
      query?: never
      header?: {
        xUserId?: string | null
        xUserEmail?: string | null
      }
      path: {
        organizationId: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['OrganizationUpdate']
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['OrganizationResponse']
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HttpValidationError']
        }
      }
    }
  }
  delete_organization_api_v1_organizations__organization_id__delete: {
    parameters: {
      query?: never
      header?: {
        xUserId?: string | null
        xUserEmail?: string | null
      }
      path: {
        organizationId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': unknown
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HttpValidationError']
        }
      }
    }
  }
  get_people_list_api_v1_people__get: {
    parameters: {
      query?: {
        page?: number
        perPage?: number
      }
      header?: {
        xUserId?: string | null
        xUserEmail?: string | null
      }
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PersonListResponse']
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HttpValidationError']
        }
      }
    }
  }
  create_person_api_v1_people__post: {
    parameters: {
      query?: never
      header?: {
        xUserId?: string | null
        xUserEmail?: string | null
      }
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['PersonCreate']
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PersonResponse']
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HttpValidationError']
        }
      }
    }
  }
  get_person_api_v1_people__person_id__get: {
    parameters: {
      query?: never
      header?: {
        xUserId?: string | null
        xUserEmail?: string | null
      }
      path: {
        personId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PersonDetailResponse']
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HttpValidationError']
        }
      }
    }
  }
  update_person_api_v1_people__person_id__put: {
    parameters: {
      query?: never
      header?: {
        xUserId?: string | null
        xUserEmail?: string | null
      }
      path: {
        personId: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['PersonUpdate']
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PersonResponse']
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HttpValidationError']
        }
      }
    }
  }
  delete_person_api_v1_people__person_id__delete: {
    parameters: {
      query?: never
      header?: {
        xUserId?: string | null
        xUserEmail?: string | null
      }
      path: {
        personId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': unknown
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HttpValidationError']
        }
      }
    }
  }
  get_permissions_list_api_v1_permissions__get: {
    parameters: {
      query?: {
        page?: number
        perPage?: number
      }
      header?: {
        xUserId?: string | null
        xUserEmail?: string | null
      }
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PermissionListResponse']
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HttpValidationError']
        }
      }
    }
  }
  create_permission_api_v1_permissions__post: {
    parameters: {
      query?: never
      header?: {
        xUserId?: string | null
        xUserEmail?: string | null
      }
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['PermissionCreate']
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PermissionResponse']
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HttpValidationError']
        }
      }
    }
  }
  get_permission_api_v1_permissions__permission_id__get: {
    parameters: {
      query?: never
      header?: {
        xUserId?: string | null
        xUserEmail?: string | null
      }
      path: {
        permissionId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PermissionDetailResponse']
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HttpValidationError']
        }
      }
    }
  }
  update_permission_api_v1_permissions__permission_id__put: {
    parameters: {
      query?: never
      header?: {
        xUserId?: string | null
        xUserEmail?: string | null
      }
      path: {
        permissionId: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['PermissionUpdate']
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PermissionResponse']
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HttpValidationError']
        }
      }
    }
  }
  delete_permission_api_v1_permissions__permission_id__delete: {
    parameters: {
      query?: never
      header?: {
        xUserId?: string | null
        xUserEmail?: string | null
      }
      path: {
        permissionId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': unknown
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HttpValidationError']
        }
      }
    }
  }
  get_positions_list_api_v1_positions__get: {
    parameters: {
      query?: {
        page?: number
        perPage?: number
      }
      header?: {
        xUserId?: string | null
        xUserEmail?: string | null
      }
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PositionListResponse']
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HttpValidationError']
        }
      }
    }
  }
  create_position_api_v1_positions__post: {
    parameters: {
      query?: never
      header?: {
        xUserId?: string | null
        xUserEmail?: string | null
      }
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['PositionCreate']
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PositionResponse']
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HttpValidationError']
        }
      }
    }
  }
  get_position_api_v1_positions__position_id__get: {
    parameters: {
      query?: never
      header?: {
        xUserId?: string | null
        xUserEmail?: string | null
      }
      path: {
        positionId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PositionDetailResponse']
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HttpValidationError']
        }
      }
    }
  }
  update_position_api_v1_positions__position_id__put: {
    parameters: {
      query?: never
      header?: {
        xUserId?: string | null
        xUserEmail?: string | null
      }
      path: {
        positionId: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['PositionUpdate']
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PositionResponse']
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HttpValidationError']
        }
      }
    }
  }
  delete_position_api_v1_positions__position_id__delete: {
    parameters: {
      query?: never
      header?: {
        xUserId?: string | null
        xUserEmail?: string | null
      }
      path: {
        positionId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': unknown
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HttpValidationError']
        }
      }
    }
  }
  get_roles_list_api_v1_roles__get: {
    parameters: {
      query?: {
        page?: number
        perPage?: number
      }
      header?: {
        xUserId?: string | null
        xUserEmail?: string | null
      }
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['RoleListResponse']
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HttpValidationError']
        }
      }
    }
  }
  create_role_api_v1_roles__post: {
    parameters: {
      query?: never
      header?: {
        xUserId?: string | null
        xUserEmail?: string | null
      }
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['RoleCreate']
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['RoleResponse']
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HttpValidationError']
        }
      }
    }
  }
  get_role_api_v1_roles__role_id__get: {
    parameters: {
      query?: never
      header?: {
        xUserId?: string | null
        xUserEmail?: string | null
      }
      path: {
        roleId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['RoleDetailResponse']
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HttpValidationError']
        }
      }
    }
  }
  update_role_api_v1_roles__role_id__put: {
    parameters: {
      query?: never
      header?: {
        xUserId?: string | null
        xUserEmail?: string | null
      }
      path: {
        roleId: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['RoleUpdate']
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['RoleResponse']
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HttpValidationError']
        }
      }
    }
  }
  delete_role_api_v1_roles__role_id__delete: {
    parameters: {
      query?: never
      header?: {
        xUserId?: string | null
        xUserEmail?: string | null
      }
      path: {
        roleId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': unknown
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HttpValidationError']
        }
      }
    }
  }
  get_users_list_api_v1_users__get: {
    parameters: {
      query?: {
        page?: number
        perPage?: number
      }
      header?: {
        xUserId?: string | null
        xUserEmail?: string | null
      }
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['UserListResponse']
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HttpValidationError']
        }
      }
    }
  }
  create_user_api_v1_users__post: {
    parameters: {
      query?: never
      header?: {
        xUserId?: string | null
        xUserEmail?: string | null
      }
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UserCreate']
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['UserResponse']
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HttpValidationError']
        }
      }
    }
  }
  get_me_api_v1_users_me_get: {
    parameters: {
      query?: never
      header?: {
        xUserId?: string | null
        xUserEmail?: string | null
      }
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['UserDetailResponse']
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HttpValidationError']
        }
      }
    }
  }
  get_user_api_v1_users__user_id__get: {
    parameters: {
      query?: never
      header?: {
        xUserId?: string | null
        xUserEmail?: string | null
      }
      path: {
        userId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['UserDetailResponse']
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HttpValidationError']
        }
      }
    }
  }
  update_user_api_v1_users__user_id__put: {
    parameters: {
      query?: never
      header?: {
        xUserId?: string | null
        xUserEmail?: string | null
      }
      path: {
        userId: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UserUpdate']
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['UserResponse']
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HttpValidationError']
        }
      }
    }
  }
  delete_user_api_v1_users__user_id__delete: {
    parameters: {
      query?: never
      header?: {
        xUserId?: string | null
        xUserEmail?: string | null
      }
      path: {
        userId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': unknown
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HttpValidationError']
        }
      }
    }
  }
}
