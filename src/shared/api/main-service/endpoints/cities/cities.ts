/**
 * Generated by orval v7.11.2 🍺
 * Do not edit manually.
 * Main Service
 * OpenAPI spec version: 0.1.0
 */
import {
  useMutation,
  useQuery,
  type DataTag,
  type DefinedInitialDataOptions,
  type DefinedUseQueryResult,
  type MutationFunction,
  type QueryClient,
  type QueryFunction,
  type QueryKey,
  type UndefinedInitialDataOptions,
  type UseMutationOptions,
  type UseMutationResult,
  type UseQueryOptions,
  type UseQueryResult,
} from '@tanstack/react-query'
import { customMutator } from '../../../mutator'
import type {
  CityCreate,
  CityDetailResponse,
  CityListResponse,
  CityResponse,
  CityUpdate,
  GetCitiesListApiV1CitiesGetParams,
  HttpValidationError,
} from '../../model'

/**
 * @summary Get Cities List
 */
export const getCitiesListApiV1CitiesGet = (
  params?: GetCitiesListApiV1CitiesGetParams,
  signal?: AbortSignal,
) => {
  return customMutator<CityListResponse>({ url: `/api/v1/cities/`, method: 'GET', params, signal })
}

export const getGetCitiesListApiV1CitiesGetQueryKey = (
  params?: GetCitiesListApiV1CitiesGetParams,
) => {
  return [`/api/v1/cities/`, ...(params ? [params] : [])] as const
}

export const getGetCitiesListApiV1CitiesGetQueryOptions = <
  TData = Awaited<ReturnType<typeof getCitiesListApiV1CitiesGet>>,
  TError = HttpValidationError,
>(
  params?: GetCitiesListApiV1CitiesGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getCitiesListApiV1CitiesGet>>, TError, TData>
    >
  },
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetCitiesListApiV1CitiesGetQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getCitiesListApiV1CitiesGet>>> = ({
    signal,
  }) => getCitiesListApiV1CitiesGet(params, signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getCitiesListApiV1CitiesGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetCitiesListApiV1CitiesGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCitiesListApiV1CitiesGet>>
>
export type GetCitiesListApiV1CitiesGetQueryError = HttpValidationError

export function useGetCitiesListApiV1CitiesGet<
  TData = Awaited<ReturnType<typeof getCitiesListApiV1CitiesGet>>,
  TError = HttpValidationError,
>(
  params: undefined | GetCitiesListApiV1CitiesGetParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getCitiesListApiV1CitiesGet>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCitiesListApiV1CitiesGet>>,
          TError,
          Awaited<ReturnType<typeof getCitiesListApiV1CitiesGet>>
        >,
        'initialData'
      >
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetCitiesListApiV1CitiesGet<
  TData = Awaited<ReturnType<typeof getCitiesListApiV1CitiesGet>>,
  TError = HttpValidationError,
>(
  params?: GetCitiesListApiV1CitiesGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getCitiesListApiV1CitiesGet>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCitiesListApiV1CitiesGet>>,
          TError,
          Awaited<ReturnType<typeof getCitiesListApiV1CitiesGet>>
        >,
        'initialData'
      >
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetCitiesListApiV1CitiesGet<
  TData = Awaited<ReturnType<typeof getCitiesListApiV1CitiesGet>>,
  TError = HttpValidationError,
>(
  params?: GetCitiesListApiV1CitiesGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getCitiesListApiV1CitiesGet>>, TError, TData>
    >
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Cities List
 */

export function useGetCitiesListApiV1CitiesGet<
  TData = Awaited<ReturnType<typeof getCitiesListApiV1CitiesGet>>,
  TError = HttpValidationError,
>(
  params?: GetCitiesListApiV1CitiesGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getCitiesListApiV1CitiesGet>>, TError, TData>
    >
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetCitiesListApiV1CitiesGetQueryOptions(params, options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Create City
 */
export const createCityApiV1CitiesPost = (cityCreate: CityCreate, signal?: AbortSignal) => {
  return customMutator<CityResponse>({
    url: `/api/v1/cities/`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: cityCreate,
    signal,
  })
}

export const getCreateCityApiV1CitiesPostMutationOptions = <
  TError = HttpValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createCityApiV1CitiesPost>>,
    TError,
    { data: CityCreate },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof createCityApiV1CitiesPost>>,
  TError,
  { data: CityCreate },
  TContext
> => {
  const mutationKey = ['createCityApiV1CitiesPost']
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createCityApiV1CitiesPost>>,
    { data: CityCreate }
  > = (props) => {
    const { data } = props ?? {}

    return createCityApiV1CitiesPost(data)
  }

  return { mutationFn, ...mutationOptions }
}

export type CreateCityApiV1CitiesPostMutationResult = NonNullable<
  Awaited<ReturnType<typeof createCityApiV1CitiesPost>>
>
export type CreateCityApiV1CitiesPostMutationBody = CityCreate
export type CreateCityApiV1CitiesPostMutationError = HttpValidationError

/**
 * @summary Create City
 */
export const useCreateCityApiV1CitiesPost = <TError = HttpValidationError, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof createCityApiV1CitiesPost>>,
      TError,
      { data: CityCreate },
      TContext
    >
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof createCityApiV1CitiesPost>>,
  TError,
  { data: CityCreate },
  TContext
> => {
  const mutationOptions = getCreateCityApiV1CitiesPostMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * @summary Get City
 */
export const getCityApiV1CitiesCityIdGet = (cityId: number, signal?: AbortSignal) => {
  return customMutator<CityDetailResponse>({
    url: `/api/v1/cities/${cityId}`,
    method: 'GET',
    signal,
  })
}

export const getGetCityApiV1CitiesCityIdGetQueryKey = (cityId?: number) => {
  return [`/api/v1/cities/${cityId}`] as const
}

export const getGetCityApiV1CitiesCityIdGetQueryOptions = <
  TData = Awaited<ReturnType<typeof getCityApiV1CitiesCityIdGet>>,
  TError = HttpValidationError,
>(
  cityId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getCityApiV1CitiesCityIdGet>>, TError, TData>
    >
  },
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetCityApiV1CitiesCityIdGetQueryKey(cityId)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getCityApiV1CitiesCityIdGet>>> = ({
    signal,
  }) => getCityApiV1CitiesCityIdGet(cityId, signal)

  return { queryKey, queryFn, enabled: !!cityId, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getCityApiV1CitiesCityIdGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetCityApiV1CitiesCityIdGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCityApiV1CitiesCityIdGet>>
>
export type GetCityApiV1CitiesCityIdGetQueryError = HttpValidationError

export function useGetCityApiV1CitiesCityIdGet<
  TData = Awaited<ReturnType<typeof getCityApiV1CitiesCityIdGet>>,
  TError = HttpValidationError,
>(
  cityId: number,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getCityApiV1CitiesCityIdGet>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCityApiV1CitiesCityIdGet>>,
          TError,
          Awaited<ReturnType<typeof getCityApiV1CitiesCityIdGet>>
        >,
        'initialData'
      >
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetCityApiV1CitiesCityIdGet<
  TData = Awaited<ReturnType<typeof getCityApiV1CitiesCityIdGet>>,
  TError = HttpValidationError,
>(
  cityId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getCityApiV1CitiesCityIdGet>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCityApiV1CitiesCityIdGet>>,
          TError,
          Awaited<ReturnType<typeof getCityApiV1CitiesCityIdGet>>
        >,
        'initialData'
      >
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetCityApiV1CitiesCityIdGet<
  TData = Awaited<ReturnType<typeof getCityApiV1CitiesCityIdGet>>,
  TError = HttpValidationError,
>(
  cityId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getCityApiV1CitiesCityIdGet>>, TError, TData>
    >
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get City
 */

export function useGetCityApiV1CitiesCityIdGet<
  TData = Awaited<ReturnType<typeof getCityApiV1CitiesCityIdGet>>,
  TError = HttpValidationError,
>(
  cityId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getCityApiV1CitiesCityIdGet>>, TError, TData>
    >
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetCityApiV1CitiesCityIdGetQueryOptions(cityId, options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Update City
 */
export const updateCityApiV1CitiesCityIdPut = (cityId: number, cityUpdate: CityUpdate) => {
  return customMutator<CityResponse>({
    url: `/api/v1/cities/${cityId}`,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json' },
    data: cityUpdate,
  })
}

export const getUpdateCityApiV1CitiesCityIdPutMutationOptions = <
  TError = HttpValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateCityApiV1CitiesCityIdPut>>,
    TError,
    { cityId: number; data: CityUpdate },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateCityApiV1CitiesCityIdPut>>,
  TError,
  { cityId: number; data: CityUpdate },
  TContext
> => {
  const mutationKey = ['updateCityApiV1CitiesCityIdPut']
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateCityApiV1CitiesCityIdPut>>,
    { cityId: number; data: CityUpdate }
  > = (props) => {
    const { cityId, data } = props ?? {}

    return updateCityApiV1CitiesCityIdPut(cityId, data)
  }

  return { mutationFn, ...mutationOptions }
}

export type UpdateCityApiV1CitiesCityIdPutMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateCityApiV1CitiesCityIdPut>>
>
export type UpdateCityApiV1CitiesCityIdPutMutationBody = CityUpdate
export type UpdateCityApiV1CitiesCityIdPutMutationError = HttpValidationError

/**
 * @summary Update City
 */
export const useUpdateCityApiV1CitiesCityIdPut = <TError = HttpValidationError, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof updateCityApiV1CitiesCityIdPut>>,
      TError,
      { cityId: number; data: CityUpdate },
      TContext
    >
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof updateCityApiV1CitiesCityIdPut>>,
  TError,
  { cityId: number; data: CityUpdate },
  TContext
> => {
  const mutationOptions = getUpdateCityApiV1CitiesCityIdPutMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * @summary Delete City
 */
export const deleteCityApiV1CitiesCityIdDelete = (cityId: number) => {
  return customMutator<unknown>({ url: `/api/v1/cities/${cityId}`, method: 'DELETE' })
}

export const getDeleteCityApiV1CitiesCityIdDeleteMutationOptions = <
  TError = HttpValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteCityApiV1CitiesCityIdDelete>>,
    TError,
    { cityId: number },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteCityApiV1CitiesCityIdDelete>>,
  TError,
  { cityId: number },
  TContext
> => {
  const mutationKey = ['deleteCityApiV1CitiesCityIdDelete']
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteCityApiV1CitiesCityIdDelete>>,
    { cityId: number }
  > = (props) => {
    const { cityId } = props ?? {}

    return deleteCityApiV1CitiesCityIdDelete(cityId)
  }

  return { mutationFn, ...mutationOptions }
}

export type DeleteCityApiV1CitiesCityIdDeleteMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteCityApiV1CitiesCityIdDelete>>
>

export type DeleteCityApiV1CitiesCityIdDeleteMutationError = HttpValidationError

/**
 * @summary Delete City
 */
export const useDeleteCityApiV1CitiesCityIdDelete = <
  TError = HttpValidationError,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deleteCityApiV1CitiesCityIdDelete>>,
      TError,
      { cityId: number },
      TContext
    >
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof deleteCityApiV1CitiesCityIdDelete>>,
  TError,
  { cityId: number },
  TContext
> => {
  const mutationOptions = getDeleteCityApiV1CitiesCityIdDeleteMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
