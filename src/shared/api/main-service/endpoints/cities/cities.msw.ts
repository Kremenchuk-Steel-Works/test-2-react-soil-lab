/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * Main Service
 * OpenAPI spec version: 0.1.0
 */
import { faker } from '@faker-js/faker'
import { delay, http, HttpResponse } from 'msw'
import type { CityDetailResponse, CityListResponse, CityResponse } from '../../model'

export const getGetCitiesListApiV1CitiesGetResponseMock = (
  overrideResponse: Partial<CityListResponse> = {},
): CityListResponse => ({
  page: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
  totalPages: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
  totalItems: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
  data: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
    name: faker.string.alpha({ length: { min: 10, max: 20 } }),
    nameLocal: faker.string.alpha({ length: { min: 10, max: 20 } }),
    id: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
  })),
  ...overrideResponse,
})

export const getCreateCityApiV1CitiesPostResponseMock = (
  overrideResponse: Partial<CityResponse> = {},
): CityResponse => ({
  name: faker.string.alpha({ length: { min: 10, max: 20 } }),
  nameLocal: faker.string.alpha({ length: { min: 10, max: 20 } }),
  id: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
  countryId: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
  ...overrideResponse,
})

export const getGetCityApiV1CitiesCityIdGetResponseMock = (
  overrideResponse: Partial<CityDetailResponse> = {},
): CityDetailResponse => ({
  name: faker.string.alpha({ length: { min: 10, max: 20 } }),
  nameLocal: faker.string.alpha({ length: { min: 10, max: 20 } }),
  id: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
  country: {
    id: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
    code: faker.string.alpha({ length: { min: 10, max: 20 } }),
    name: faker.string.alpha({ length: { min: 10, max: 20 } }),
    nameLocal: faker.string.alpha({ length: { min: 10, max: 20 } }),
  },
  createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  ...overrideResponse,
})

export const getUpdateCityApiV1CitiesCityIdPutResponseMock = (
  overrideResponse: Partial<CityResponse> = {},
): CityResponse => ({
  name: faker.string.alpha({ length: { min: 10, max: 20 } }),
  nameLocal: faker.string.alpha({ length: { min: 10, max: 20 } }),
  id: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
  countryId: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
  ...overrideResponse,
})

export const getGetCitiesListApiV1CitiesGetMockHandler = (
  overrideResponse?:
    | CityListResponse
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<CityListResponse> | CityListResponse),
) => {
  return http.get('*/api/v1/cities/', async (info) => {
    await delay(1000)

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getGetCitiesListApiV1CitiesGetResponseMock(),
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } },
    )
  })
}

export const getCreateCityApiV1CitiesPostMockHandler = (
  overrideResponse?:
    | CityResponse
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<CityResponse> | CityResponse),
) => {
  return http.post('*/api/v1/cities/', async (info) => {
    await delay(1000)

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getCreateCityApiV1CitiesPostResponseMock(),
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } },
    )
  })
}

export const getGetCityApiV1CitiesCityIdGetMockHandler = (
  overrideResponse?:
    | CityDetailResponse
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<CityDetailResponse> | CityDetailResponse),
) => {
  return http.get('*/api/v1/cities/:cityId', async (info) => {
    await delay(1000)

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getGetCityApiV1CitiesCityIdGetResponseMock(),
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } },
    )
  })
}

export const getUpdateCityApiV1CitiesCityIdPutMockHandler = (
  overrideResponse?:
    | CityResponse
    | ((
        info: Parameters<Parameters<typeof http.put>[1]>[0],
      ) => Promise<CityResponse> | CityResponse),
) => {
  return http.put('*/api/v1/cities/:cityId', async (info) => {
    await delay(1000)

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getUpdateCityApiV1CitiesCityIdPutResponseMock(),
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } },
    )
  })
}

export const getDeleteCityApiV1CitiesCityIdDeleteMockHandler = (
  overrideResponse?:
    | unknown
    | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<unknown> | unknown),
) => {
  return http.delete('*/api/v1/cities/:cityId', async (info) => {
    await delay(1000)
    if (typeof overrideResponse === 'function') {
      await overrideResponse(info)
    }
    return new HttpResponse(null, { status: 200 })
  })
}
export const getCitiesMock = () => [
  getGetCitiesListApiV1CitiesGetMockHandler(),
  getCreateCityApiV1CitiesPostMockHandler(),
  getGetCityApiV1CitiesCityIdGetMockHandler(),
  getUpdateCityApiV1CitiesCityIdPutMockHandler(),
  getDeleteCityApiV1CitiesCityIdDeleteMockHandler(),
]
