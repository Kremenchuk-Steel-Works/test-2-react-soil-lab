/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * Main Service
 * OpenAPI spec version: 0.1.0
 */
import { faker } from '@faker-js/faker'
import { delay, http, HttpResponse } from 'msw'
import {
  AddressType,
  ContactType,
  EmploymentStatus,
  Gender,
  type PersonDetailResponse,
  type PersonListResponse,
  type PersonResponse,
} from '../../model'

export const getGetPeopleListApiV1PeopleGetResponseMock = (
  overrideResponse: Partial<PersonListResponse> = {},
): PersonListResponse => ({
  page: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
  totalPages: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
  totalItems: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
  data: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
    id: faker.string.uuid(),
    fullName: faker.string.alpha({ length: { min: 10, max: 20 } }),
    gender: faker.helpers.arrayElement(Object.values(Gender)),
    photoUrl: faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      null,
    ]),
    isUser: faker.datatype.boolean(),
    isEmployee: faker.datatype.boolean(),
    contactsCount: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
    addressesCount: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
    organizationNames: Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => faker.string.alpha({ length: { min: 10, max: 20 } })),
    positionNames: Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => faker.string.alpha({ length: { min: 10, max: 20 } })),
  })),
  ...overrideResponse,
})

export const getCreatePersonApiV1PeoplePostResponseMock = (
  overrideResponse: Partial<PersonResponse> = {},
): PersonResponse => ({
  id: faker.string.uuid(),
  fullName: faker.string.alpha({ length: { min: 10, max: 20 } }),
  gender: faker.helpers.arrayElement(Object.values(Gender)),
  photoUrl: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    null,
  ]),
  employeeProfile: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      {
        employeeNumber: faker.helpers.arrayElement([
          faker.helpers.arrayElement([faker.string.alpha({ length: { min: 10, max: 20 } }), null]),
          undefined,
        ]),
        hiredAt: faker.date.past().toISOString().split('T')[0],
        employmentStatus: faker.helpers.arrayElement(Object.values(EmploymentStatus)),
      },
      null,
    ]),
    undefined,
  ]),
  contacts: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
    () => ({
      type: faker.helpers.arrayElement(Object.values(ContactType)),
      value: faker.string.alpha({ length: { min: 10, max: 20 } }),
      isPrimary: faker.datatype.boolean(),
      note: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.string.alpha({ length: { min: 10, max: 20 } }), null]),
        undefined,
      ]),
      id: faker.string.uuid(),
    }),
  ),
  addresses: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
    () => ({
      id: faker.string.uuid(),
      cityId: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
      type: faker.helpers.arrayElement(Object.values(AddressType)),
      isPrimary: faker.datatype.boolean(),
    }),
  ),
  organizationNames: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => faker.string.alpha({ length: { min: 10, max: 20 } })),
  positionNames: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
    () => faker.string.alpha({ length: { min: 10, max: 20 } }),
  ),
  ...overrideResponse,
})

export const getGetPersonApiV1PeoplePersonIdGetResponseMock = (
  overrideResponse: Partial<PersonDetailResponse> = {},
): PersonDetailResponse => ({
  firstName: faker.string.alpha({ length: { min: 10, max: 20 } }),
  middleName: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.string.alpha({ length: { min: 10, max: 20 } }), null]),
    undefined,
  ]),
  lastName: faker.string.alpha({ length: { min: 10, max: 20 } }),
  gender: faker.helpers.arrayElement(Object.values(Gender)),
  birthDate: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.date.past().toISOString().split('T')[0], null]),
    undefined,
  ]),
  photoUrl: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.string.alpha({ length: { min: 10, max: 20 } }), null]),
    undefined,
  ]),
  id: faker.string.uuid(),
  isUser: faker.datatype.boolean(),
  employeeProfile: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      {
        employeeNumber: faker.helpers.arrayElement([
          faker.helpers.arrayElement([faker.string.alpha({ length: { min: 10, max: 20 } }), null]),
          undefined,
        ]),
        hiredAt: faker.date.past().toISOString().split('T')[0],
        employmentStatus: faker.helpers.arrayElement(Object.values(EmploymentStatus)),
        createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
        updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
      },
      null,
    ]),
    undefined,
  ]),
  contacts: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
    () => ({
      type: faker.helpers.arrayElement(Object.values(ContactType)),
      value: faker.string.alpha({ length: { min: 10, max: 20 } }),
      isPrimary: faker.datatype.boolean(),
      note: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.string.alpha({ length: { min: 10, max: 20 } }), null]),
        undefined,
      ]),
      id: faker.string.uuid(),
      createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
      updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
    }),
  ),
  addresses: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
    () => ({
      street: faker.string.alpha({ length: { min: 10, max: 20 } }),
      postalCode: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.string.alpha({ length: { min: 10, max: 20 } }), null]),
        undefined,
      ]),
      type: faker.helpers.arrayElement(Object.values(AddressType)),
      isPrimary: faker.datatype.boolean(),
      note: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.string.alpha({ length: { min: 10, max: 20 } }), null]),
        undefined,
      ]),
      id: faker.string.uuid(),
      cityId: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
      createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
      updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
    }),
  ),
  organizations: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
    () => ({
      legalName: faker.string.alpha({ length: { min: 10, max: 20 } }),
      registrationNumber: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.string.alpha({ length: { min: 10, max: 20 } }), null]),
        undefined,
      ]),
      taxId: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.string.alpha({ length: { min: 10, max: 20 } }), null]),
        undefined,
      ]),
      id: faker.string.uuid(),
      countryName: faker.string.alpha({ length: { min: 10, max: 20 } }),
    }),
  ),
  positions: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
    () => ({
      name: faker.string.alpha({ length: { min: 10, max: 20 } }),
      description: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.string.alpha({ length: { min: 10, max: 20 } }), null]),
        undefined,
      ]),
      id: faker.string.uuid(),
    }),
  ),
  createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  ...overrideResponse,
})

export const getUpdatePersonApiV1PeoplePersonIdPutResponseMock = (
  overrideResponse: Partial<PersonResponse> = {},
): PersonResponse => ({
  id: faker.string.uuid(),
  fullName: faker.string.alpha({ length: { min: 10, max: 20 } }),
  gender: faker.helpers.arrayElement(Object.values(Gender)),
  photoUrl: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    null,
  ]),
  employeeProfile: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      {
        employeeNumber: faker.helpers.arrayElement([
          faker.helpers.arrayElement([faker.string.alpha({ length: { min: 10, max: 20 } }), null]),
          undefined,
        ]),
        hiredAt: faker.date.past().toISOString().split('T')[0],
        employmentStatus: faker.helpers.arrayElement(Object.values(EmploymentStatus)),
      },
      null,
    ]),
    undefined,
  ]),
  contacts: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
    () => ({
      type: faker.helpers.arrayElement(Object.values(ContactType)),
      value: faker.string.alpha({ length: { min: 10, max: 20 } }),
      isPrimary: faker.datatype.boolean(),
      note: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.string.alpha({ length: { min: 10, max: 20 } }), null]),
        undefined,
      ]),
      id: faker.string.uuid(),
    }),
  ),
  addresses: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
    () => ({
      id: faker.string.uuid(),
      cityId: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
      type: faker.helpers.arrayElement(Object.values(AddressType)),
      isPrimary: faker.datatype.boolean(),
    }),
  ),
  organizationNames: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => faker.string.alpha({ length: { min: 10, max: 20 } })),
  positionNames: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
    () => faker.string.alpha({ length: { min: 10, max: 20 } }),
  ),
  ...overrideResponse,
})

export const getGetPeopleListApiV1PeopleGetMockHandler = (
  overrideResponse?:
    | PersonListResponse
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<PersonListResponse> | PersonListResponse),
) => {
  return http.get('*/api/v1/people/', async (info) => {
    await delay(1000)

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getGetPeopleListApiV1PeopleGetResponseMock(),
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } },
    )
  })
}

export const getCreatePersonApiV1PeoplePostMockHandler = (
  overrideResponse?:
    | PersonResponse
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<PersonResponse> | PersonResponse),
) => {
  return http.post('*/api/v1/people/', async (info) => {
    await delay(1000)

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getCreatePersonApiV1PeoplePostResponseMock(),
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } },
    )
  })
}

export const getGetPersonApiV1PeoplePersonIdGetMockHandler = (
  overrideResponse?:
    | PersonDetailResponse
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<PersonDetailResponse> | PersonDetailResponse),
) => {
  return http.get('*/api/v1/people/:personId', async (info) => {
    await delay(1000)

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getGetPersonApiV1PeoplePersonIdGetResponseMock(),
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } },
    )
  })
}

export const getUpdatePersonApiV1PeoplePersonIdPutMockHandler = (
  overrideResponse?:
    | PersonResponse
    | ((
        info: Parameters<Parameters<typeof http.put>[1]>[0],
      ) => Promise<PersonResponse> | PersonResponse),
) => {
  return http.put('*/api/v1/people/:personId', async (info) => {
    await delay(1000)

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getUpdatePersonApiV1PeoplePersonIdPutResponseMock(),
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } },
    )
  })
}

export const getDeletePersonApiV1PeoplePersonIdDeleteMockHandler = (
  overrideResponse?:
    | unknown
    | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<unknown> | unknown),
) => {
  return http.delete('*/api/v1/people/:personId', async (info) => {
    await delay(1000)
    if (typeof overrideResponse === 'function') {
      await overrideResponse(info)
    }
    return new HttpResponse(null, { status: 200 })
  })
}
export const getPeopleMock = () => [
  getGetPeopleListApiV1PeopleGetMockHandler(),
  getCreatePersonApiV1PeoplePostMockHandler(),
  getGetPersonApiV1PeoplePersonIdGetMockHandler(),
  getUpdatePersonApiV1PeoplePersonIdPutMockHandler(),
  getDeletePersonApiV1PeoplePersonIdDeleteMockHandler(),
]
