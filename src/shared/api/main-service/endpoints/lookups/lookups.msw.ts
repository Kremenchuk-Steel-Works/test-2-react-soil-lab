/**
 * Generated by orval v7.11.2 🍺
 * Do not edit manually.
 * Main Service
 * OpenAPI spec version: 0.1.0
 */
import { faker } from '@faker-js/faker'
import { delay, http, HttpResponse } from 'msw'
import type {
  CityLookupResponse,
  CountryLookupResponse,
  DepartmentLookupResponse,
  OrganizationLookupResponse,
  PermissionLookupResponse,
  PersonLookupResponse,
  PositionLookupResponse,
  RoleLookupResponse,
} from '../../model'

export const getGetCitiesListApiV1LookupsCitiesGetResponseMock = (): CityLookupResponse[] =>
  Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
    name: faker.string.alpha({ length: { min: 10, max: 20 } }),
    nameLocal: faker.string.alpha({ length: { min: 10, max: 20 } }),
    id: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
    countryId: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
  }))

export const getGetCountriesListApiV1LookupsCountriesGetResponseMock =
  (): CountryLookupResponse[] =>
    Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
      id: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
      code: faker.string.alpha({ length: { min: 10, max: 20 } }),
      name: faker.string.alpha({ length: { min: 10, max: 20 } }),
      nameLocal: faker.string.alpha({ length: { min: 10, max: 20 } }),
    }))

export const getGetDepartmentsListApiV1LookupsDepartmentsGetResponseMock =
  (): DepartmentLookupResponse[] =>
    Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
      id: faker.string.uuid(),
      name: faker.string.alpha({ length: { min: 10, max: 20 } }),
    }))

export const getGetOrganizationsListApiV1LookupsOrganizationsGetResponseMock =
  (): OrganizationLookupResponse[] =>
    Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
      id: faker.string.uuid(),
      legalName: faker.string.alpha({ length: { min: 10, max: 20 } }),
      registrationNumber: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        null,
      ]),
    }))

export const getGetPeopleListApiV1LookupsPeopleGetResponseMock = (): PersonLookupResponse[] =>
  Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
    id: faker.string.uuid(),
    fullName: faker.string.alpha({ length: { min: 10, max: 20 } }),
  }))

export const getGetPositionsListApiV1LookupsPositionsGetResponseMock =
  (): PositionLookupResponse[] =>
    Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
      id: faker.string.uuid(),
      name: faker.string.alpha({ length: { min: 10, max: 20 } }),
    }))

export const getGetPermissionsListApiV1LookupsPermissionsGetResponseMock =
  (): PermissionLookupResponse[] =>
    Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
      id: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
      name: faker.string.alpha({ length: { min: 10, max: 20 } }),
      departmentName: faker.string.alpha({ length: { min: 10, max: 20 } }),
    }))

export const getGetRolesListApiV1LookupsRolesGetResponseMock = (): RoleLookupResponse[] =>
  Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
    id: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
    name: faker.string.alpha({ length: { min: 10, max: 20 } }),
  }))

export const getGetCitiesListApiV1LookupsCitiesGetMockHandler = (
  overrideResponse?:
    | CityLookupResponse[]
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<CityLookupResponse[]> | CityLookupResponse[]),
) => {
  return http.get('*/api/v1/lookups/cities', async (info) => {
    await delay(1000)

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getGetCitiesListApiV1LookupsCitiesGetResponseMock(),
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } },
    )
  })
}

export const getGetCountriesListApiV1LookupsCountriesGetMockHandler = (
  overrideResponse?:
    | CountryLookupResponse[]
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<CountryLookupResponse[]> | CountryLookupResponse[]),
) => {
  return http.get('*/api/v1/lookups/countries', async (info) => {
    await delay(1000)

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getGetCountriesListApiV1LookupsCountriesGetResponseMock(),
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } },
    )
  })
}

export const getGetDepartmentsListApiV1LookupsDepartmentsGetMockHandler = (
  overrideResponse?:
    | DepartmentLookupResponse[]
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<DepartmentLookupResponse[]> | DepartmentLookupResponse[]),
) => {
  return http.get('*/api/v1/lookups/departments', async (info) => {
    await delay(1000)

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getGetDepartmentsListApiV1LookupsDepartmentsGetResponseMock(),
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } },
    )
  })
}

export const getGetOrganizationsListApiV1LookupsOrganizationsGetMockHandler = (
  overrideResponse?:
    | OrganizationLookupResponse[]
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<OrganizationLookupResponse[]> | OrganizationLookupResponse[]),
) => {
  return http.get('*/api/v1/lookups/organizations', async (info) => {
    await delay(1000)

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getGetOrganizationsListApiV1LookupsOrganizationsGetResponseMock(),
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } },
    )
  })
}

export const getGetPeopleListApiV1LookupsPeopleGetMockHandler = (
  overrideResponse?:
    | PersonLookupResponse[]
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<PersonLookupResponse[]> | PersonLookupResponse[]),
) => {
  return http.get('*/api/v1/lookups/people', async (info) => {
    await delay(1000)

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getGetPeopleListApiV1LookupsPeopleGetResponseMock(),
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } },
    )
  })
}

export const getGetPositionsListApiV1LookupsPositionsGetMockHandler = (
  overrideResponse?:
    | PositionLookupResponse[]
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<PositionLookupResponse[]> | PositionLookupResponse[]),
) => {
  return http.get('*/api/v1/lookups/positions', async (info) => {
    await delay(1000)

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getGetPositionsListApiV1LookupsPositionsGetResponseMock(),
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } },
    )
  })
}

export const getGetPermissionsListApiV1LookupsPermissionsGetMockHandler = (
  overrideResponse?:
    | PermissionLookupResponse[]
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<PermissionLookupResponse[]> | PermissionLookupResponse[]),
) => {
  return http.get('*/api/v1/lookups/permissions', async (info) => {
    await delay(1000)

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getGetPermissionsListApiV1LookupsPermissionsGetResponseMock(),
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } },
    )
  })
}

export const getGetRolesListApiV1LookupsRolesGetMockHandler = (
  overrideResponse?:
    | RoleLookupResponse[]
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<RoleLookupResponse[]> | RoleLookupResponse[]),
) => {
  return http.get('*/api/v1/lookups/roles', async (info) => {
    await delay(1000)

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getGetRolesListApiV1LookupsRolesGetResponseMock(),
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } },
    )
  })
}
export const getLookupsMock = () => [
  getGetCitiesListApiV1LookupsCitiesGetMockHandler(),
  getGetCountriesListApiV1LookupsCountriesGetMockHandler(),
  getGetDepartmentsListApiV1LookupsDepartmentsGetMockHandler(),
  getGetOrganizationsListApiV1LookupsOrganizationsGetMockHandler(),
  getGetPeopleListApiV1LookupsPeopleGetMockHandler(),
  getGetPositionsListApiV1LookupsPositionsGetMockHandler(),
  getGetPermissionsListApiV1LookupsPermissionsGetMockHandler(),
  getGetRolesListApiV1LookupsRolesGetMockHandler(),
]
