/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * Main Service
 * OpenAPI spec version: 0.1.0
 */
import { faker } from '@faker-js/faker'
import { delay, http, HttpResponse } from 'msw'
import type { CountryDetailResponse, CountryListResponse, CountryResponse } from '../../model'

export const getGetCountiesListApiV1CountiesGetResponseMock = (
  overrideResponse: Partial<CountryListResponse> = {},
): CountryListResponse => ({
  page: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
  totalPages: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
  totalItems: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
  data: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
    id: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
    code: faker.string.alpha({ length: { min: 10, max: 20 } }),
    name: faker.string.alpha({ length: { min: 10, max: 20 } }),
    nameLocal: faker.string.alpha({ length: { min: 10, max: 20 } }),
  })),
  ...overrideResponse,
})

export const getCreateCountryApiV1CountiesPostResponseMock = (
  overrideResponse: Partial<CountryResponse> = {},
): CountryResponse => ({
  code: faker.string.alpha({ length: { min: 10, max: 20 } }),
  code3: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.string.alpha({ length: { min: 10, max: 20 } }), null]),
    undefined,
  ]),
  numericCode: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.string.alpha({ length: { min: 10, max: 20 } }), null]),
    undefined,
  ]),
  name: faker.string.alpha({ length: { min: 10, max: 20 } }),
  nameLocal: faker.string.alpha({ length: { min: 10, max: 20 } }),
  id: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
  ...overrideResponse,
})

export const getGetCountryApiV1CountiesCountryIdGetResponseMock = (
  overrideResponse: Partial<CountryDetailResponse> = {},
): CountryDetailResponse => ({
  code: faker.string.alpha({ length: { min: 10, max: 20 } }),
  code3: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.string.alpha({ length: { min: 10, max: 20 } }), null]),
    undefined,
  ]),
  numericCode: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.string.alpha({ length: { min: 10, max: 20 } }), null]),
    undefined,
  ]),
  name: faker.string.alpha({ length: { min: 10, max: 20 } }),
  nameLocal: faker.string.alpha({ length: { min: 10, max: 20 } }),
  id: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
  cities: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
    () => ({
      name: faker.string.alpha({ length: { min: 10, max: 20 } }),
      nameLocal: faker.string.alpha({ length: { min: 10, max: 20 } }),
      id: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
    }),
  ),
  createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  ...overrideResponse,
})

export const getUpdateCountryApiV1CountiesCountryIdPutResponseMock = (
  overrideResponse: Partial<CountryResponse> = {},
): CountryResponse => ({
  code: faker.string.alpha({ length: { min: 10, max: 20 } }),
  code3: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.string.alpha({ length: { min: 10, max: 20 } }), null]),
    undefined,
  ]),
  numericCode: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.string.alpha({ length: { min: 10, max: 20 } }), null]),
    undefined,
  ]),
  name: faker.string.alpha({ length: { min: 10, max: 20 } }),
  nameLocal: faker.string.alpha({ length: { min: 10, max: 20 } }),
  id: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
  ...overrideResponse,
})

export const getGetCountiesListApiV1CountiesGetMockHandler = (
  overrideResponse?:
    | CountryListResponse
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<CountryListResponse> | CountryListResponse),
) => {
  return http.get('*/api/v1/counties/', async (info) => {
    await delay(1000)

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getGetCountiesListApiV1CountiesGetResponseMock(),
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } },
    )
  })
}

export const getCreateCountryApiV1CountiesPostMockHandler = (
  overrideResponse?:
    | CountryResponse
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<CountryResponse> | CountryResponse),
) => {
  return http.post('*/api/v1/counties/', async (info) => {
    await delay(1000)

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getCreateCountryApiV1CountiesPostResponseMock(),
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } },
    )
  })
}

export const getGetCountryApiV1CountiesCountryIdGetMockHandler = (
  overrideResponse?:
    | CountryDetailResponse
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<CountryDetailResponse> | CountryDetailResponse),
) => {
  return http.get('*/api/v1/counties/:countryId', async (info) => {
    await delay(1000)

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getGetCountryApiV1CountiesCountryIdGetResponseMock(),
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } },
    )
  })
}

export const getUpdateCountryApiV1CountiesCountryIdPutMockHandler = (
  overrideResponse?:
    | CountryResponse
    | ((
        info: Parameters<Parameters<typeof http.put>[1]>[0],
      ) => Promise<CountryResponse> | CountryResponse),
) => {
  return http.put('*/api/v1/counties/:countryId', async (info) => {
    await delay(1000)

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getUpdateCountryApiV1CountiesCountryIdPutResponseMock(),
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } },
    )
  })
}

export const getDeleteCountryApiV1CountiesCountryIdDeleteMockHandler = (
  overrideResponse?:
    | unknown
    | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<unknown> | unknown),
) => {
  return http.delete('*/api/v1/counties/:countryId', async (info) => {
    await delay(1000)
    if (typeof overrideResponse === 'function') {
      await overrideResponse(info)
    }
    return new HttpResponse(null, { status: 200 })
  })
}
export const getCountiesMock = () => [
  getGetCountiesListApiV1CountiesGetMockHandler(),
  getCreateCountryApiV1CountiesPostMockHandler(),
  getGetCountryApiV1CountiesCountryIdGetMockHandler(),
  getUpdateCountryApiV1CountiesCountryIdPutMockHandler(),
  getDeleteCountryApiV1CountiesCountryIdDeleteMockHandler(),
]
