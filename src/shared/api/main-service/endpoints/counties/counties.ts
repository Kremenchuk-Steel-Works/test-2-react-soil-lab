/**
 * Generated by orval v7.11.2 🍺
 * Do not edit manually.
 * Main Service
 * OpenAPI spec version: 0.1.0
 */
import {
  useMutation,
  useQuery,
  type DataTag,
  type DefinedInitialDataOptions,
  type DefinedUseQueryResult,
  type MutationFunction,
  type QueryClient,
  type QueryFunction,
  type QueryKey,
  type UndefinedInitialDataOptions,
  type UseMutationOptions,
  type UseMutationResult,
  type UseQueryOptions,
  type UseQueryResult,
} from '@tanstack/react-query'
import { customMutator } from '../../../mutator'
import type {
  CountryCreate,
  CountryDetailResponse,
  CountryListResponse,
  CountryResponse,
  CountryUpdate,
  GetCountiesListApiV1CountiesGetParams,
  HttpValidationError,
} from '../../model'

/**
 * @summary Get Counties List
 */
export const getCountiesListApiV1CountiesGet = (
  params?: GetCountiesListApiV1CountiesGetParams,
  signal?: AbortSignal,
) => {
  return customMutator<CountryListResponse>({
    url: `/api/v1/counties/`,
    method: 'GET',
    params,
    signal,
  })
}

export const getGetCountiesListApiV1CountiesGetQueryKey = (
  params?: GetCountiesListApiV1CountiesGetParams,
) => {
  return [`/api/v1/counties/`, ...(params ? [params] : [])] as const
}

export const getGetCountiesListApiV1CountiesGetQueryOptions = <
  TData = Awaited<ReturnType<typeof getCountiesListApiV1CountiesGet>>,
  TError = HttpValidationError,
>(
  params?: GetCountiesListApiV1CountiesGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getCountiesListApiV1CountiesGet>>, TError, TData>
    >
  },
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetCountiesListApiV1CountiesGetQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getCountiesListApiV1CountiesGet>>> = ({
    signal,
  }) => getCountiesListApiV1CountiesGet(params, signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getCountiesListApiV1CountiesGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetCountiesListApiV1CountiesGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCountiesListApiV1CountiesGet>>
>
export type GetCountiesListApiV1CountiesGetQueryError = HttpValidationError

export function useGetCountiesListApiV1CountiesGet<
  TData = Awaited<ReturnType<typeof getCountiesListApiV1CountiesGet>>,
  TError = HttpValidationError,
>(
  params: undefined | GetCountiesListApiV1CountiesGetParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getCountiesListApiV1CountiesGet>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCountiesListApiV1CountiesGet>>,
          TError,
          Awaited<ReturnType<typeof getCountiesListApiV1CountiesGet>>
        >,
        'initialData'
      >
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetCountiesListApiV1CountiesGet<
  TData = Awaited<ReturnType<typeof getCountiesListApiV1CountiesGet>>,
  TError = HttpValidationError,
>(
  params?: GetCountiesListApiV1CountiesGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getCountiesListApiV1CountiesGet>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCountiesListApiV1CountiesGet>>,
          TError,
          Awaited<ReturnType<typeof getCountiesListApiV1CountiesGet>>
        >,
        'initialData'
      >
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetCountiesListApiV1CountiesGet<
  TData = Awaited<ReturnType<typeof getCountiesListApiV1CountiesGet>>,
  TError = HttpValidationError,
>(
  params?: GetCountiesListApiV1CountiesGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getCountiesListApiV1CountiesGet>>, TError, TData>
    >
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Counties List
 */

export function useGetCountiesListApiV1CountiesGet<
  TData = Awaited<ReturnType<typeof getCountiesListApiV1CountiesGet>>,
  TError = HttpValidationError,
>(
  params?: GetCountiesListApiV1CountiesGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getCountiesListApiV1CountiesGet>>, TError, TData>
    >
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetCountiesListApiV1CountiesGetQueryOptions(params, options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Create Country
 */
export const createCountryApiV1CountiesPost = (
  countryCreate: CountryCreate,
  signal?: AbortSignal,
) => {
  return customMutator<CountryResponse>({
    url: `/api/v1/counties/`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: countryCreate,
    signal,
  })
}

export const getCreateCountryApiV1CountiesPostMutationOptions = <
  TError = HttpValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createCountryApiV1CountiesPost>>,
    TError,
    { data: CountryCreate },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof createCountryApiV1CountiesPost>>,
  TError,
  { data: CountryCreate },
  TContext
> => {
  const mutationKey = ['createCountryApiV1CountiesPost']
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createCountryApiV1CountiesPost>>,
    { data: CountryCreate }
  > = (props) => {
    const { data } = props ?? {}

    return createCountryApiV1CountiesPost(data)
  }

  return { mutationFn, ...mutationOptions }
}

export type CreateCountryApiV1CountiesPostMutationResult = NonNullable<
  Awaited<ReturnType<typeof createCountryApiV1CountiesPost>>
>
export type CreateCountryApiV1CountiesPostMutationBody = CountryCreate
export type CreateCountryApiV1CountiesPostMutationError = HttpValidationError

/**
 * @summary Create Country
 */
export const useCreateCountryApiV1CountiesPost = <TError = HttpValidationError, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof createCountryApiV1CountiesPost>>,
      TError,
      { data: CountryCreate },
      TContext
    >
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof createCountryApiV1CountiesPost>>,
  TError,
  { data: CountryCreate },
  TContext
> => {
  const mutationOptions = getCreateCountryApiV1CountiesPostMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * @summary Get Country
 */
export const getCountryApiV1CountiesCountryIdGet = (countryId: number, signal?: AbortSignal) => {
  return customMutator<CountryDetailResponse>({
    url: `/api/v1/counties/${countryId}`,
    method: 'GET',
    signal,
  })
}

export const getGetCountryApiV1CountiesCountryIdGetQueryKey = (countryId?: number) => {
  return [`/api/v1/counties/${countryId}`] as const
}

export const getGetCountryApiV1CountiesCountryIdGetQueryOptions = <
  TData = Awaited<ReturnType<typeof getCountryApiV1CountiesCountryIdGet>>,
  TError = HttpValidationError,
>(
  countryId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCountryApiV1CountiesCountryIdGet>>,
        TError,
        TData
      >
    >
  },
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getGetCountryApiV1CountiesCountryIdGetQueryKey(countryId)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getCountryApiV1CountiesCountryIdGet>>> = ({
    signal,
  }) => getCountryApiV1CountiesCountryIdGet(countryId, signal)

  return { queryKey, queryFn, enabled: !!countryId, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getCountryApiV1CountiesCountryIdGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetCountryApiV1CountiesCountryIdGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCountryApiV1CountiesCountryIdGet>>
>
export type GetCountryApiV1CountiesCountryIdGetQueryError = HttpValidationError

export function useGetCountryApiV1CountiesCountryIdGet<
  TData = Awaited<ReturnType<typeof getCountryApiV1CountiesCountryIdGet>>,
  TError = HttpValidationError,
>(
  countryId: number,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCountryApiV1CountiesCountryIdGet>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCountryApiV1CountiesCountryIdGet>>,
          TError,
          Awaited<ReturnType<typeof getCountryApiV1CountiesCountryIdGet>>
        >,
        'initialData'
      >
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetCountryApiV1CountiesCountryIdGet<
  TData = Awaited<ReturnType<typeof getCountryApiV1CountiesCountryIdGet>>,
  TError = HttpValidationError,
>(
  countryId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCountryApiV1CountiesCountryIdGet>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCountryApiV1CountiesCountryIdGet>>,
          TError,
          Awaited<ReturnType<typeof getCountryApiV1CountiesCountryIdGet>>
        >,
        'initialData'
      >
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetCountryApiV1CountiesCountryIdGet<
  TData = Awaited<ReturnType<typeof getCountryApiV1CountiesCountryIdGet>>,
  TError = HttpValidationError,
>(
  countryId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCountryApiV1CountiesCountryIdGet>>,
        TError,
        TData
      >
    >
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Country
 */

export function useGetCountryApiV1CountiesCountryIdGet<
  TData = Awaited<ReturnType<typeof getCountryApiV1CountiesCountryIdGet>>,
  TError = HttpValidationError,
>(
  countryId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCountryApiV1CountiesCountryIdGet>>,
        TError,
        TData
      >
    >
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetCountryApiV1CountiesCountryIdGetQueryOptions(countryId, options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Update Country
 */
export const updateCountryApiV1CountiesCountryIdPut = (
  countryId: number,
  countryUpdate: CountryUpdate,
) => {
  return customMutator<CountryResponse>({
    url: `/api/v1/counties/${countryId}`,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json' },
    data: countryUpdate,
  })
}

export const getUpdateCountryApiV1CountiesCountryIdPutMutationOptions = <
  TError = HttpValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateCountryApiV1CountiesCountryIdPut>>,
    TError,
    { countryId: number; data: CountryUpdate },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateCountryApiV1CountiesCountryIdPut>>,
  TError,
  { countryId: number; data: CountryUpdate },
  TContext
> => {
  const mutationKey = ['updateCountryApiV1CountiesCountryIdPut']
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateCountryApiV1CountiesCountryIdPut>>,
    { countryId: number; data: CountryUpdate }
  > = (props) => {
    const { countryId, data } = props ?? {}

    return updateCountryApiV1CountiesCountryIdPut(countryId, data)
  }

  return { mutationFn, ...mutationOptions }
}

export type UpdateCountryApiV1CountiesCountryIdPutMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateCountryApiV1CountiesCountryIdPut>>
>
export type UpdateCountryApiV1CountiesCountryIdPutMutationBody = CountryUpdate
export type UpdateCountryApiV1CountiesCountryIdPutMutationError = HttpValidationError

/**
 * @summary Update Country
 */
export const useUpdateCountryApiV1CountiesCountryIdPut = <
  TError = HttpValidationError,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof updateCountryApiV1CountiesCountryIdPut>>,
      TError,
      { countryId: number; data: CountryUpdate },
      TContext
    >
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof updateCountryApiV1CountiesCountryIdPut>>,
  TError,
  { countryId: number; data: CountryUpdate },
  TContext
> => {
  const mutationOptions = getUpdateCountryApiV1CountiesCountryIdPutMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * @summary Delete Country
 */
export const deleteCountryApiV1CountiesCountryIdDelete = (countryId: number) => {
  return customMutator<unknown>({ url: `/api/v1/counties/${countryId}`, method: 'DELETE' })
}

export const getDeleteCountryApiV1CountiesCountryIdDeleteMutationOptions = <
  TError = HttpValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteCountryApiV1CountiesCountryIdDelete>>,
    TError,
    { countryId: number },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteCountryApiV1CountiesCountryIdDelete>>,
  TError,
  { countryId: number },
  TContext
> => {
  const mutationKey = ['deleteCountryApiV1CountiesCountryIdDelete']
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteCountryApiV1CountiesCountryIdDelete>>,
    { countryId: number }
  > = (props) => {
    const { countryId } = props ?? {}

    return deleteCountryApiV1CountiesCountryIdDelete(countryId)
  }

  return { mutationFn, ...mutationOptions }
}

export type DeleteCountryApiV1CountiesCountryIdDeleteMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteCountryApiV1CountiesCountryIdDelete>>
>

export type DeleteCountryApiV1CountiesCountryIdDeleteMutationError = HttpValidationError

/**
 * @summary Delete Country
 */
export const useDeleteCountryApiV1CountiesCountryIdDelete = <
  TError = HttpValidationError,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deleteCountryApiV1CountiesCountryIdDelete>>,
      TError,
      { countryId: number },
      TContext
    >
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof deleteCountryApiV1CountiesCountryIdDelete>>,
  TError,
  { countryId: number },
  TContext
> => {
  const mutationOptions = getDeleteCountryApiV1CountiesCountryIdDeleteMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
