/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * Main Service
 * OpenAPI spec version: 0.1.0
 */
import { faker } from '@faker-js/faker'
import { delay, http, HttpResponse } from 'msw'
import type { PositionDetailResponse, PositionListResponse, PositionResponse } from '../../model'

export const getGetPositionsListApiV1PositionsGetResponseMock = (
  overrideResponse: Partial<PositionListResponse> = {},
): PositionListResponse => ({
  page: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
  totalPages: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
  totalItems: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
  data: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
    name: faker.string.alpha({ length: { min: 10, max: 20 } }),
    description: faker.helpers.arrayElement([
      faker.helpers.arrayElement([faker.string.alpha({ length: { min: 10, max: 20 } }), null]),
      undefined,
    ]),
    id: faker.string.uuid(),
  })),
  ...overrideResponse,
})

export const getCreatePositionApiV1PositionsPostResponseMock = (
  overrideResponse: Partial<PositionResponse> = {},
): PositionResponse => ({
  name: faker.string.alpha({ length: { min: 10, max: 20 } }),
  description: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.string.alpha({ length: { min: 10, max: 20 } }), null]),
    undefined,
  ]),
  id: faker.string.uuid(),
  ...overrideResponse,
})

export const getGetPositionApiV1PositionsPositionIdGetResponseMock = (
  overrideResponse: Partial<PositionDetailResponse> = {},
): PositionDetailResponse => ({
  name: faker.string.alpha({ length: { min: 10, max: 20 } }),
  description: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.string.alpha({ length: { min: 10, max: 20 } }), null]),
    undefined,
  ]),
  id: faker.string.uuid(),
  createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  ...overrideResponse,
})

export const getUpdatePositionApiV1PositionsPositionIdPutResponseMock = (
  overrideResponse: Partial<PositionResponse> = {},
): PositionResponse => ({
  name: faker.string.alpha({ length: { min: 10, max: 20 } }),
  description: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.string.alpha({ length: { min: 10, max: 20 } }), null]),
    undefined,
  ]),
  id: faker.string.uuid(),
  ...overrideResponse,
})

export const getGetPositionsListApiV1PositionsGetMockHandler = (
  overrideResponse?:
    | PositionListResponse
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<PositionListResponse> | PositionListResponse),
) => {
  return http.get('*/api/v1/positions/', async (info) => {
    await delay(1000)

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getGetPositionsListApiV1PositionsGetResponseMock(),
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } },
    )
  })
}

export const getCreatePositionApiV1PositionsPostMockHandler = (
  overrideResponse?:
    | PositionResponse
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<PositionResponse> | PositionResponse),
) => {
  return http.post('*/api/v1/positions/', async (info) => {
    await delay(1000)

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getCreatePositionApiV1PositionsPostResponseMock(),
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } },
    )
  })
}

export const getGetPositionApiV1PositionsPositionIdGetMockHandler = (
  overrideResponse?:
    | PositionDetailResponse
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<PositionDetailResponse> | PositionDetailResponse),
) => {
  return http.get('*/api/v1/positions/:positionId', async (info) => {
    await delay(1000)

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getGetPositionApiV1PositionsPositionIdGetResponseMock(),
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } },
    )
  })
}

export const getUpdatePositionApiV1PositionsPositionIdPutMockHandler = (
  overrideResponse?:
    | PositionResponse
    | ((
        info: Parameters<Parameters<typeof http.put>[1]>[0],
      ) => Promise<PositionResponse> | PositionResponse),
) => {
  return http.put('*/api/v1/positions/:positionId', async (info) => {
    await delay(1000)

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getUpdatePositionApiV1PositionsPositionIdPutResponseMock(),
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } },
    )
  })
}

export const getDeletePositionApiV1PositionsPositionIdDeleteMockHandler = (
  overrideResponse?:
    | unknown
    | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<unknown> | unknown),
) => {
  return http.delete('*/api/v1/positions/:positionId', async (info) => {
    await delay(1000)
    if (typeof overrideResponse === 'function') {
      await overrideResponse(info)
    }
    return new HttpResponse(null, { status: 200 })
  })
}
export const getPositionsMock = () => [
  getGetPositionsListApiV1PositionsGetMockHandler(),
  getCreatePositionApiV1PositionsPostMockHandler(),
  getGetPositionApiV1PositionsPositionIdGetMockHandler(),
  getUpdatePositionApiV1PositionsPositionIdPutMockHandler(),
  getDeletePositionApiV1PositionsPositionIdDeleteMockHandler(),
]
