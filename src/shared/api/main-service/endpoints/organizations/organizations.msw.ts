/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * Main Service
 * OpenAPI spec version: 0.1.0
 */
import { faker } from '@faker-js/faker'
import { delay, http, HttpResponse } from 'msw'
import {
  AddressType,
  ContactType,
  type OrganizationDetailResponse,
  type OrganizationListResponse,
  type OrganizationResponse,
} from '../../model'

export const getGetOrganizationsListApiV1OrganizationsGetResponseMock = (
  overrideResponse: Partial<OrganizationListResponse> = {},
): OrganizationListResponse => ({
  page: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
  totalPages: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
  totalItems: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
  data: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
    legalName: faker.string.alpha({ length: { min: 10, max: 20 } }),
    registrationNumber: faker.helpers.arrayElement([
      faker.helpers.arrayElement([faker.string.alpha({ length: { min: 10, max: 20 } }), null]),
      undefined,
    ]),
    taxId: faker.helpers.arrayElement([
      faker.helpers.arrayElement([faker.string.alpha({ length: { min: 10, max: 20 } }), null]),
      undefined,
    ]),
    id: faker.string.uuid(),
    countryName: faker.string.alpha({ length: { min: 10, max: 20 } }),
  })),
  ...overrideResponse,
})

export const getCreateOrganizationApiV1OrganizationsPostResponseMock = (
  overrideResponse: Partial<OrganizationResponse> = {},
): OrganizationResponse => ({
  legalName: faker.string.alpha({ length: { min: 10, max: 20 } }),
  registrationNumber: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.string.alpha({ length: { min: 10, max: 20 } }), null]),
    undefined,
  ]),
  taxId: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.string.alpha({ length: { min: 10, max: 20 } }), null]),
    undefined,
  ]),
  id: faker.string.uuid(),
  country: {
    id: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
    code: faker.string.alpha({ length: { min: 10, max: 20 } }),
    name: faker.string.alpha({ length: { min: 10, max: 20 } }),
    nameLocal: faker.string.alpha({ length: { min: 10, max: 20 } }),
  },
  contacts: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
    () => ({
      type: faker.helpers.arrayElement(Object.values(ContactType)),
      value: faker.string.alpha({ length: { min: 10, max: 20 } }),
      isPrimary: faker.datatype.boolean(),
      note: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.string.alpha({ length: { min: 10, max: 20 } }), null]),
        undefined,
      ]),
      id: faker.string.uuid(),
    }),
  ),
  addresses: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
    () => ({
      id: faker.string.uuid(),
      cityId: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
      type: faker.helpers.arrayElement(Object.values(AddressType)),
      isPrimary: faker.datatype.boolean(),
    }),
  ),
  ...overrideResponse,
})

export const getGetOrganizationApiV1OrganizationsOrganizationIdGetResponseMock = (
  overrideResponse: Partial<OrganizationDetailResponse> = {},
): OrganizationDetailResponse => ({
  legalName: faker.string.alpha({ length: { min: 10, max: 20 } }),
  registrationNumber: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.string.alpha({ length: { min: 10, max: 20 } }), null]),
    undefined,
  ]),
  taxId: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.string.alpha({ length: { min: 10, max: 20 } }), null]),
    undefined,
  ]),
  id: faker.string.uuid(),
  country: {
    id: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
    code: faker.string.alpha({ length: { min: 10, max: 20 } }),
    name: faker.string.alpha({ length: { min: 10, max: 20 } }),
    nameLocal: faker.string.alpha({ length: { min: 10, max: 20 } }),
  },
  contacts: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
    () => ({
      type: faker.helpers.arrayElement(Object.values(ContactType)),
      value: faker.string.alpha({ length: { min: 10, max: 20 } }),
      isPrimary: faker.datatype.boolean(),
      note: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.string.alpha({ length: { min: 10, max: 20 } }), null]),
        undefined,
      ]),
      id: faker.string.uuid(),
      createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
      updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
    }),
  ),
  addresses: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
    () => ({
      street: faker.string.alpha({ length: { min: 10, max: 20 } }),
      postalCode: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.string.alpha({ length: { min: 10, max: 20 } }), null]),
        undefined,
      ]),
      type: faker.helpers.arrayElement(Object.values(AddressType)),
      isPrimary: faker.datatype.boolean(),
      note: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.string.alpha({ length: { min: 10, max: 20 } }), null]),
        undefined,
      ]),
      id: faker.string.uuid(),
      cityId: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
      createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
      updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
    }),
  ),
  createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  ...overrideResponse,
})

export const getUpdateOrganizationApiV1OrganizationsOrganizationIdPutResponseMock = (
  overrideResponse: Partial<OrganizationResponse> = {},
): OrganizationResponse => ({
  legalName: faker.string.alpha({ length: { min: 10, max: 20 } }),
  registrationNumber: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.string.alpha({ length: { min: 10, max: 20 } }), null]),
    undefined,
  ]),
  taxId: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.string.alpha({ length: { min: 10, max: 20 } }), null]),
    undefined,
  ]),
  id: faker.string.uuid(),
  country: {
    id: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
    code: faker.string.alpha({ length: { min: 10, max: 20 } }),
    name: faker.string.alpha({ length: { min: 10, max: 20 } }),
    nameLocal: faker.string.alpha({ length: { min: 10, max: 20 } }),
  },
  contacts: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
    () => ({
      type: faker.helpers.arrayElement(Object.values(ContactType)),
      value: faker.string.alpha({ length: { min: 10, max: 20 } }),
      isPrimary: faker.datatype.boolean(),
      note: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.string.alpha({ length: { min: 10, max: 20 } }), null]),
        undefined,
      ]),
      id: faker.string.uuid(),
    }),
  ),
  addresses: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
    () => ({
      id: faker.string.uuid(),
      cityId: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
      type: faker.helpers.arrayElement(Object.values(AddressType)),
      isPrimary: faker.datatype.boolean(),
    }),
  ),
  ...overrideResponse,
})

export const getGetOrganizationsListApiV1OrganizationsGetMockHandler = (
  overrideResponse?:
    | OrganizationListResponse
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<OrganizationListResponse> | OrganizationListResponse),
) => {
  return http.get('*/api/v1/organizations/', async (info) => {
    await delay(1000)

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getGetOrganizationsListApiV1OrganizationsGetResponseMock(),
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } },
    )
  })
}

export const getCreateOrganizationApiV1OrganizationsPostMockHandler = (
  overrideResponse?:
    | OrganizationResponse
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<OrganizationResponse> | OrganizationResponse),
) => {
  return http.post('*/api/v1/organizations/', async (info) => {
    await delay(1000)

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getCreateOrganizationApiV1OrganizationsPostResponseMock(),
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } },
    )
  })
}

export const getGetOrganizationApiV1OrganizationsOrganizationIdGetMockHandler = (
  overrideResponse?:
    | OrganizationDetailResponse
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<OrganizationDetailResponse> | OrganizationDetailResponse),
) => {
  return http.get('*/api/v1/organizations/:organizationId', async (info) => {
    await delay(1000)

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getGetOrganizationApiV1OrganizationsOrganizationIdGetResponseMock(),
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } },
    )
  })
}

export const getUpdateOrganizationApiV1OrganizationsOrganizationIdPutMockHandler = (
  overrideResponse?:
    | OrganizationResponse
    | ((
        info: Parameters<Parameters<typeof http.put>[1]>[0],
      ) => Promise<OrganizationResponse> | OrganizationResponse),
) => {
  return http.put('*/api/v1/organizations/:organizationId', async (info) => {
    await delay(1000)

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getUpdateOrganizationApiV1OrganizationsOrganizationIdPutResponseMock(),
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } },
    )
  })
}

export const getDeleteOrganizationApiV1OrganizationsOrganizationIdDeleteMockHandler = (
  overrideResponse?:
    | unknown
    | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<unknown> | unknown),
) => {
  return http.delete('*/api/v1/organizations/:organizationId', async (info) => {
    await delay(1000)
    if (typeof overrideResponse === 'function') {
      await overrideResponse(info)
    }
    return new HttpResponse(null, { status: 200 })
  })
}
export const getOrganizationsMock = () => [
  getGetOrganizationsListApiV1OrganizationsGetMockHandler(),
  getCreateOrganizationApiV1OrganizationsPostMockHandler(),
  getGetOrganizationApiV1OrganizationsOrganizationIdGetMockHandler(),
  getUpdateOrganizationApiV1OrganizationsOrganizationIdPutMockHandler(),
  getDeleteOrganizationApiV1OrganizationsOrganizationIdDeleteMockHandler(),
]
