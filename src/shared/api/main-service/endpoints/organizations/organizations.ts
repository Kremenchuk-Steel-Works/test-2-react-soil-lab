/**
 * Generated by orval v7.11.2 🍺
 * Do not edit manually.
 * Main Service
 * OpenAPI spec version: 0.1.0
 */
import {
  useMutation,
  useQuery,
  type DataTag,
  type DefinedInitialDataOptions,
  type DefinedUseQueryResult,
  type MutationFunction,
  type QueryClient,
  type QueryFunction,
  type QueryKey,
  type UndefinedInitialDataOptions,
  type UseMutationOptions,
  type UseMutationResult,
  type UseQueryOptions,
  type UseQueryResult,
} from '@tanstack/react-query'
import { customMutator } from '../../../mutator'
import type {
  GetOrganizationsListApiV1OrganizationsGetParams,
  HttpValidationError,
  OrganizationCreate,
  OrganizationDetailResponse,
  OrganizationListResponse,
  OrganizationResponse,
  OrganizationUpdate,
} from '../../model'

/**
 * @summary Get Organizations List
 */
export const getOrganizationsListApiV1OrganizationsGet = (
  params?: GetOrganizationsListApiV1OrganizationsGetParams,
  signal?: AbortSignal,
) => {
  return customMutator<OrganizationListResponse>({
    url: `/api/v1/organizations/`,
    method: 'GET',
    params,
    signal,
  })
}

export const getGetOrganizationsListApiV1OrganizationsGetQueryKey = (
  params?: GetOrganizationsListApiV1OrganizationsGetParams,
) => {
  return [`/api/v1/organizations/`, ...(params ? [params] : [])] as const
}

export const getGetOrganizationsListApiV1OrganizationsGetQueryOptions = <
  TData = Awaited<ReturnType<typeof getOrganizationsListApiV1OrganizationsGet>>,
  TError = HttpValidationError,
>(
  params?: GetOrganizationsListApiV1OrganizationsGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getOrganizationsListApiV1OrganizationsGet>>,
        TError,
        TData
      >
    >
  },
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getGetOrganizationsListApiV1OrganizationsGetQueryKey(params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getOrganizationsListApiV1OrganizationsGet>>
  > = ({ signal }) => getOrganizationsListApiV1OrganizationsGet(params, signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getOrganizationsListApiV1OrganizationsGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetOrganizationsListApiV1OrganizationsGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof getOrganizationsListApiV1OrganizationsGet>>
>
export type GetOrganizationsListApiV1OrganizationsGetQueryError = HttpValidationError

export function useGetOrganizationsListApiV1OrganizationsGet<
  TData = Awaited<ReturnType<typeof getOrganizationsListApiV1OrganizationsGet>>,
  TError = HttpValidationError,
>(
  params: undefined | GetOrganizationsListApiV1OrganizationsGetParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getOrganizationsListApiV1OrganizationsGet>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrganizationsListApiV1OrganizationsGet>>,
          TError,
          Awaited<ReturnType<typeof getOrganizationsListApiV1OrganizationsGet>>
        >,
        'initialData'
      >
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetOrganizationsListApiV1OrganizationsGet<
  TData = Awaited<ReturnType<typeof getOrganizationsListApiV1OrganizationsGet>>,
  TError = HttpValidationError,
>(
  params?: GetOrganizationsListApiV1OrganizationsGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getOrganizationsListApiV1OrganizationsGet>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrganizationsListApiV1OrganizationsGet>>,
          TError,
          Awaited<ReturnType<typeof getOrganizationsListApiV1OrganizationsGet>>
        >,
        'initialData'
      >
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetOrganizationsListApiV1OrganizationsGet<
  TData = Awaited<ReturnType<typeof getOrganizationsListApiV1OrganizationsGet>>,
  TError = HttpValidationError,
>(
  params?: GetOrganizationsListApiV1OrganizationsGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getOrganizationsListApiV1OrganizationsGet>>,
        TError,
        TData
      >
    >
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Organizations List
 */

export function useGetOrganizationsListApiV1OrganizationsGet<
  TData = Awaited<ReturnType<typeof getOrganizationsListApiV1OrganizationsGet>>,
  TError = HttpValidationError,
>(
  params?: GetOrganizationsListApiV1OrganizationsGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getOrganizationsListApiV1OrganizationsGet>>,
        TError,
        TData
      >
    >
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetOrganizationsListApiV1OrganizationsGetQueryOptions(params, options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Create Organization
 */
export const createOrganizationApiV1OrganizationsPost = (
  organizationCreate: OrganizationCreate,
  signal?: AbortSignal,
) => {
  return customMutator<OrganizationResponse>({
    url: `/api/v1/organizations/`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: organizationCreate,
    signal,
  })
}

export const getCreateOrganizationApiV1OrganizationsPostMutationOptions = <
  TError = HttpValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createOrganizationApiV1OrganizationsPost>>,
    TError,
    { data: OrganizationCreate },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof createOrganizationApiV1OrganizationsPost>>,
  TError,
  { data: OrganizationCreate },
  TContext
> => {
  const mutationKey = ['createOrganizationApiV1OrganizationsPost']
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createOrganizationApiV1OrganizationsPost>>,
    { data: OrganizationCreate }
  > = (props) => {
    const { data } = props ?? {}

    return createOrganizationApiV1OrganizationsPost(data)
  }

  return { mutationFn, ...mutationOptions }
}

export type CreateOrganizationApiV1OrganizationsPostMutationResult = NonNullable<
  Awaited<ReturnType<typeof createOrganizationApiV1OrganizationsPost>>
>
export type CreateOrganizationApiV1OrganizationsPostMutationBody = OrganizationCreate
export type CreateOrganizationApiV1OrganizationsPostMutationError = HttpValidationError

/**
 * @summary Create Organization
 */
export const useCreateOrganizationApiV1OrganizationsPost = <
  TError = HttpValidationError,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof createOrganizationApiV1OrganizationsPost>>,
      TError,
      { data: OrganizationCreate },
      TContext
    >
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof createOrganizationApiV1OrganizationsPost>>,
  TError,
  { data: OrganizationCreate },
  TContext
> => {
  const mutationOptions = getCreateOrganizationApiV1OrganizationsPostMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * @summary Get Organization
 */
export const getOrganizationApiV1OrganizationsOrganizationIdGet = (
  organizationId: string,
  signal?: AbortSignal,
) => {
  return customMutator<OrganizationDetailResponse>({
    url: `/api/v1/organizations/${organizationId}`,
    method: 'GET',
    signal,
  })
}

export const getGetOrganizationApiV1OrganizationsOrganizationIdGetQueryKey = (
  organizationId?: string,
) => {
  return [`/api/v1/organizations/${organizationId}`] as const
}

export const getGetOrganizationApiV1OrganizationsOrganizationIdGetQueryOptions = <
  TData = Awaited<ReturnType<typeof getOrganizationApiV1OrganizationsOrganizationIdGet>>,
  TError = HttpValidationError,
>(
  organizationId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getOrganizationApiV1OrganizationsOrganizationIdGet>>,
        TError,
        TData
      >
    >
  },
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ??
    getGetOrganizationApiV1OrganizationsOrganizationIdGetQueryKey(organizationId)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getOrganizationApiV1OrganizationsOrganizationIdGet>>
  > = ({ signal }) => getOrganizationApiV1OrganizationsOrganizationIdGet(organizationId, signal)

  return { queryKey, queryFn, enabled: !!organizationId, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getOrganizationApiV1OrganizationsOrganizationIdGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetOrganizationApiV1OrganizationsOrganizationIdGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof getOrganizationApiV1OrganizationsOrganizationIdGet>>
>
export type GetOrganizationApiV1OrganizationsOrganizationIdGetQueryError = HttpValidationError

export function useGetOrganizationApiV1OrganizationsOrganizationIdGet<
  TData = Awaited<ReturnType<typeof getOrganizationApiV1OrganizationsOrganizationIdGet>>,
  TError = HttpValidationError,
>(
  organizationId: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getOrganizationApiV1OrganizationsOrganizationIdGet>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrganizationApiV1OrganizationsOrganizationIdGet>>,
          TError,
          Awaited<ReturnType<typeof getOrganizationApiV1OrganizationsOrganizationIdGet>>
        >,
        'initialData'
      >
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetOrganizationApiV1OrganizationsOrganizationIdGet<
  TData = Awaited<ReturnType<typeof getOrganizationApiV1OrganizationsOrganizationIdGet>>,
  TError = HttpValidationError,
>(
  organizationId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getOrganizationApiV1OrganizationsOrganizationIdGet>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrganizationApiV1OrganizationsOrganizationIdGet>>,
          TError,
          Awaited<ReturnType<typeof getOrganizationApiV1OrganizationsOrganizationIdGet>>
        >,
        'initialData'
      >
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetOrganizationApiV1OrganizationsOrganizationIdGet<
  TData = Awaited<ReturnType<typeof getOrganizationApiV1OrganizationsOrganizationIdGet>>,
  TError = HttpValidationError,
>(
  organizationId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getOrganizationApiV1OrganizationsOrganizationIdGet>>,
        TError,
        TData
      >
    >
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Organization
 */

export function useGetOrganizationApiV1OrganizationsOrganizationIdGet<
  TData = Awaited<ReturnType<typeof getOrganizationApiV1OrganizationsOrganizationIdGet>>,
  TError = HttpValidationError,
>(
  organizationId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getOrganizationApiV1OrganizationsOrganizationIdGet>>,
        TError,
        TData
      >
    >
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetOrganizationApiV1OrganizationsOrganizationIdGetQueryOptions(
    organizationId,
    options,
  )

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Update Organization
 */
export const updateOrganizationApiV1OrganizationsOrganizationIdPut = (
  organizationId: string,
  organizationUpdate: OrganizationUpdate,
) => {
  return customMutator<OrganizationResponse>({
    url: `/api/v1/organizations/${organizationId}`,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json' },
    data: organizationUpdate,
  })
}

export const getUpdateOrganizationApiV1OrganizationsOrganizationIdPutMutationOptions = <
  TError = HttpValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateOrganizationApiV1OrganizationsOrganizationIdPut>>,
    TError,
    { organizationId: string; data: OrganizationUpdate },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateOrganizationApiV1OrganizationsOrganizationIdPut>>,
  TError,
  { organizationId: string; data: OrganizationUpdate },
  TContext
> => {
  const mutationKey = ['updateOrganizationApiV1OrganizationsOrganizationIdPut']
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateOrganizationApiV1OrganizationsOrganizationIdPut>>,
    { organizationId: string; data: OrganizationUpdate }
  > = (props) => {
    const { organizationId, data } = props ?? {}

    return updateOrganizationApiV1OrganizationsOrganizationIdPut(organizationId, data)
  }

  return { mutationFn, ...mutationOptions }
}

export type UpdateOrganizationApiV1OrganizationsOrganizationIdPutMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateOrganizationApiV1OrganizationsOrganizationIdPut>>
>
export type UpdateOrganizationApiV1OrganizationsOrganizationIdPutMutationBody = OrganizationUpdate
export type UpdateOrganizationApiV1OrganizationsOrganizationIdPutMutationError = HttpValidationError

/**
 * @summary Update Organization
 */
export const useUpdateOrganizationApiV1OrganizationsOrganizationIdPut = <
  TError = HttpValidationError,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof updateOrganizationApiV1OrganizationsOrganizationIdPut>>,
      TError,
      { organizationId: string; data: OrganizationUpdate },
      TContext
    >
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof updateOrganizationApiV1OrganizationsOrganizationIdPut>>,
  TError,
  { organizationId: string; data: OrganizationUpdate },
  TContext
> => {
  const mutationOptions =
    getUpdateOrganizationApiV1OrganizationsOrganizationIdPutMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * @summary Delete Organization
 */
export const deleteOrganizationApiV1OrganizationsOrganizationIdDelete = (
  organizationId: string,
) => {
  return customMutator<unknown>({
    url: `/api/v1/organizations/${organizationId}`,
    method: 'DELETE',
  })
}

export const getDeleteOrganizationApiV1OrganizationsOrganizationIdDeleteMutationOptions = <
  TError = HttpValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteOrganizationApiV1OrganizationsOrganizationIdDelete>>,
    TError,
    { organizationId: string },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteOrganizationApiV1OrganizationsOrganizationIdDelete>>,
  TError,
  { organizationId: string },
  TContext
> => {
  const mutationKey = ['deleteOrganizationApiV1OrganizationsOrganizationIdDelete']
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteOrganizationApiV1OrganizationsOrganizationIdDelete>>,
    { organizationId: string }
  > = (props) => {
    const { organizationId } = props ?? {}

    return deleteOrganizationApiV1OrganizationsOrganizationIdDelete(organizationId)
  }

  return { mutationFn, ...mutationOptions }
}

export type DeleteOrganizationApiV1OrganizationsOrganizationIdDeleteMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteOrganizationApiV1OrganizationsOrganizationIdDelete>>
>

export type DeleteOrganizationApiV1OrganizationsOrganizationIdDeleteMutationError =
  HttpValidationError

/**
 * @summary Delete Organization
 */
export const useDeleteOrganizationApiV1OrganizationsOrganizationIdDelete = <
  TError = HttpValidationError,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deleteOrganizationApiV1OrganizationsOrganizationIdDelete>>,
      TError,
      { organizationId: string },
      TContext
    >
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof deleteOrganizationApiV1OrganizationsOrganizationIdDelete>>,
  TError,
  { organizationId: string },
  TContext
> => {
  const mutationOptions =
    getDeleteOrganizationApiV1OrganizationsOrganizationIdDeleteMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
