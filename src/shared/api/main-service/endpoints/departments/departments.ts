/**
 * Generated by orval v7.11.2 🍺
 * Do not edit manually.
 * Main Service
 * OpenAPI spec version: 0.1.0
 */
import {
  useMutation,
  useQuery,
  type DataTag,
  type DefinedInitialDataOptions,
  type DefinedUseQueryResult,
  type MutationFunction,
  type QueryClient,
  type QueryFunction,
  type QueryKey,
  type UndefinedInitialDataOptions,
  type UseMutationOptions,
  type UseMutationResult,
  type UseQueryOptions,
  type UseQueryResult,
} from '@tanstack/react-query'
import { customMutator } from '../../../mutator'
import type {
  DepartmentCreate,
  DepartmentDetailResponse,
  DepartmentListResponse,
  DepartmentResponse,
  DepartmentUpdate,
  GetDepartmentsListApiV1DepartmentsGetParams,
  HttpValidationError,
} from '../../model'

/**
 * @summary Get Departments List
 */
export const getDepartmentsListApiV1DepartmentsGet = (
  params?: GetDepartmentsListApiV1DepartmentsGetParams,
  signal?: AbortSignal,
) => {
  return customMutator<DepartmentListResponse>({
    url: `/api/v1/departments/`,
    method: 'GET',
    params,
    signal,
  })
}

export const getGetDepartmentsListApiV1DepartmentsGetQueryKey = (
  params?: GetDepartmentsListApiV1DepartmentsGetParams,
) => {
  return [`/api/v1/departments/`, ...(params ? [params] : [])] as const
}

export const getGetDepartmentsListApiV1DepartmentsGetQueryOptions = <
  TData = Awaited<ReturnType<typeof getDepartmentsListApiV1DepartmentsGet>>,
  TError = HttpValidationError,
>(
  params?: GetDepartmentsListApiV1DepartmentsGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getDepartmentsListApiV1DepartmentsGet>>,
        TError,
        TData
      >
    >
  },
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getGetDepartmentsListApiV1DepartmentsGetQueryKey(params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getDepartmentsListApiV1DepartmentsGet>>
  > = ({ signal }) => getDepartmentsListApiV1DepartmentsGet(params, signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getDepartmentsListApiV1DepartmentsGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetDepartmentsListApiV1DepartmentsGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof getDepartmentsListApiV1DepartmentsGet>>
>
export type GetDepartmentsListApiV1DepartmentsGetQueryError = HttpValidationError

export function useGetDepartmentsListApiV1DepartmentsGet<
  TData = Awaited<ReturnType<typeof getDepartmentsListApiV1DepartmentsGet>>,
  TError = HttpValidationError,
>(
  params: undefined | GetDepartmentsListApiV1DepartmentsGetParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getDepartmentsListApiV1DepartmentsGet>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDepartmentsListApiV1DepartmentsGet>>,
          TError,
          Awaited<ReturnType<typeof getDepartmentsListApiV1DepartmentsGet>>
        >,
        'initialData'
      >
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetDepartmentsListApiV1DepartmentsGet<
  TData = Awaited<ReturnType<typeof getDepartmentsListApiV1DepartmentsGet>>,
  TError = HttpValidationError,
>(
  params?: GetDepartmentsListApiV1DepartmentsGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getDepartmentsListApiV1DepartmentsGet>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDepartmentsListApiV1DepartmentsGet>>,
          TError,
          Awaited<ReturnType<typeof getDepartmentsListApiV1DepartmentsGet>>
        >,
        'initialData'
      >
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetDepartmentsListApiV1DepartmentsGet<
  TData = Awaited<ReturnType<typeof getDepartmentsListApiV1DepartmentsGet>>,
  TError = HttpValidationError,
>(
  params?: GetDepartmentsListApiV1DepartmentsGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getDepartmentsListApiV1DepartmentsGet>>,
        TError,
        TData
      >
    >
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Departments List
 */

export function useGetDepartmentsListApiV1DepartmentsGet<
  TData = Awaited<ReturnType<typeof getDepartmentsListApiV1DepartmentsGet>>,
  TError = HttpValidationError,
>(
  params?: GetDepartmentsListApiV1DepartmentsGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getDepartmentsListApiV1DepartmentsGet>>,
        TError,
        TData
      >
    >
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetDepartmentsListApiV1DepartmentsGetQueryOptions(params, options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Create Department
 */
export const createDepartmentApiV1DepartmentsPost = (
  departmentCreate: DepartmentCreate,
  signal?: AbortSignal,
) => {
  return customMutator<DepartmentResponse>({
    url: `/api/v1/departments/`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: departmentCreate,
    signal,
  })
}

export const getCreateDepartmentApiV1DepartmentsPostMutationOptions = <
  TError = HttpValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createDepartmentApiV1DepartmentsPost>>,
    TError,
    { data: DepartmentCreate },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof createDepartmentApiV1DepartmentsPost>>,
  TError,
  { data: DepartmentCreate },
  TContext
> => {
  const mutationKey = ['createDepartmentApiV1DepartmentsPost']
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createDepartmentApiV1DepartmentsPost>>,
    { data: DepartmentCreate }
  > = (props) => {
    const { data } = props ?? {}

    return createDepartmentApiV1DepartmentsPost(data)
  }

  return { mutationFn, ...mutationOptions }
}

export type CreateDepartmentApiV1DepartmentsPostMutationResult = NonNullable<
  Awaited<ReturnType<typeof createDepartmentApiV1DepartmentsPost>>
>
export type CreateDepartmentApiV1DepartmentsPostMutationBody = DepartmentCreate
export type CreateDepartmentApiV1DepartmentsPostMutationError = HttpValidationError

/**
 * @summary Create Department
 */
export const useCreateDepartmentApiV1DepartmentsPost = <
  TError = HttpValidationError,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof createDepartmentApiV1DepartmentsPost>>,
      TError,
      { data: DepartmentCreate },
      TContext
    >
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof createDepartmentApiV1DepartmentsPost>>,
  TError,
  { data: DepartmentCreate },
  TContext
> => {
  const mutationOptions = getCreateDepartmentApiV1DepartmentsPostMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * @summary Get Department
 */
export const getDepartmentApiV1DepartmentsDepartmentIdGet = (
  departmentId: string,
  signal?: AbortSignal,
) => {
  return customMutator<DepartmentDetailResponse>({
    url: `/api/v1/departments/${departmentId}`,
    method: 'GET',
    signal,
  })
}

export const getGetDepartmentApiV1DepartmentsDepartmentIdGetQueryKey = (departmentId?: string) => {
  return [`/api/v1/departments/${departmentId}`] as const
}

export const getGetDepartmentApiV1DepartmentsDepartmentIdGetQueryOptions = <
  TData = Awaited<ReturnType<typeof getDepartmentApiV1DepartmentsDepartmentIdGet>>,
  TError = HttpValidationError,
>(
  departmentId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getDepartmentApiV1DepartmentsDepartmentIdGet>>,
        TError,
        TData
      >
    >
  },
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getGetDepartmentApiV1DepartmentsDepartmentIdGetQueryKey(departmentId)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getDepartmentApiV1DepartmentsDepartmentIdGet>>
  > = ({ signal }) => getDepartmentApiV1DepartmentsDepartmentIdGet(departmentId, signal)

  return { queryKey, queryFn, enabled: !!departmentId, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getDepartmentApiV1DepartmentsDepartmentIdGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetDepartmentApiV1DepartmentsDepartmentIdGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof getDepartmentApiV1DepartmentsDepartmentIdGet>>
>
export type GetDepartmentApiV1DepartmentsDepartmentIdGetQueryError = HttpValidationError

export function useGetDepartmentApiV1DepartmentsDepartmentIdGet<
  TData = Awaited<ReturnType<typeof getDepartmentApiV1DepartmentsDepartmentIdGet>>,
  TError = HttpValidationError,
>(
  departmentId: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getDepartmentApiV1DepartmentsDepartmentIdGet>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDepartmentApiV1DepartmentsDepartmentIdGet>>,
          TError,
          Awaited<ReturnType<typeof getDepartmentApiV1DepartmentsDepartmentIdGet>>
        >,
        'initialData'
      >
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetDepartmentApiV1DepartmentsDepartmentIdGet<
  TData = Awaited<ReturnType<typeof getDepartmentApiV1DepartmentsDepartmentIdGet>>,
  TError = HttpValidationError,
>(
  departmentId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getDepartmentApiV1DepartmentsDepartmentIdGet>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDepartmentApiV1DepartmentsDepartmentIdGet>>,
          TError,
          Awaited<ReturnType<typeof getDepartmentApiV1DepartmentsDepartmentIdGet>>
        >,
        'initialData'
      >
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetDepartmentApiV1DepartmentsDepartmentIdGet<
  TData = Awaited<ReturnType<typeof getDepartmentApiV1DepartmentsDepartmentIdGet>>,
  TError = HttpValidationError,
>(
  departmentId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getDepartmentApiV1DepartmentsDepartmentIdGet>>,
        TError,
        TData
      >
    >
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Department
 */

export function useGetDepartmentApiV1DepartmentsDepartmentIdGet<
  TData = Awaited<ReturnType<typeof getDepartmentApiV1DepartmentsDepartmentIdGet>>,
  TError = HttpValidationError,
>(
  departmentId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getDepartmentApiV1DepartmentsDepartmentIdGet>>,
        TError,
        TData
      >
    >
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetDepartmentApiV1DepartmentsDepartmentIdGetQueryOptions(
    departmentId,
    options,
  )

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Update Department
 */
export const updateDepartmentApiV1DepartmentsDepartmentIdPut = (
  departmentId: string,
  departmentUpdate: DepartmentUpdate,
) => {
  return customMutator<DepartmentResponse>({
    url: `/api/v1/departments/${departmentId}`,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json' },
    data: departmentUpdate,
  })
}

export const getUpdateDepartmentApiV1DepartmentsDepartmentIdPutMutationOptions = <
  TError = HttpValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateDepartmentApiV1DepartmentsDepartmentIdPut>>,
    TError,
    { departmentId: string; data: DepartmentUpdate },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateDepartmentApiV1DepartmentsDepartmentIdPut>>,
  TError,
  { departmentId: string; data: DepartmentUpdate },
  TContext
> => {
  const mutationKey = ['updateDepartmentApiV1DepartmentsDepartmentIdPut']
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateDepartmentApiV1DepartmentsDepartmentIdPut>>,
    { departmentId: string; data: DepartmentUpdate }
  > = (props) => {
    const { departmentId, data } = props ?? {}

    return updateDepartmentApiV1DepartmentsDepartmentIdPut(departmentId, data)
  }

  return { mutationFn, ...mutationOptions }
}

export type UpdateDepartmentApiV1DepartmentsDepartmentIdPutMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateDepartmentApiV1DepartmentsDepartmentIdPut>>
>
export type UpdateDepartmentApiV1DepartmentsDepartmentIdPutMutationBody = DepartmentUpdate
export type UpdateDepartmentApiV1DepartmentsDepartmentIdPutMutationError = HttpValidationError

/**
 * @summary Update Department
 */
export const useUpdateDepartmentApiV1DepartmentsDepartmentIdPut = <
  TError = HttpValidationError,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof updateDepartmentApiV1DepartmentsDepartmentIdPut>>,
      TError,
      { departmentId: string; data: DepartmentUpdate },
      TContext
    >
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof updateDepartmentApiV1DepartmentsDepartmentIdPut>>,
  TError,
  { departmentId: string; data: DepartmentUpdate },
  TContext
> => {
  const mutationOptions = getUpdateDepartmentApiV1DepartmentsDepartmentIdPutMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * @summary Delete Department
 */
export const deleteDepartmentApiV1DepartmentsDepartmentIdDelete = (departmentId: string) => {
  return customMutator<unknown>({ url: `/api/v1/departments/${departmentId}`, method: 'DELETE' })
}

export const getDeleteDepartmentApiV1DepartmentsDepartmentIdDeleteMutationOptions = <
  TError = HttpValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteDepartmentApiV1DepartmentsDepartmentIdDelete>>,
    TError,
    { departmentId: string },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteDepartmentApiV1DepartmentsDepartmentIdDelete>>,
  TError,
  { departmentId: string },
  TContext
> => {
  const mutationKey = ['deleteDepartmentApiV1DepartmentsDepartmentIdDelete']
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteDepartmentApiV1DepartmentsDepartmentIdDelete>>,
    { departmentId: string }
  > = (props) => {
    const { departmentId } = props ?? {}

    return deleteDepartmentApiV1DepartmentsDepartmentIdDelete(departmentId)
  }

  return { mutationFn, ...mutationOptions }
}

export type DeleteDepartmentApiV1DepartmentsDepartmentIdDeleteMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteDepartmentApiV1DepartmentsDepartmentIdDelete>>
>

export type DeleteDepartmentApiV1DepartmentsDepartmentIdDeleteMutationError = HttpValidationError

/**
 * @summary Delete Department
 */
export const useDeleteDepartmentApiV1DepartmentsDepartmentIdDelete = <
  TError = HttpValidationError,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deleteDepartmentApiV1DepartmentsDepartmentIdDelete>>,
      TError,
      { departmentId: string },
      TContext
    >
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof deleteDepartmentApiV1DepartmentsDepartmentIdDelete>>,
  TError,
  { departmentId: string },
  TContext
> => {
  const mutationOptions =
    getDeleteDepartmentApiV1DepartmentsDepartmentIdDeleteMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
