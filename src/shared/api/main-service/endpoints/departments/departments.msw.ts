/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * Main Service
 * OpenAPI spec version: 0.1.0
 */
import { faker } from '@faker-js/faker'
import { delay, http, HttpResponse } from 'msw'
import type {
  DepartmentDetailResponse,
  DepartmentListResponse,
  DepartmentResponse,
} from '../../model'

export const getGetDepartmentsListApiV1DepartmentsGetResponseMock = (
  overrideResponse: Partial<DepartmentListResponse> = {},
): DepartmentListResponse => ({
  page: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
  totalPages: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
  totalItems: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
  data: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
    name: faker.string.alpha({ length: { min: 10, max: 20 } }),
    description: faker.helpers.arrayElement([
      faker.helpers.arrayElement([faker.string.alpha({ length: { min: 10, max: 20 } }), null]),
      undefined,
    ]),
    id: faker.string.uuid(),
  })),
  ...overrideResponse,
})

export const getCreateDepartmentApiV1DepartmentsPostResponseMock = (
  overrideResponse: Partial<DepartmentResponse> = {},
): DepartmentResponse => ({
  name: faker.string.alpha({ length: { min: 10, max: 20 } }),
  description: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.string.alpha({ length: { min: 10, max: 20 } }), null]),
    undefined,
  ]),
  id: faker.string.uuid(),
  ...overrideResponse,
})

export const getGetDepartmentApiV1DepartmentsDepartmentIdGetResponseMock = (
  overrideResponse: Partial<DepartmentDetailResponse> = {},
): DepartmentDetailResponse => ({
  name: faker.string.alpha({ length: { min: 10, max: 20 } }),
  description: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.string.alpha({ length: { min: 10, max: 20 } }), null]),
    undefined,
  ]),
  id: faker.string.uuid(),
  permissions: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
    () => ({
      name: faker.string.alpha({ length: { min: 10, max: 20 } }),
      description: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.string.alpha({ length: { min: 10, max: 20 } }), null]),
        undefined,
      ]),
      id: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
    }),
  ),
  createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  ...overrideResponse,
})

export const getUpdateDepartmentApiV1DepartmentsDepartmentIdPutResponseMock = (
  overrideResponse: Partial<DepartmentResponse> = {},
): DepartmentResponse => ({
  name: faker.string.alpha({ length: { min: 10, max: 20 } }),
  description: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.string.alpha({ length: { min: 10, max: 20 } }), null]),
    undefined,
  ]),
  id: faker.string.uuid(),
  ...overrideResponse,
})

export const getGetDepartmentsListApiV1DepartmentsGetMockHandler = (
  overrideResponse?:
    | DepartmentListResponse
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<DepartmentListResponse> | DepartmentListResponse),
) => {
  return http.get('*/api/v1/departments/', async (info) => {
    await delay(1000)

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getGetDepartmentsListApiV1DepartmentsGetResponseMock(),
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } },
    )
  })
}

export const getCreateDepartmentApiV1DepartmentsPostMockHandler = (
  overrideResponse?:
    | DepartmentResponse
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<DepartmentResponse> | DepartmentResponse),
) => {
  return http.post('*/api/v1/departments/', async (info) => {
    await delay(1000)

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getCreateDepartmentApiV1DepartmentsPostResponseMock(),
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } },
    )
  })
}

export const getGetDepartmentApiV1DepartmentsDepartmentIdGetMockHandler = (
  overrideResponse?:
    | DepartmentDetailResponse
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<DepartmentDetailResponse> | DepartmentDetailResponse),
) => {
  return http.get('*/api/v1/departments/:departmentId', async (info) => {
    await delay(1000)

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getGetDepartmentApiV1DepartmentsDepartmentIdGetResponseMock(),
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } },
    )
  })
}

export const getUpdateDepartmentApiV1DepartmentsDepartmentIdPutMockHandler = (
  overrideResponse?:
    | DepartmentResponse
    | ((
        info: Parameters<Parameters<typeof http.put>[1]>[0],
      ) => Promise<DepartmentResponse> | DepartmentResponse),
) => {
  return http.put('*/api/v1/departments/:departmentId', async (info) => {
    await delay(1000)

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getUpdateDepartmentApiV1DepartmentsDepartmentIdPutResponseMock(),
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } },
    )
  })
}

export const getDeleteDepartmentApiV1DepartmentsDepartmentIdDeleteMockHandler = (
  overrideResponse?:
    | unknown
    | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<unknown> | unknown),
) => {
  return http.delete('*/api/v1/departments/:departmentId', async (info) => {
    await delay(1000)
    if (typeof overrideResponse === 'function') {
      await overrideResponse(info)
    }
    return new HttpResponse(null, { status: 200 })
  })
}
export const getDepartmentsMock = () => [
  getGetDepartmentsListApiV1DepartmentsGetMockHandler(),
  getCreateDepartmentApiV1DepartmentsPostMockHandler(),
  getGetDepartmentApiV1DepartmentsDepartmentIdGetMockHandler(),
  getUpdateDepartmentApiV1DepartmentsDepartmentIdPutMockHandler(),
  getDeleteDepartmentApiV1DepartmentsDepartmentIdDeleteMockHandler(),
]
