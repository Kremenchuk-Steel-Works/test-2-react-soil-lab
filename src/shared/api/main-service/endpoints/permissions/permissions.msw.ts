/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * Main Service
 * OpenAPI spec version: 0.1.0
 */
import { faker } from '@faker-js/faker'
import { delay, http, HttpResponse } from 'msw'
import type {
  PermissionDetailResponse,
  PermissionListResponse,
  PermissionResponse,
} from '../../model'

export const getGetPermissionsListApiV1PermissionsGetResponseMock = (
  overrideResponse: Partial<PermissionListResponse> = {},
): PermissionListResponse => ({
  page: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
  totalPages: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
  totalItems: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
  data: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
    id: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
    name: faker.string.alpha({ length: { min: 10, max: 20 } }),
    departmentName: faker.string.alpha({ length: { min: 10, max: 20 } }),
  })),
  ...overrideResponse,
})

export const getCreatePermissionApiV1PermissionsPostResponseMock = (
  overrideResponse: Partial<PermissionResponse> = {},
): PermissionResponse => ({
  name: faker.string.alpha({ length: { min: 10, max: 20 } }),
  description: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.string.alpha({ length: { min: 10, max: 20 } }), null]),
    undefined,
  ]),
  id: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
  department: {
    name: faker.string.alpha({ length: { min: 10, max: 20 } }),
    description: faker.helpers.arrayElement([
      faker.helpers.arrayElement([faker.string.alpha({ length: { min: 10, max: 20 } }), null]),
      undefined,
    ]),
    id: faker.string.uuid(),
  },
  ...overrideResponse,
})

export const getGetPermissionApiV1PermissionsPermissionIdGetResponseMock = (
  overrideResponse: Partial<PermissionDetailResponse> = {},
): PermissionDetailResponse => ({
  name: faker.string.alpha({ length: { min: 10, max: 20 } }),
  description: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.string.alpha({ length: { min: 10, max: 20 } }), null]),
    undefined,
  ]),
  id: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
  department: {
    name: faker.string.alpha({ length: { min: 10, max: 20 } }),
    description: faker.helpers.arrayElement([
      faker.helpers.arrayElement([faker.string.alpha({ length: { min: 10, max: 20 } }), null]),
      undefined,
    ]),
    id: faker.string.uuid(),
  },
  createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  ...overrideResponse,
})

export const getUpdatePermissionApiV1PermissionsPermissionIdPutResponseMock = (
  overrideResponse: Partial<PermissionResponse> = {},
): PermissionResponse => ({
  name: faker.string.alpha({ length: { min: 10, max: 20 } }),
  description: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.string.alpha({ length: { min: 10, max: 20 } }), null]),
    undefined,
  ]),
  id: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
  department: {
    name: faker.string.alpha({ length: { min: 10, max: 20 } }),
    description: faker.helpers.arrayElement([
      faker.helpers.arrayElement([faker.string.alpha({ length: { min: 10, max: 20 } }), null]),
      undefined,
    ]),
    id: faker.string.uuid(),
  },
  ...overrideResponse,
})

export const getGetPermissionsListApiV1PermissionsGetMockHandler = (
  overrideResponse?:
    | PermissionListResponse
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<PermissionListResponse> | PermissionListResponse),
) => {
  return http.get('*/api/v1/permissions/', async (info) => {
    await delay(1000)

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getGetPermissionsListApiV1PermissionsGetResponseMock(),
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } },
    )
  })
}

export const getCreatePermissionApiV1PermissionsPostMockHandler = (
  overrideResponse?:
    | PermissionResponse
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<PermissionResponse> | PermissionResponse),
) => {
  return http.post('*/api/v1/permissions/', async (info) => {
    await delay(1000)

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getCreatePermissionApiV1PermissionsPostResponseMock(),
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } },
    )
  })
}

export const getGetPermissionApiV1PermissionsPermissionIdGetMockHandler = (
  overrideResponse?:
    | PermissionDetailResponse
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<PermissionDetailResponse> | PermissionDetailResponse),
) => {
  return http.get('*/api/v1/permissions/:permissionId', async (info) => {
    await delay(1000)

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getGetPermissionApiV1PermissionsPermissionIdGetResponseMock(),
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } },
    )
  })
}

export const getUpdatePermissionApiV1PermissionsPermissionIdPutMockHandler = (
  overrideResponse?:
    | PermissionResponse
    | ((
        info: Parameters<Parameters<typeof http.put>[1]>[0],
      ) => Promise<PermissionResponse> | PermissionResponse),
) => {
  return http.put('*/api/v1/permissions/:permissionId', async (info) => {
    await delay(1000)

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getUpdatePermissionApiV1PermissionsPermissionIdPutResponseMock(),
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } },
    )
  })
}

export const getDeletePermissionApiV1PermissionsPermissionIdDeleteMockHandler = (
  overrideResponse?:
    | unknown
    | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<unknown> | unknown),
) => {
  return http.delete('*/api/v1/permissions/:permissionId', async (info) => {
    await delay(1000)
    if (typeof overrideResponse === 'function') {
      await overrideResponse(info)
    }
    return new HttpResponse(null, { status: 200 })
  })
}
export const getPermissionsMock = () => [
  getGetPermissionsListApiV1PermissionsGetMockHandler(),
  getCreatePermissionApiV1PermissionsPostMockHandler(),
  getGetPermissionApiV1PermissionsPermissionIdGetMockHandler(),
  getUpdatePermissionApiV1PermissionsPermissionIdPutMockHandler(),
  getDeletePermissionApiV1PermissionsPermissionIdDeleteMockHandler(),
]
