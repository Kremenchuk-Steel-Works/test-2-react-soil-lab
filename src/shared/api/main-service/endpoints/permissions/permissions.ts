/**
 * Generated by orval v7.11.2 🍺
 * Do not edit manually.
 * Main Service
 * OpenAPI spec version: 0.1.0
 */
import {
  useMutation,
  useQuery,
  type DataTag,
  type DefinedInitialDataOptions,
  type DefinedUseQueryResult,
  type MutationFunction,
  type QueryClient,
  type QueryFunction,
  type QueryKey,
  type UndefinedInitialDataOptions,
  type UseMutationOptions,
  type UseMutationResult,
  type UseQueryOptions,
  type UseQueryResult,
} from '@tanstack/react-query'
import { customMutator } from '../../../mutator'
import type {
  GetPermissionsListApiV1PermissionsGetParams,
  HttpValidationError,
  PermissionCreate,
  PermissionDetailResponse,
  PermissionListResponse,
  PermissionResponse,
  PermissionUpdate,
} from '../../model'

/**
 * @summary Get Permissions List
 */
export const getPermissionsListApiV1PermissionsGet = (
  params?: GetPermissionsListApiV1PermissionsGetParams,
  signal?: AbortSignal,
) => {
  return customMutator<PermissionListResponse>({
    url: `/api/v1/permissions/`,
    method: 'GET',
    params,
    signal,
  })
}

export const getGetPermissionsListApiV1PermissionsGetQueryKey = (
  params?: GetPermissionsListApiV1PermissionsGetParams,
) => {
  return [`/api/v1/permissions/`, ...(params ? [params] : [])] as const
}

export const getGetPermissionsListApiV1PermissionsGetQueryOptions = <
  TData = Awaited<ReturnType<typeof getPermissionsListApiV1PermissionsGet>>,
  TError = HttpValidationError,
>(
  params?: GetPermissionsListApiV1PermissionsGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getPermissionsListApiV1PermissionsGet>>,
        TError,
        TData
      >
    >
  },
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getGetPermissionsListApiV1PermissionsGetQueryKey(params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getPermissionsListApiV1PermissionsGet>>
  > = ({ signal }) => getPermissionsListApiV1PermissionsGet(params, signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getPermissionsListApiV1PermissionsGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetPermissionsListApiV1PermissionsGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof getPermissionsListApiV1PermissionsGet>>
>
export type GetPermissionsListApiV1PermissionsGetQueryError = HttpValidationError

export function useGetPermissionsListApiV1PermissionsGet<
  TData = Awaited<ReturnType<typeof getPermissionsListApiV1PermissionsGet>>,
  TError = HttpValidationError,
>(
  params: undefined | GetPermissionsListApiV1PermissionsGetParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getPermissionsListApiV1PermissionsGet>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPermissionsListApiV1PermissionsGet>>,
          TError,
          Awaited<ReturnType<typeof getPermissionsListApiV1PermissionsGet>>
        >,
        'initialData'
      >
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetPermissionsListApiV1PermissionsGet<
  TData = Awaited<ReturnType<typeof getPermissionsListApiV1PermissionsGet>>,
  TError = HttpValidationError,
>(
  params?: GetPermissionsListApiV1PermissionsGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getPermissionsListApiV1PermissionsGet>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPermissionsListApiV1PermissionsGet>>,
          TError,
          Awaited<ReturnType<typeof getPermissionsListApiV1PermissionsGet>>
        >,
        'initialData'
      >
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetPermissionsListApiV1PermissionsGet<
  TData = Awaited<ReturnType<typeof getPermissionsListApiV1PermissionsGet>>,
  TError = HttpValidationError,
>(
  params?: GetPermissionsListApiV1PermissionsGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getPermissionsListApiV1PermissionsGet>>,
        TError,
        TData
      >
    >
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Permissions List
 */

export function useGetPermissionsListApiV1PermissionsGet<
  TData = Awaited<ReturnType<typeof getPermissionsListApiV1PermissionsGet>>,
  TError = HttpValidationError,
>(
  params?: GetPermissionsListApiV1PermissionsGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getPermissionsListApiV1PermissionsGet>>,
        TError,
        TData
      >
    >
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetPermissionsListApiV1PermissionsGetQueryOptions(params, options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Create Permission
 */
export const createPermissionApiV1PermissionsPost = (
  permissionCreate: PermissionCreate,
  signal?: AbortSignal,
) => {
  return customMutator<PermissionResponse>({
    url: `/api/v1/permissions/`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: permissionCreate,
    signal,
  })
}

export const getCreatePermissionApiV1PermissionsPostMutationOptions = <
  TError = HttpValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createPermissionApiV1PermissionsPost>>,
    TError,
    { data: PermissionCreate },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof createPermissionApiV1PermissionsPost>>,
  TError,
  { data: PermissionCreate },
  TContext
> => {
  const mutationKey = ['createPermissionApiV1PermissionsPost']
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createPermissionApiV1PermissionsPost>>,
    { data: PermissionCreate }
  > = (props) => {
    const { data } = props ?? {}

    return createPermissionApiV1PermissionsPost(data)
  }

  return { mutationFn, ...mutationOptions }
}

export type CreatePermissionApiV1PermissionsPostMutationResult = NonNullable<
  Awaited<ReturnType<typeof createPermissionApiV1PermissionsPost>>
>
export type CreatePermissionApiV1PermissionsPostMutationBody = PermissionCreate
export type CreatePermissionApiV1PermissionsPostMutationError = HttpValidationError

/**
 * @summary Create Permission
 */
export const useCreatePermissionApiV1PermissionsPost = <
  TError = HttpValidationError,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof createPermissionApiV1PermissionsPost>>,
      TError,
      { data: PermissionCreate },
      TContext
    >
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof createPermissionApiV1PermissionsPost>>,
  TError,
  { data: PermissionCreate },
  TContext
> => {
  const mutationOptions = getCreatePermissionApiV1PermissionsPostMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * @summary Get Permission
 */
export const getPermissionApiV1PermissionsPermissionIdGet = (
  permissionId: number,
  signal?: AbortSignal,
) => {
  return customMutator<PermissionDetailResponse>({
    url: `/api/v1/permissions/${permissionId}`,
    method: 'GET',
    signal,
  })
}

export const getGetPermissionApiV1PermissionsPermissionIdGetQueryKey = (permissionId?: number) => {
  return [`/api/v1/permissions/${permissionId}`] as const
}

export const getGetPermissionApiV1PermissionsPermissionIdGetQueryOptions = <
  TData = Awaited<ReturnType<typeof getPermissionApiV1PermissionsPermissionIdGet>>,
  TError = HttpValidationError,
>(
  permissionId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getPermissionApiV1PermissionsPermissionIdGet>>,
        TError,
        TData
      >
    >
  },
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getGetPermissionApiV1PermissionsPermissionIdGetQueryKey(permissionId)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getPermissionApiV1PermissionsPermissionIdGet>>
  > = ({ signal }) => getPermissionApiV1PermissionsPermissionIdGet(permissionId, signal)

  return { queryKey, queryFn, enabled: !!permissionId, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getPermissionApiV1PermissionsPermissionIdGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetPermissionApiV1PermissionsPermissionIdGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof getPermissionApiV1PermissionsPermissionIdGet>>
>
export type GetPermissionApiV1PermissionsPermissionIdGetQueryError = HttpValidationError

export function useGetPermissionApiV1PermissionsPermissionIdGet<
  TData = Awaited<ReturnType<typeof getPermissionApiV1PermissionsPermissionIdGet>>,
  TError = HttpValidationError,
>(
  permissionId: number,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getPermissionApiV1PermissionsPermissionIdGet>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPermissionApiV1PermissionsPermissionIdGet>>,
          TError,
          Awaited<ReturnType<typeof getPermissionApiV1PermissionsPermissionIdGet>>
        >,
        'initialData'
      >
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetPermissionApiV1PermissionsPermissionIdGet<
  TData = Awaited<ReturnType<typeof getPermissionApiV1PermissionsPermissionIdGet>>,
  TError = HttpValidationError,
>(
  permissionId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getPermissionApiV1PermissionsPermissionIdGet>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPermissionApiV1PermissionsPermissionIdGet>>,
          TError,
          Awaited<ReturnType<typeof getPermissionApiV1PermissionsPermissionIdGet>>
        >,
        'initialData'
      >
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetPermissionApiV1PermissionsPermissionIdGet<
  TData = Awaited<ReturnType<typeof getPermissionApiV1PermissionsPermissionIdGet>>,
  TError = HttpValidationError,
>(
  permissionId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getPermissionApiV1PermissionsPermissionIdGet>>,
        TError,
        TData
      >
    >
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Permission
 */

export function useGetPermissionApiV1PermissionsPermissionIdGet<
  TData = Awaited<ReturnType<typeof getPermissionApiV1PermissionsPermissionIdGet>>,
  TError = HttpValidationError,
>(
  permissionId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getPermissionApiV1PermissionsPermissionIdGet>>,
        TError,
        TData
      >
    >
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetPermissionApiV1PermissionsPermissionIdGetQueryOptions(
    permissionId,
    options,
  )

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Update Permission
 */
export const updatePermissionApiV1PermissionsPermissionIdPut = (
  permissionId: number,
  permissionUpdate: PermissionUpdate,
) => {
  return customMutator<PermissionResponse>({
    url: `/api/v1/permissions/${permissionId}`,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json' },
    data: permissionUpdate,
  })
}

export const getUpdatePermissionApiV1PermissionsPermissionIdPutMutationOptions = <
  TError = HttpValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updatePermissionApiV1PermissionsPermissionIdPut>>,
    TError,
    { permissionId: number; data: PermissionUpdate },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof updatePermissionApiV1PermissionsPermissionIdPut>>,
  TError,
  { permissionId: number; data: PermissionUpdate },
  TContext
> => {
  const mutationKey = ['updatePermissionApiV1PermissionsPermissionIdPut']
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updatePermissionApiV1PermissionsPermissionIdPut>>,
    { permissionId: number; data: PermissionUpdate }
  > = (props) => {
    const { permissionId, data } = props ?? {}

    return updatePermissionApiV1PermissionsPermissionIdPut(permissionId, data)
  }

  return { mutationFn, ...mutationOptions }
}

export type UpdatePermissionApiV1PermissionsPermissionIdPutMutationResult = NonNullable<
  Awaited<ReturnType<typeof updatePermissionApiV1PermissionsPermissionIdPut>>
>
export type UpdatePermissionApiV1PermissionsPermissionIdPutMutationBody = PermissionUpdate
export type UpdatePermissionApiV1PermissionsPermissionIdPutMutationError = HttpValidationError

/**
 * @summary Update Permission
 */
export const useUpdatePermissionApiV1PermissionsPermissionIdPut = <
  TError = HttpValidationError,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof updatePermissionApiV1PermissionsPermissionIdPut>>,
      TError,
      { permissionId: number; data: PermissionUpdate },
      TContext
    >
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof updatePermissionApiV1PermissionsPermissionIdPut>>,
  TError,
  { permissionId: number; data: PermissionUpdate },
  TContext
> => {
  const mutationOptions = getUpdatePermissionApiV1PermissionsPermissionIdPutMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * @summary Delete Permission
 */
export const deletePermissionApiV1PermissionsPermissionIdDelete = (permissionId: number) => {
  return customMutator<unknown>({ url: `/api/v1/permissions/${permissionId}`, method: 'DELETE' })
}

export const getDeletePermissionApiV1PermissionsPermissionIdDeleteMutationOptions = <
  TError = HttpValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deletePermissionApiV1PermissionsPermissionIdDelete>>,
    TError,
    { permissionId: number },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof deletePermissionApiV1PermissionsPermissionIdDelete>>,
  TError,
  { permissionId: number },
  TContext
> => {
  const mutationKey = ['deletePermissionApiV1PermissionsPermissionIdDelete']
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deletePermissionApiV1PermissionsPermissionIdDelete>>,
    { permissionId: number }
  > = (props) => {
    const { permissionId } = props ?? {}

    return deletePermissionApiV1PermissionsPermissionIdDelete(permissionId)
  }

  return { mutationFn, ...mutationOptions }
}

export type DeletePermissionApiV1PermissionsPermissionIdDeleteMutationResult = NonNullable<
  Awaited<ReturnType<typeof deletePermissionApiV1PermissionsPermissionIdDelete>>
>

export type DeletePermissionApiV1PermissionsPermissionIdDeleteMutationError = HttpValidationError

/**
 * @summary Delete Permission
 */
export const useDeletePermissionApiV1PermissionsPermissionIdDelete = <
  TError = HttpValidationError,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deletePermissionApiV1PermissionsPermissionIdDelete>>,
      TError,
      { permissionId: number },
      TContext
    >
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof deletePermissionApiV1PermissionsPermissionIdDelete>>,
  TError,
  { permissionId: number },
  TContext
> => {
  const mutationOptions =
    getDeletePermissionApiV1PermissionsPermissionIdDeleteMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
