/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * soil_laboratory
 * OpenAPI spec version: 0.1.0
 */
import { faker } from '@faker-js/faker'
import { delay, http, HttpResponse } from 'msw'
import type {
  TestResultDetailResponse,
  TestResultPaginatedListResponse,
  TestResultShortResponse,
} from '../../model'

export const getGetTestsListApiV1TestResultsGetResponseMock = (
  overrideResponse: Partial<TestResultPaginatedListResponse> = {},
): TestResultPaginatedListResponse => ({
  data: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
    deletedAt: faker.helpers.arrayElement([
      faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]),
      undefined,
    ]),
    createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
    createdById: faker.helpers.arrayElement([
      faker.helpers.arrayElement([faker.string.uuid(), null]),
      undefined,
    ]),
    updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
    updatedById: faker.helpers.arrayElement([
      faker.helpers.arrayElement([faker.string.uuid(), null]),
      undefined,
    ]),
    id: faker.string.uuid(),
    sample: {
      id: faker.string.uuid(),
      material: {
        id: faker.string.uuid(),
        materialType: {
          id: faker.string.uuid(),
          code: faker.string.alpha({ length: { min: 10, max: 20 } }),
          name: faker.string.alpha({ length: { min: 10, max: 20 } }),
        },
        name: faker.string.alpha({ length: { min: 10, max: 20 } }),
      },
      materialSource: {
        id: faker.string.uuid(),
        code: faker.string.alpha({ length: { min: 10, max: 20 } }),
        name: faker.string.alpha({ length: { min: 10, max: 20 } }),
      },
      receivedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
    },
    parameter: {
      id: faker.string.uuid(),
      code: faker.string.alpha({ length: { min: 10, max: 20 } }),
      name: faker.string.alpha({ length: { min: 10, max: 20 } }),
      units: faker.string.alpha({ length: { min: 10, max: 20 } }),
    },
    meanValue: faker.helpers.arrayElement([
      faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
      null,
    ]),
    variationPercentage: faker.helpers.arrayElement([
      faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
      null,
    ]),
    isCompliant: faker.datatype.boolean(),
    isDeleted: faker.datatype.boolean(),
  })),
  page: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
  totalPages: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
  totalItems: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
  ...overrideResponse,
})

export const getCreateTestApiV1TestResultsPostResponseMock = (
  overrideResponse: Partial<TestResultDetailResponse> = {},
): TestResultDetailResponse => ({
  deletedAt: faker.helpers.arrayElement([
    faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]),
    undefined,
  ]),
  createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  createdById: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.string.uuid(), null]),
    undefined,
  ]),
  updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  updatedById: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.string.uuid(), null]),
    undefined,
  ]),
  id: faker.string.uuid(),
  sample: {
    id: faker.string.uuid(),
    material: {
      id: faker.string.uuid(),
      materialType: {
        id: faker.string.uuid(),
        code: faker.string.alpha({ length: { min: 10, max: 20 } }),
        name: faker.string.alpha({ length: { min: 10, max: 20 } }),
      },
      name: faker.string.alpha({ length: { min: 10, max: 20 } }),
    },
    materialSource: {
      id: faker.string.uuid(),
      code: faker.string.alpha({ length: { min: 10, max: 20 } }),
      name: faker.string.alpha({ length: { min: 10, max: 20 } }),
    },
    receivedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  },
  parameter: {
    id: faker.string.uuid(),
    code: faker.string.alpha({ length: { min: 10, max: 20 } }),
    name: faker.string.alpha({ length: { min: 10, max: 20 } }),
    units: faker.string.alpha({ length: { min: 10, max: 20 } }),
  },
  measurements: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
    () => ({
      id: faker.string.uuid(),
      value: faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
    }),
  ),
  meanValue: faker.helpers.arrayElement([
    faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
    null,
  ]),
  variationPercentage: faker.helpers.arrayElement([
    faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
    null,
  ]),
  lowerLimit: faker.helpers.arrayElement([
    faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
    null,
  ]),
  upperLimit: faker.helpers.arrayElement([
    faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
    null,
  ]),
  isCompliant: faker.datatype.boolean(),
  isDeleted: faker.datatype.boolean(),
  ...overrideResponse,
})

export const getGetTestApiV1TestResultsTestResultIdGetResponseMock = (
  overrideResponse: Partial<TestResultDetailResponse> = {},
): TestResultDetailResponse => ({
  deletedAt: faker.helpers.arrayElement([
    faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]),
    undefined,
  ]),
  createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  createdById: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.string.uuid(), null]),
    undefined,
  ]),
  updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  updatedById: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.string.uuid(), null]),
    undefined,
  ]),
  id: faker.string.uuid(),
  sample: {
    id: faker.string.uuid(),
    material: {
      id: faker.string.uuid(),
      materialType: {
        id: faker.string.uuid(),
        code: faker.string.alpha({ length: { min: 10, max: 20 } }),
        name: faker.string.alpha({ length: { min: 10, max: 20 } }),
      },
      name: faker.string.alpha({ length: { min: 10, max: 20 } }),
    },
    materialSource: {
      id: faker.string.uuid(),
      code: faker.string.alpha({ length: { min: 10, max: 20 } }),
      name: faker.string.alpha({ length: { min: 10, max: 20 } }),
    },
    receivedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  },
  parameter: {
    id: faker.string.uuid(),
    code: faker.string.alpha({ length: { min: 10, max: 20 } }),
    name: faker.string.alpha({ length: { min: 10, max: 20 } }),
    units: faker.string.alpha({ length: { min: 10, max: 20 } }),
  },
  measurements: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
    () => ({
      id: faker.string.uuid(),
      value: faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
    }),
  ),
  meanValue: faker.helpers.arrayElement([
    faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
    null,
  ]),
  variationPercentage: faker.helpers.arrayElement([
    faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
    null,
  ]),
  lowerLimit: faker.helpers.arrayElement([
    faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
    null,
  ]),
  upperLimit: faker.helpers.arrayElement([
    faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
    null,
  ]),
  isCompliant: faker.datatype.boolean(),
  isDeleted: faker.datatype.boolean(),
  ...overrideResponse,
})

export const getDeleteTestApiV1TestResultsTestResultIdDeleteResponseMock = (
  overrideResponse: Partial<TestResultShortResponse> = {},
): TestResultShortResponse => ({
  id: faker.string.uuid(),
  parameter: {
    id: faker.string.uuid(),
    code: faker.string.alpha({ length: { min: 10, max: 20 } }),
    name: faker.string.alpha({ length: { min: 10, max: 20 } }),
    units: faker.string.alpha({ length: { min: 10, max: 20 } }),
  },
  meanValue: faker.helpers.arrayElement([
    faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
    null,
  ]),
  variationPercentage: faker.helpers.arrayElement([
    faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
    null,
  ]),
  isCompliant: faker.datatype.boolean(),
  ...overrideResponse,
})

export const getGetTestsListApiV1TestResultsGetMockHandler = (
  overrideResponse?:
    | TestResultPaginatedListResponse
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<TestResultPaginatedListResponse> | TestResultPaginatedListResponse),
) => {
  return http.get('*/api/v1/test-results/', async (info) => {
    await delay(1000)

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getGetTestsListApiV1TestResultsGetResponseMock(),
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } },
    )
  })
}

export const getCreateTestApiV1TestResultsPostMockHandler = (
  overrideResponse?:
    | TestResultDetailResponse
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<TestResultDetailResponse> | TestResultDetailResponse),
) => {
  return http.post('*/api/v1/test-results/', async (info) => {
    await delay(1000)

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getCreateTestApiV1TestResultsPostResponseMock(),
      ),
      { status: 201, headers: { 'Content-Type': 'application/json' } },
    )
  })
}

export const getGetTestApiV1TestResultsTestResultIdGetMockHandler = (
  overrideResponse?:
    | TestResultDetailResponse
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<TestResultDetailResponse> | TestResultDetailResponse),
) => {
  return http.get('*/api/v1/test-results/:testResultId', async (info) => {
    await delay(1000)

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getGetTestApiV1TestResultsTestResultIdGetResponseMock(),
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } },
    )
  })
}

export const getDeleteTestApiV1TestResultsTestResultIdDeleteMockHandler = (
  overrideResponse?:
    | TestResultShortResponse
    | ((
        info: Parameters<Parameters<typeof http.delete>[1]>[0],
      ) => Promise<TestResultShortResponse> | TestResultShortResponse),
) => {
  return http.delete('*/api/v1/test-results/:testResultId', async (info) => {
    await delay(1000)

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getDeleteTestApiV1TestResultsTestResultIdDeleteResponseMock(),
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } },
    )
  })
}
export const getTestResultsMock = () => [
  getGetTestsListApiV1TestResultsGetMockHandler(),
  getCreateTestApiV1TestResultsPostMockHandler(),
  getGetTestApiV1TestResultsTestResultIdGetMockHandler(),
  getDeleteTestApiV1TestResultsTestResultIdDeleteMockHandler(),
]
