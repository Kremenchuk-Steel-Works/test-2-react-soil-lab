/**
 * Generated by orval v7.11.2 🍺
 * Do not edit manually.
 * soil_laboratory
 * OpenAPI spec version: 0.1.0
 */
import {
  useMutation,
  useQuery,
  type DataTag,
  type DefinedInitialDataOptions,
  type DefinedUseQueryResult,
  type MutationFunction,
  type QueryClient,
  type QueryFunction,
  type QueryKey,
  type UndefinedInitialDataOptions,
  type UseMutationOptions,
  type UseMutationResult,
  type UseQueryOptions,
  type UseQueryResult,
} from '@tanstack/react-query'
import { customMutator } from '../../../mutator'
import type {
  GetTestsListApiV1TestResultsGetParams,
  HTTPValidationError,
  TestResultCreate,
  TestResultDetailResponse,
  TestResultPaginatedListResponse,
  TestResultShortResponse,
} from '../../model'

/**
 * @summary Get Tests List
 */
export const getTestsListApiV1TestResultsGet = (
  params?: GetTestsListApiV1TestResultsGetParams,
  signal?: AbortSignal,
) => {
  return customMutator<TestResultPaginatedListResponse>({
    url: `/api/v1/test-results/`,
    method: 'GET',
    params,
    signal,
  })
}

export const getGetTestsListApiV1TestResultsGetQueryKey = (
  params?: GetTestsListApiV1TestResultsGetParams,
) => {
  return [`/api/v1/test-results/`, ...(params ? [params] : [])] as const
}

export const getGetTestsListApiV1TestResultsGetQueryOptions = <
  TData = Awaited<ReturnType<typeof getTestsListApiV1TestResultsGet>>,
  TError = HTTPValidationError,
>(
  params?: GetTestsListApiV1TestResultsGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getTestsListApiV1TestResultsGet>>, TError, TData>
    >
  },
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetTestsListApiV1TestResultsGetQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getTestsListApiV1TestResultsGet>>> = ({
    signal,
  }) => getTestsListApiV1TestResultsGet(params, signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getTestsListApiV1TestResultsGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetTestsListApiV1TestResultsGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof getTestsListApiV1TestResultsGet>>
>
export type GetTestsListApiV1TestResultsGetQueryError = HTTPValidationError

export function useGetTestsListApiV1TestResultsGet<
  TData = Awaited<ReturnType<typeof getTestsListApiV1TestResultsGet>>,
  TError = HTTPValidationError,
>(
  params: undefined | GetTestsListApiV1TestResultsGetParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getTestsListApiV1TestResultsGet>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTestsListApiV1TestResultsGet>>,
          TError,
          Awaited<ReturnType<typeof getTestsListApiV1TestResultsGet>>
        >,
        'initialData'
      >
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetTestsListApiV1TestResultsGet<
  TData = Awaited<ReturnType<typeof getTestsListApiV1TestResultsGet>>,
  TError = HTTPValidationError,
>(
  params?: GetTestsListApiV1TestResultsGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getTestsListApiV1TestResultsGet>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTestsListApiV1TestResultsGet>>,
          TError,
          Awaited<ReturnType<typeof getTestsListApiV1TestResultsGet>>
        >,
        'initialData'
      >
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetTestsListApiV1TestResultsGet<
  TData = Awaited<ReturnType<typeof getTestsListApiV1TestResultsGet>>,
  TError = HTTPValidationError,
>(
  params?: GetTestsListApiV1TestResultsGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getTestsListApiV1TestResultsGet>>, TError, TData>
    >
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Tests List
 */

export function useGetTestsListApiV1TestResultsGet<
  TData = Awaited<ReturnType<typeof getTestsListApiV1TestResultsGet>>,
  TError = HTTPValidationError,
>(
  params?: GetTestsListApiV1TestResultsGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getTestsListApiV1TestResultsGet>>, TError, TData>
    >
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetTestsListApiV1TestResultsGetQueryOptions(params, options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Create Test
 */
export const createTestApiV1TestResultsPost = (
  testResultCreate: TestResultCreate,
  signal?: AbortSignal,
) => {
  return customMutator<TestResultDetailResponse>({
    url: `/api/v1/test-results/`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: testResultCreate,
    signal,
  })
}

export const getCreateTestApiV1TestResultsPostMutationOptions = <
  TError = HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createTestApiV1TestResultsPost>>,
    TError,
    { data: TestResultCreate },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof createTestApiV1TestResultsPost>>,
  TError,
  { data: TestResultCreate },
  TContext
> => {
  const mutationKey = ['createTestApiV1TestResultsPost']
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createTestApiV1TestResultsPost>>,
    { data: TestResultCreate }
  > = (props) => {
    const { data } = props ?? {}

    return createTestApiV1TestResultsPost(data)
  }

  return { mutationFn, ...mutationOptions }
}

export type CreateTestApiV1TestResultsPostMutationResult = NonNullable<
  Awaited<ReturnType<typeof createTestApiV1TestResultsPost>>
>
export type CreateTestApiV1TestResultsPostMutationBody = TestResultCreate
export type CreateTestApiV1TestResultsPostMutationError = HTTPValidationError

/**
 * @summary Create Test
 */
export const useCreateTestApiV1TestResultsPost = <TError = HTTPValidationError, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof createTestApiV1TestResultsPost>>,
      TError,
      { data: TestResultCreate },
      TContext
    >
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof createTestApiV1TestResultsPost>>,
  TError,
  { data: TestResultCreate },
  TContext
> => {
  const mutationOptions = getCreateTestApiV1TestResultsPostMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * @summary Get Test
 */
export const getTestApiV1TestResultsTestResultIdGet = (
  testResultId: string,
  signal?: AbortSignal,
) => {
  return customMutator<TestResultDetailResponse>({
    url: `/api/v1/test-results/${testResultId}`,
    method: 'GET',
    signal,
  })
}

export const getGetTestApiV1TestResultsTestResultIdGetQueryKey = (testResultId?: string) => {
  return [`/api/v1/test-results/${testResultId}`] as const
}

export const getGetTestApiV1TestResultsTestResultIdGetQueryOptions = <
  TData = Awaited<ReturnType<typeof getTestApiV1TestResultsTestResultIdGet>>,
  TError = HTTPValidationError,
>(
  testResultId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getTestApiV1TestResultsTestResultIdGet>>,
        TError,
        TData
      >
    >
  },
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getGetTestApiV1TestResultsTestResultIdGetQueryKey(testResultId)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getTestApiV1TestResultsTestResultIdGet>>
  > = ({ signal }) => getTestApiV1TestResultsTestResultIdGet(testResultId, signal)

  return { queryKey, queryFn, enabled: !!testResultId, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getTestApiV1TestResultsTestResultIdGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetTestApiV1TestResultsTestResultIdGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof getTestApiV1TestResultsTestResultIdGet>>
>
export type GetTestApiV1TestResultsTestResultIdGetQueryError = HTTPValidationError

export function useGetTestApiV1TestResultsTestResultIdGet<
  TData = Awaited<ReturnType<typeof getTestApiV1TestResultsTestResultIdGet>>,
  TError = HTTPValidationError,
>(
  testResultId: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getTestApiV1TestResultsTestResultIdGet>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTestApiV1TestResultsTestResultIdGet>>,
          TError,
          Awaited<ReturnType<typeof getTestApiV1TestResultsTestResultIdGet>>
        >,
        'initialData'
      >
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetTestApiV1TestResultsTestResultIdGet<
  TData = Awaited<ReturnType<typeof getTestApiV1TestResultsTestResultIdGet>>,
  TError = HTTPValidationError,
>(
  testResultId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getTestApiV1TestResultsTestResultIdGet>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTestApiV1TestResultsTestResultIdGet>>,
          TError,
          Awaited<ReturnType<typeof getTestApiV1TestResultsTestResultIdGet>>
        >,
        'initialData'
      >
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetTestApiV1TestResultsTestResultIdGet<
  TData = Awaited<ReturnType<typeof getTestApiV1TestResultsTestResultIdGet>>,
  TError = HTTPValidationError,
>(
  testResultId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getTestApiV1TestResultsTestResultIdGet>>,
        TError,
        TData
      >
    >
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Test
 */

export function useGetTestApiV1TestResultsTestResultIdGet<
  TData = Awaited<ReturnType<typeof getTestApiV1TestResultsTestResultIdGet>>,
  TError = HTTPValidationError,
>(
  testResultId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getTestApiV1TestResultsTestResultIdGet>>,
        TError,
        TData
      >
    >
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetTestApiV1TestResultsTestResultIdGetQueryOptions(testResultId, options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Delete Test
 */
export const deleteTestApiV1TestResultsTestResultIdDelete = (testResultId: string) => {
  return customMutator<TestResultShortResponse>({
    url: `/api/v1/test-results/${testResultId}`,
    method: 'DELETE',
  })
}

export const getDeleteTestApiV1TestResultsTestResultIdDeleteMutationOptions = <
  TError = HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteTestApiV1TestResultsTestResultIdDelete>>,
    TError,
    { testResultId: string },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteTestApiV1TestResultsTestResultIdDelete>>,
  TError,
  { testResultId: string },
  TContext
> => {
  const mutationKey = ['deleteTestApiV1TestResultsTestResultIdDelete']
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteTestApiV1TestResultsTestResultIdDelete>>,
    { testResultId: string }
  > = (props) => {
    const { testResultId } = props ?? {}

    return deleteTestApiV1TestResultsTestResultIdDelete(testResultId)
  }

  return { mutationFn, ...mutationOptions }
}

export type DeleteTestApiV1TestResultsTestResultIdDeleteMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteTestApiV1TestResultsTestResultIdDelete>>
>

export type DeleteTestApiV1TestResultsTestResultIdDeleteMutationError = HTTPValidationError

/**
 * @summary Delete Test
 */
export const useDeleteTestApiV1TestResultsTestResultIdDelete = <
  TError = HTTPValidationError,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deleteTestApiV1TestResultsTestResultIdDelete>>,
      TError,
      { testResultId: string },
      TContext
    >
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof deleteTestApiV1TestResultsTestResultIdDelete>>,
  TError,
  { testResultId: string },
  TContext
> => {
  const mutationOptions = getDeleteTestApiV1TestResultsTestResultIdDeleteMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
