/**
 * Generated by orval v7.11.2 🍺
 * Do not edit manually.
 * soil_laboratory
 * OpenAPI spec version: 0.1.0
 */
import { faker } from '@faker-js/faker'
import { delay, http, HttpResponse } from 'msw'
import type {
  MeasurementDetailResponse,
  MeasurementListResponse,
  MeasurementLookupResponse,
} from '../../model'

export const getGetPermissionLookupsListApiV1MeasurementsLookupsGetResponseMock =
  (): MeasurementLookupResponse[] =>
    Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
      id: faker.string.uuid(),
      moldingSandNumber: faker.string.alpha({ length: { min: 10, max: 20 } }),
      moldingSandStrengthKgfCm2: faker.number.float({
        min: undefined,
        max: undefined,
        fractionDigits: 2,
      }),
      moldingSandGasPermeability: faker.number.float({
        min: undefined,
        max: undefined,
        fractionDigits: 2,
      }),
      moldingSandMoisturePercent: faker.number.float({
        min: undefined,
        max: undefined,
        fractionDigits: 2,
      }),
    }))

export const getGetMeasurementsListApiV1MeasurementsGetResponseMock = (
  overrideResponse: Partial<MeasurementListResponse> = {},
): MeasurementListResponse => ({
  data: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
    deletedAt: faker.helpers.arrayElement([
      faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]),
      undefined,
    ]),
    createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
    createdById: faker.helpers.arrayElement([
      faker.helpers.arrayElement([faker.string.uuid(), null]),
      undefined,
    ]),
    updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
    updatedById: faker.helpers.arrayElement([
      faker.helpers.arrayElement([faker.string.uuid(), null]),
      undefined,
    ]),
    id: faker.string.uuid(),
    moldingSandNumber: faker.string.alpha({ length: { min: 10, max: 20 } }),
    moldingSandStrengthKgfCm2: faker.number.float({
      min: undefined,
      max: undefined,
      fractionDigits: 2,
    }),
    moldingSandGasPermeability: faker.number.float({
      min: undefined,
      max: undefined,
      fractionDigits: 2,
    }),
    moldingSandMoisturePercent: faker.number.float({
      min: undefined,
      max: undefined,
      fractionDigits: 2,
    }),
    isDeleted: faker.datatype.boolean(),
  })),
  page: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
  totalPages: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
  totalItems: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
  ...overrideResponse,
})

export const getCreateMeasurementApiV1MeasurementsPostResponseMock = (
  overrideResponse: Partial<MeasurementDetailResponse> = {},
): MeasurementDetailResponse => ({
  deletedAt: faker.helpers.arrayElement([
    faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]),
    undefined,
  ]),
  createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  createdById: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.string.uuid(), null]),
    undefined,
  ]),
  updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  updatedById: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.string.uuid(), null]),
    undefined,
  ]),
  id: faker.string.uuid(),
  moldingSandNumber: faker.string.alpha({ length: { min: 10, max: 20 } }),
  moldingSandStrengthKgfCm2: faker.number.float({
    min: undefined,
    max: undefined,
    fractionDigits: 2,
  }),
  moldingSandGasPermeability: faker.number.float({
    min: undefined,
    max: undefined,
    fractionDigits: 2,
  }),
  moldingSandMoisturePercent: faker.number.float({
    min: undefined,
    max: undefined,
    fractionDigits: 2,
  }),
  note: faker.helpers.arrayElement([faker.string.alpha({ length: { min: 10, max: 20 } }), null]),
  isDeleted: faker.datatype.boolean(),
  ...overrideResponse,
})

export const getGetMeasurementApiV1MeasurementsMeasurementIdGetResponseMock = (
  overrideResponse: Partial<MeasurementDetailResponse> = {},
): MeasurementDetailResponse => ({
  deletedAt: faker.helpers.arrayElement([
    faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]),
    undefined,
  ]),
  createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  createdById: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.string.uuid(), null]),
    undefined,
  ]),
  updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  updatedById: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.string.uuid(), null]),
    undefined,
  ]),
  id: faker.string.uuid(),
  moldingSandNumber: faker.string.alpha({ length: { min: 10, max: 20 } }),
  moldingSandStrengthKgfCm2: faker.number.float({
    min: undefined,
    max: undefined,
    fractionDigits: 2,
  }),
  moldingSandGasPermeability: faker.number.float({
    min: undefined,
    max: undefined,
    fractionDigits: 2,
  }),
  moldingSandMoisturePercent: faker.number.float({
    min: undefined,
    max: undefined,
    fractionDigits: 2,
  }),
  note: faker.helpers.arrayElement([faker.string.alpha({ length: { min: 10, max: 20 } }), null]),
  isDeleted: faker.datatype.boolean(),
  ...overrideResponse,
})

export const getUpdateMeasurementApiV1MeasurementsMeasurementIdPutResponseMock = (
  overrideResponse: Partial<MeasurementDetailResponse> = {},
): MeasurementDetailResponse => ({
  deletedAt: faker.helpers.arrayElement([
    faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]),
    undefined,
  ]),
  createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  createdById: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.string.uuid(), null]),
    undefined,
  ]),
  updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  updatedById: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.string.uuid(), null]),
    undefined,
  ]),
  id: faker.string.uuid(),
  moldingSandNumber: faker.string.alpha({ length: { min: 10, max: 20 } }),
  moldingSandStrengthKgfCm2: faker.number.float({
    min: undefined,
    max: undefined,
    fractionDigits: 2,
  }),
  moldingSandGasPermeability: faker.number.float({
    min: undefined,
    max: undefined,
    fractionDigits: 2,
  }),
  moldingSandMoisturePercent: faker.number.float({
    min: undefined,
    max: undefined,
    fractionDigits: 2,
  }),
  note: faker.helpers.arrayElement([faker.string.alpha({ length: { min: 10, max: 20 } }), null]),
  isDeleted: faker.datatype.boolean(),
  ...overrideResponse,
})

export const getDeleteMeasurementApiV1MeasurementsMeasurementIdDeleteResponseMock = (
  overrideResponse: Partial<MeasurementDetailResponse> = {},
): MeasurementDetailResponse => ({
  deletedAt: faker.helpers.arrayElement([
    faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]),
    undefined,
  ]),
  createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  createdById: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.string.uuid(), null]),
    undefined,
  ]),
  updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  updatedById: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.string.uuid(), null]),
    undefined,
  ]),
  id: faker.string.uuid(),
  moldingSandNumber: faker.string.alpha({ length: { min: 10, max: 20 } }),
  moldingSandStrengthKgfCm2: faker.number.float({
    min: undefined,
    max: undefined,
    fractionDigits: 2,
  }),
  moldingSandGasPermeability: faker.number.float({
    min: undefined,
    max: undefined,
    fractionDigits: 2,
  }),
  moldingSandMoisturePercent: faker.number.float({
    min: undefined,
    max: undefined,
    fractionDigits: 2,
  }),
  note: faker.helpers.arrayElement([faker.string.alpha({ length: { min: 10, max: 20 } }), null]),
  isDeleted: faker.datatype.boolean(),
  ...overrideResponse,
})

export const getRestoreMeasurementApiV1MeasurementsMeasurementIdRestorePostResponseMock = (
  overrideResponse: Partial<MeasurementDetailResponse> = {},
): MeasurementDetailResponse => ({
  deletedAt: faker.helpers.arrayElement([
    faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]),
    undefined,
  ]),
  createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  createdById: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.string.uuid(), null]),
    undefined,
  ]),
  updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  updatedById: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.string.uuid(), null]),
    undefined,
  ]),
  id: faker.string.uuid(),
  moldingSandNumber: faker.string.alpha({ length: { min: 10, max: 20 } }),
  moldingSandStrengthKgfCm2: faker.number.float({
    min: undefined,
    max: undefined,
    fractionDigits: 2,
  }),
  moldingSandGasPermeability: faker.number.float({
    min: undefined,
    max: undefined,
    fractionDigits: 2,
  }),
  moldingSandMoisturePercent: faker.number.float({
    min: undefined,
    max: undefined,
    fractionDigits: 2,
  }),
  note: faker.helpers.arrayElement([faker.string.alpha({ length: { min: 10, max: 20 } }), null]),
  isDeleted: faker.datatype.boolean(),
  ...overrideResponse,
})

export const getGetMeasurementsReportApiV1MeasurementsGenerateReportPostResponseMock = (): Blob =>
  new Blob(faker.helpers.arrayElements(faker.word.words(10).split(' ')))

export const getGetPermissionLookupsListApiV1MeasurementsLookupsGetMockHandler = (
  overrideResponse?:
    | MeasurementLookupResponse[]
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<MeasurementLookupResponse[]> | MeasurementLookupResponse[]),
) => {
  return http.get('*/api/v1/measurements/lookups', async (info) => {
    await delay(1000)

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getGetPermissionLookupsListApiV1MeasurementsLookupsGetResponseMock(),
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } },
    )
  })
}

export const getGetMeasurementsListApiV1MeasurementsGetMockHandler = (
  overrideResponse?:
    | MeasurementListResponse
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<MeasurementListResponse> | MeasurementListResponse),
) => {
  return http.get('*/api/v1/measurements/', async (info) => {
    await delay(1000)

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getGetMeasurementsListApiV1MeasurementsGetResponseMock(),
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } },
    )
  })
}

export const getCreateMeasurementApiV1MeasurementsPostMockHandler = (
  overrideResponse?:
    | MeasurementDetailResponse
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<MeasurementDetailResponse> | MeasurementDetailResponse),
) => {
  return http.post('*/api/v1/measurements/', async (info) => {
    await delay(1000)

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getCreateMeasurementApiV1MeasurementsPostResponseMock(),
      ),
      { status: 201, headers: { 'Content-Type': 'application/json' } },
    )
  })
}

export const getGetMeasurementApiV1MeasurementsMeasurementIdGetMockHandler = (
  overrideResponse?:
    | MeasurementDetailResponse
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<MeasurementDetailResponse> | MeasurementDetailResponse),
) => {
  return http.get('*/api/v1/measurements/:measurementId', async (info) => {
    await delay(1000)

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getGetMeasurementApiV1MeasurementsMeasurementIdGetResponseMock(),
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } },
    )
  })
}

export const getUpdateMeasurementApiV1MeasurementsMeasurementIdPutMockHandler = (
  overrideResponse?:
    | MeasurementDetailResponse
    | ((
        info: Parameters<Parameters<typeof http.put>[1]>[0],
      ) => Promise<MeasurementDetailResponse> | MeasurementDetailResponse),
) => {
  return http.put('*/api/v1/measurements/:measurementId', async (info) => {
    await delay(1000)

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getUpdateMeasurementApiV1MeasurementsMeasurementIdPutResponseMock(),
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } },
    )
  })
}

export const getDeleteMeasurementApiV1MeasurementsMeasurementIdDeleteMockHandler = (
  overrideResponse?:
    | MeasurementDetailResponse
    | ((
        info: Parameters<Parameters<typeof http.delete>[1]>[0],
      ) => Promise<MeasurementDetailResponse> | MeasurementDetailResponse),
) => {
  return http.delete('*/api/v1/measurements/:measurementId', async (info) => {
    await delay(1000)

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getDeleteMeasurementApiV1MeasurementsMeasurementIdDeleteResponseMock(),
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } },
    )
  })
}

export const getRestoreMeasurementApiV1MeasurementsMeasurementIdRestorePostMockHandler = (
  overrideResponse?:
    | MeasurementDetailResponse
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<MeasurementDetailResponse> | MeasurementDetailResponse),
) => {
  return http.post('*/api/v1/measurements/:measurementId/restore', async (info) => {
    await delay(1000)

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getRestoreMeasurementApiV1MeasurementsMeasurementIdRestorePostResponseMock(),
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } },
    )
  })
}

export const getGetMeasurementsReportApiV1MeasurementsGenerateReportPostMockHandler = (
  overrideResponse?:
    | Blob
    | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<Blob> | Blob),
) => {
  return http.post('*/api/v1/measurements/generate-report', async (info) => {
    await delay(1000)

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getGetMeasurementsReportApiV1MeasurementsGenerateReportPostResponseMock(),
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } },
    )
  })
}
export const getMeasurementsMock = () => [
  getGetPermissionLookupsListApiV1MeasurementsLookupsGetMockHandler(),
  getGetMeasurementsListApiV1MeasurementsGetMockHandler(),
  getCreateMeasurementApiV1MeasurementsPostMockHandler(),
  getGetMeasurementApiV1MeasurementsMeasurementIdGetMockHandler(),
  getUpdateMeasurementApiV1MeasurementsMeasurementIdPutMockHandler(),
  getDeleteMeasurementApiV1MeasurementsMeasurementIdDeleteMockHandler(),
  getRestoreMeasurementApiV1MeasurementsMeasurementIdRestorePostMockHandler(),
  getGetMeasurementsReportApiV1MeasurementsGenerateReportPostMockHandler(),
]
