/**
 * Generated by orval v7.11.2 🍺
 * Do not edit manually.
 * soil_laboratory
 * OpenAPI spec version: 0.1.0
 */
import {
  useMutation,
  useQuery,
  type DataTag,
  type DefinedInitialDataOptions,
  type DefinedUseQueryResult,
  type MutationFunction,
  type QueryClient,
  type QueryFunction,
  type QueryKey,
  type UndefinedInitialDataOptions,
  type UseMutationOptions,
  type UseMutationResult,
  type UseQueryOptions,
  type UseQueryResult,
} from '@tanstack/react-query'
import { customMutator, fileMutator } from '../../../mutator'
import type {
  GetMeasurementsListApiV1MeasurementsGetParams,
  GetPermissionLookupsListApiV1MeasurementsLookupsGetParams,
  HttpValidationError,
  MeasurementCreate,
  MeasurementDetailResponse,
  MeasurementListResponse,
  MeasurementLookupResponse,
  MeasurementsReportGenerationRequest,
  MeasurementUpdate,
} from '../../model'

/**
 * @summary Get Permission Lookups List
 */
export const getPermissionLookupsListApiV1MeasurementsLookupsGet = (
  params?: GetPermissionLookupsListApiV1MeasurementsLookupsGetParams,
  signal?: AbortSignal,
) => {
  return customMutator<MeasurementLookupResponse[]>({
    url: `/api/v1/measurements/lookups`,
    method: 'GET',
    params,
    signal,
  })
}

export const getGetPermissionLookupsListApiV1MeasurementsLookupsGetQueryKey = (
  params?: GetPermissionLookupsListApiV1MeasurementsLookupsGetParams,
) => {
  return [`/api/v1/measurements/lookups`, ...(params ? [params] : [])] as const
}

export const getGetPermissionLookupsListApiV1MeasurementsLookupsGetQueryOptions = <
  TData = Awaited<ReturnType<typeof getPermissionLookupsListApiV1MeasurementsLookupsGet>>,
  TError = HttpValidationError,
>(
  params?: GetPermissionLookupsListApiV1MeasurementsLookupsGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getPermissionLookupsListApiV1MeasurementsLookupsGet>>,
        TError,
        TData
      >
    >
  },
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getGetPermissionLookupsListApiV1MeasurementsLookupsGetQueryKey(params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getPermissionLookupsListApiV1MeasurementsLookupsGet>>
  > = ({ signal }) => getPermissionLookupsListApiV1MeasurementsLookupsGet(params, signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getPermissionLookupsListApiV1MeasurementsLookupsGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetPermissionLookupsListApiV1MeasurementsLookupsGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof getPermissionLookupsListApiV1MeasurementsLookupsGet>>
>
export type GetPermissionLookupsListApiV1MeasurementsLookupsGetQueryError = HttpValidationError

export function useGetPermissionLookupsListApiV1MeasurementsLookupsGet<
  TData = Awaited<ReturnType<typeof getPermissionLookupsListApiV1MeasurementsLookupsGet>>,
  TError = HttpValidationError,
>(
  params: undefined | GetPermissionLookupsListApiV1MeasurementsLookupsGetParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getPermissionLookupsListApiV1MeasurementsLookupsGet>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPermissionLookupsListApiV1MeasurementsLookupsGet>>,
          TError,
          Awaited<ReturnType<typeof getPermissionLookupsListApiV1MeasurementsLookupsGet>>
        >,
        'initialData'
      >
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetPermissionLookupsListApiV1MeasurementsLookupsGet<
  TData = Awaited<ReturnType<typeof getPermissionLookupsListApiV1MeasurementsLookupsGet>>,
  TError = HttpValidationError,
>(
  params?: GetPermissionLookupsListApiV1MeasurementsLookupsGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getPermissionLookupsListApiV1MeasurementsLookupsGet>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPermissionLookupsListApiV1MeasurementsLookupsGet>>,
          TError,
          Awaited<ReturnType<typeof getPermissionLookupsListApiV1MeasurementsLookupsGet>>
        >,
        'initialData'
      >
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetPermissionLookupsListApiV1MeasurementsLookupsGet<
  TData = Awaited<ReturnType<typeof getPermissionLookupsListApiV1MeasurementsLookupsGet>>,
  TError = HttpValidationError,
>(
  params?: GetPermissionLookupsListApiV1MeasurementsLookupsGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getPermissionLookupsListApiV1MeasurementsLookupsGet>>,
        TError,
        TData
      >
    >
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Permission Lookups List
 */

export function useGetPermissionLookupsListApiV1MeasurementsLookupsGet<
  TData = Awaited<ReturnType<typeof getPermissionLookupsListApiV1MeasurementsLookupsGet>>,
  TError = HttpValidationError,
>(
  params?: GetPermissionLookupsListApiV1MeasurementsLookupsGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getPermissionLookupsListApiV1MeasurementsLookupsGet>>,
        TError,
        TData
      >
    >
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetPermissionLookupsListApiV1MeasurementsLookupsGetQueryOptions(
    params,
    options,
  )

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Get Measurements List
 */
export const getMeasurementsListApiV1MeasurementsGet = (
  params?: GetMeasurementsListApiV1MeasurementsGetParams,
  signal?: AbortSignal,
) => {
  return customMutator<MeasurementListResponse>({
    url: `/api/v1/measurements/`,
    method: 'GET',
    params,
    signal,
  })
}

export const getGetMeasurementsListApiV1MeasurementsGetQueryKey = (
  params?: GetMeasurementsListApiV1MeasurementsGetParams,
) => {
  return [`/api/v1/measurements/`, ...(params ? [params] : [])] as const
}

export const getGetMeasurementsListApiV1MeasurementsGetQueryOptions = <
  TData = Awaited<ReturnType<typeof getMeasurementsListApiV1MeasurementsGet>>,
  TError = HttpValidationError,
>(
  params?: GetMeasurementsListApiV1MeasurementsGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getMeasurementsListApiV1MeasurementsGet>>,
        TError,
        TData
      >
    >
  },
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getGetMeasurementsListApiV1MeasurementsGetQueryKey(params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getMeasurementsListApiV1MeasurementsGet>>
  > = ({ signal }) => getMeasurementsListApiV1MeasurementsGet(params, signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getMeasurementsListApiV1MeasurementsGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetMeasurementsListApiV1MeasurementsGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof getMeasurementsListApiV1MeasurementsGet>>
>
export type GetMeasurementsListApiV1MeasurementsGetQueryError = HttpValidationError

export function useGetMeasurementsListApiV1MeasurementsGet<
  TData = Awaited<ReturnType<typeof getMeasurementsListApiV1MeasurementsGet>>,
  TError = HttpValidationError,
>(
  params: undefined | GetMeasurementsListApiV1MeasurementsGetParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getMeasurementsListApiV1MeasurementsGet>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeasurementsListApiV1MeasurementsGet>>,
          TError,
          Awaited<ReturnType<typeof getMeasurementsListApiV1MeasurementsGet>>
        >,
        'initialData'
      >
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetMeasurementsListApiV1MeasurementsGet<
  TData = Awaited<ReturnType<typeof getMeasurementsListApiV1MeasurementsGet>>,
  TError = HttpValidationError,
>(
  params?: GetMeasurementsListApiV1MeasurementsGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getMeasurementsListApiV1MeasurementsGet>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeasurementsListApiV1MeasurementsGet>>,
          TError,
          Awaited<ReturnType<typeof getMeasurementsListApiV1MeasurementsGet>>
        >,
        'initialData'
      >
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetMeasurementsListApiV1MeasurementsGet<
  TData = Awaited<ReturnType<typeof getMeasurementsListApiV1MeasurementsGet>>,
  TError = HttpValidationError,
>(
  params?: GetMeasurementsListApiV1MeasurementsGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getMeasurementsListApiV1MeasurementsGet>>,
        TError,
        TData
      >
    >
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Measurements List
 */

export function useGetMeasurementsListApiV1MeasurementsGet<
  TData = Awaited<ReturnType<typeof getMeasurementsListApiV1MeasurementsGet>>,
  TError = HttpValidationError,
>(
  params?: GetMeasurementsListApiV1MeasurementsGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getMeasurementsListApiV1MeasurementsGet>>,
        TError,
        TData
      >
    >
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetMeasurementsListApiV1MeasurementsGetQueryOptions(params, options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Create Measurement
 */
export const createMeasurementApiV1MeasurementsPost = (
  measurementCreate: MeasurementCreate,
  signal?: AbortSignal,
) => {
  return customMutator<MeasurementDetailResponse>({
    url: `/api/v1/measurements/`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: measurementCreate,
    signal,
  })
}

export const getCreateMeasurementApiV1MeasurementsPostMutationOptions = <
  TError = HttpValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createMeasurementApiV1MeasurementsPost>>,
    TError,
    { data: MeasurementCreate },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof createMeasurementApiV1MeasurementsPost>>,
  TError,
  { data: MeasurementCreate },
  TContext
> => {
  const mutationKey = ['createMeasurementApiV1MeasurementsPost']
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createMeasurementApiV1MeasurementsPost>>,
    { data: MeasurementCreate }
  > = (props) => {
    const { data } = props ?? {}

    return createMeasurementApiV1MeasurementsPost(data)
  }

  return { mutationFn, ...mutationOptions }
}

export type CreateMeasurementApiV1MeasurementsPostMutationResult = NonNullable<
  Awaited<ReturnType<typeof createMeasurementApiV1MeasurementsPost>>
>
export type CreateMeasurementApiV1MeasurementsPostMutationBody = MeasurementCreate
export type CreateMeasurementApiV1MeasurementsPostMutationError = HttpValidationError

/**
 * @summary Create Measurement
 */
export const useCreateMeasurementApiV1MeasurementsPost = <
  TError = HttpValidationError,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof createMeasurementApiV1MeasurementsPost>>,
      TError,
      { data: MeasurementCreate },
      TContext
    >
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof createMeasurementApiV1MeasurementsPost>>,
  TError,
  { data: MeasurementCreate },
  TContext
> => {
  const mutationOptions = getCreateMeasurementApiV1MeasurementsPostMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * @summary Get Measurement
 */
export const getMeasurementApiV1MeasurementsMeasurementIdGet = (
  measurementId: string,
  signal?: AbortSignal,
) => {
  return customMutator<MeasurementDetailResponse>({
    url: `/api/v1/measurements/${measurementId}`,
    method: 'GET',
    signal,
  })
}

export const getGetMeasurementApiV1MeasurementsMeasurementIdGetQueryKey = (
  measurementId?: string,
) => {
  return [`/api/v1/measurements/${measurementId}`] as const
}

export const getGetMeasurementApiV1MeasurementsMeasurementIdGetQueryOptions = <
  TData = Awaited<ReturnType<typeof getMeasurementApiV1MeasurementsMeasurementIdGet>>,
  TError = HttpValidationError,
>(
  measurementId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getMeasurementApiV1MeasurementsMeasurementIdGet>>,
        TError,
        TData
      >
    >
  },
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ??
    getGetMeasurementApiV1MeasurementsMeasurementIdGetQueryKey(measurementId)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getMeasurementApiV1MeasurementsMeasurementIdGet>>
  > = ({ signal }) => getMeasurementApiV1MeasurementsMeasurementIdGet(measurementId, signal)

  return { queryKey, queryFn, enabled: !!measurementId, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getMeasurementApiV1MeasurementsMeasurementIdGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetMeasurementApiV1MeasurementsMeasurementIdGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof getMeasurementApiV1MeasurementsMeasurementIdGet>>
>
export type GetMeasurementApiV1MeasurementsMeasurementIdGetQueryError = HttpValidationError

export function useGetMeasurementApiV1MeasurementsMeasurementIdGet<
  TData = Awaited<ReturnType<typeof getMeasurementApiV1MeasurementsMeasurementIdGet>>,
  TError = HttpValidationError,
>(
  measurementId: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getMeasurementApiV1MeasurementsMeasurementIdGet>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeasurementApiV1MeasurementsMeasurementIdGet>>,
          TError,
          Awaited<ReturnType<typeof getMeasurementApiV1MeasurementsMeasurementIdGet>>
        >,
        'initialData'
      >
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetMeasurementApiV1MeasurementsMeasurementIdGet<
  TData = Awaited<ReturnType<typeof getMeasurementApiV1MeasurementsMeasurementIdGet>>,
  TError = HttpValidationError,
>(
  measurementId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getMeasurementApiV1MeasurementsMeasurementIdGet>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeasurementApiV1MeasurementsMeasurementIdGet>>,
          TError,
          Awaited<ReturnType<typeof getMeasurementApiV1MeasurementsMeasurementIdGet>>
        >,
        'initialData'
      >
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetMeasurementApiV1MeasurementsMeasurementIdGet<
  TData = Awaited<ReturnType<typeof getMeasurementApiV1MeasurementsMeasurementIdGet>>,
  TError = HttpValidationError,
>(
  measurementId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getMeasurementApiV1MeasurementsMeasurementIdGet>>,
        TError,
        TData
      >
    >
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Measurement
 */

export function useGetMeasurementApiV1MeasurementsMeasurementIdGet<
  TData = Awaited<ReturnType<typeof getMeasurementApiV1MeasurementsMeasurementIdGet>>,
  TError = HttpValidationError,
>(
  measurementId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getMeasurementApiV1MeasurementsMeasurementIdGet>>,
        TError,
        TData
      >
    >
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetMeasurementApiV1MeasurementsMeasurementIdGetQueryOptions(
    measurementId,
    options,
  )

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Update Measurement
 */
export const updateMeasurementApiV1MeasurementsMeasurementIdPut = (
  measurementId: string,
  measurementUpdate: MeasurementUpdate,
) => {
  return customMutator<MeasurementDetailResponse>({
    url: `/api/v1/measurements/${measurementId}`,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json' },
    data: measurementUpdate,
  })
}

export const getUpdateMeasurementApiV1MeasurementsMeasurementIdPutMutationOptions = <
  TError = HttpValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateMeasurementApiV1MeasurementsMeasurementIdPut>>,
    TError,
    { measurementId: string; data: MeasurementUpdate },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateMeasurementApiV1MeasurementsMeasurementIdPut>>,
  TError,
  { measurementId: string; data: MeasurementUpdate },
  TContext
> => {
  const mutationKey = ['updateMeasurementApiV1MeasurementsMeasurementIdPut']
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateMeasurementApiV1MeasurementsMeasurementIdPut>>,
    { measurementId: string; data: MeasurementUpdate }
  > = (props) => {
    const { measurementId, data } = props ?? {}

    return updateMeasurementApiV1MeasurementsMeasurementIdPut(measurementId, data)
  }

  return { mutationFn, ...mutationOptions }
}

export type UpdateMeasurementApiV1MeasurementsMeasurementIdPutMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateMeasurementApiV1MeasurementsMeasurementIdPut>>
>
export type UpdateMeasurementApiV1MeasurementsMeasurementIdPutMutationBody = MeasurementUpdate
export type UpdateMeasurementApiV1MeasurementsMeasurementIdPutMutationError = HttpValidationError

/**
 * @summary Update Measurement
 */
export const useUpdateMeasurementApiV1MeasurementsMeasurementIdPut = <
  TError = HttpValidationError,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof updateMeasurementApiV1MeasurementsMeasurementIdPut>>,
      TError,
      { measurementId: string; data: MeasurementUpdate },
      TContext
    >
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof updateMeasurementApiV1MeasurementsMeasurementIdPut>>,
  TError,
  { measurementId: string; data: MeasurementUpdate },
  TContext
> => {
  const mutationOptions =
    getUpdateMeasurementApiV1MeasurementsMeasurementIdPutMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * @summary Delete Measurement
 */
export const deleteMeasurementApiV1MeasurementsMeasurementIdDelete = (measurementId: string) => {
  return customMutator<MeasurementDetailResponse>({
    url: `/api/v1/measurements/${measurementId}`,
    method: 'DELETE',
  })
}

export const getDeleteMeasurementApiV1MeasurementsMeasurementIdDeleteMutationOptions = <
  TError = HttpValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteMeasurementApiV1MeasurementsMeasurementIdDelete>>,
    TError,
    { measurementId: string },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteMeasurementApiV1MeasurementsMeasurementIdDelete>>,
  TError,
  { measurementId: string },
  TContext
> => {
  const mutationKey = ['deleteMeasurementApiV1MeasurementsMeasurementIdDelete']
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteMeasurementApiV1MeasurementsMeasurementIdDelete>>,
    { measurementId: string }
  > = (props) => {
    const { measurementId } = props ?? {}

    return deleteMeasurementApiV1MeasurementsMeasurementIdDelete(measurementId)
  }

  return { mutationFn, ...mutationOptions }
}

export type DeleteMeasurementApiV1MeasurementsMeasurementIdDeleteMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteMeasurementApiV1MeasurementsMeasurementIdDelete>>
>

export type DeleteMeasurementApiV1MeasurementsMeasurementIdDeleteMutationError = HttpValidationError

/**
 * @summary Delete Measurement
 */
export const useDeleteMeasurementApiV1MeasurementsMeasurementIdDelete = <
  TError = HttpValidationError,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deleteMeasurementApiV1MeasurementsMeasurementIdDelete>>,
      TError,
      { measurementId: string },
      TContext
    >
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof deleteMeasurementApiV1MeasurementsMeasurementIdDelete>>,
  TError,
  { measurementId: string },
  TContext
> => {
  const mutationOptions =
    getDeleteMeasurementApiV1MeasurementsMeasurementIdDeleteMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * @summary Restore Measurement
 */
export const restoreMeasurementApiV1MeasurementsMeasurementIdRestorePost = (
  measurementId: string,
  signal?: AbortSignal,
) => {
  return customMutator<MeasurementDetailResponse>({
    url: `/api/v1/measurements/${measurementId}/restore`,
    method: 'POST',
    signal,
  })
}

export const getRestoreMeasurementApiV1MeasurementsMeasurementIdRestorePostMutationOptions = <
  TError = HttpValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof restoreMeasurementApiV1MeasurementsMeasurementIdRestorePost>>,
    TError,
    { measurementId: string },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof restoreMeasurementApiV1MeasurementsMeasurementIdRestorePost>>,
  TError,
  { measurementId: string },
  TContext
> => {
  const mutationKey = ['restoreMeasurementApiV1MeasurementsMeasurementIdRestorePost']
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof restoreMeasurementApiV1MeasurementsMeasurementIdRestorePost>>,
    { measurementId: string }
  > = (props) => {
    const { measurementId } = props ?? {}

    return restoreMeasurementApiV1MeasurementsMeasurementIdRestorePost(measurementId)
  }

  return { mutationFn, ...mutationOptions }
}

export type RestoreMeasurementApiV1MeasurementsMeasurementIdRestorePostMutationResult = NonNullable<
  Awaited<ReturnType<typeof restoreMeasurementApiV1MeasurementsMeasurementIdRestorePost>>
>

export type RestoreMeasurementApiV1MeasurementsMeasurementIdRestorePostMutationError =
  HttpValidationError

/**
 * @summary Restore Measurement
 */
export const useRestoreMeasurementApiV1MeasurementsMeasurementIdRestorePost = <
  TError = HttpValidationError,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof restoreMeasurementApiV1MeasurementsMeasurementIdRestorePost>>,
      TError,
      { measurementId: string },
      TContext
    >
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof restoreMeasurementApiV1MeasurementsMeasurementIdRestorePost>>,
  TError,
  { measurementId: string },
  TContext
> => {
  const mutationOptions =
    getRestoreMeasurementApiV1MeasurementsMeasurementIdRestorePostMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * @summary Get Measurements Report
 */
export const getMeasurementsReportApiV1MeasurementsGenerateReportPost = (
  measurementsReportGenerationRequest: MeasurementsReportGenerationRequest,
  signal?: AbortSignal,
) => {
  return fileMutator<Blob>({
    url: `/api/v1/measurements/generate-report`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: measurementsReportGenerationRequest,
    responseType: 'blob',
    signal,
  })
}

export const getGetMeasurementsReportApiV1MeasurementsGenerateReportPostMutationOptions = <
  TError = HttpValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof getMeasurementsReportApiV1MeasurementsGenerateReportPost>>,
    TError,
    { data: MeasurementsReportGenerationRequest },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof getMeasurementsReportApiV1MeasurementsGenerateReportPost>>,
  TError,
  { data: MeasurementsReportGenerationRequest },
  TContext
> => {
  const mutationKey = ['getMeasurementsReportApiV1MeasurementsGenerateReportPost']
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof getMeasurementsReportApiV1MeasurementsGenerateReportPost>>,
    { data: MeasurementsReportGenerationRequest }
  > = (props) => {
    const { data } = props ?? {}

    return getMeasurementsReportApiV1MeasurementsGenerateReportPost(data)
  }

  return { mutationFn, ...mutationOptions }
}

export type GetMeasurementsReportApiV1MeasurementsGenerateReportPostMutationResult = NonNullable<
  Awaited<ReturnType<typeof getMeasurementsReportApiV1MeasurementsGenerateReportPost>>
>
export type GetMeasurementsReportApiV1MeasurementsGenerateReportPostMutationBody =
  MeasurementsReportGenerationRequest
export type GetMeasurementsReportApiV1MeasurementsGenerateReportPostMutationError =
  HttpValidationError

/**
 * @summary Get Measurements Report
 */
export const useGetMeasurementsReportApiV1MeasurementsGenerateReportPost = <
  TError = HttpValidationError,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof getMeasurementsReportApiV1MeasurementsGenerateReportPost>>,
      TError,
      { data: MeasurementsReportGenerationRequest },
      TContext
    >
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof getMeasurementsReportApiV1MeasurementsGenerateReportPost>>,
  TError,
  { data: MeasurementsReportGenerationRequest },
  TContext
> => {
  const mutationOptions =
    getGetMeasurementsReportApiV1MeasurementsGenerateReportPostMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
