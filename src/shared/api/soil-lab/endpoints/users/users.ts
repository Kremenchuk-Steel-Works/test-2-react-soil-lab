/**
 * Generated by orval v7.11.2 🍺
 * Do not edit manually.
 * soil_laboratory
 * OpenAPI spec version: 0.1.0
 */
import {
  useMutation,
  useQuery,
  type DataTag,
  type DefinedInitialDataOptions,
  type DefinedUseQueryResult,
  type MutationFunction,
  type QueryClient,
  type QueryFunction,
  type QueryKey,
  type UndefinedInitialDataOptions,
  type UseMutationOptions,
  type UseMutationResult,
  type UseQueryOptions,
  type UseQueryResult,
} from '@tanstack/react-query'
import { customMutator } from '../../../mutator'
import type {
  GetUserLookupsListApiV1UsersLookupsGetParams,
  GetUsersListApiV1UsersGetParams,
  HttpValidationError,
  UserCreate,
  UserDetailResponse,
  UserListResponse,
  UserLookupResponse,
  UserUpdate,
} from '../../model'

/**
 * @summary Get User Lookups List
 */
export const getUserLookupsListApiV1UsersLookupsGet = (
  params?: GetUserLookupsListApiV1UsersLookupsGetParams,
  signal?: AbortSignal,
) => {
  return customMutator<UserLookupResponse[]>({
    url: `/api/v1/users/lookups`,
    method: 'GET',
    params,
    signal,
  })
}

export const getGetUserLookupsListApiV1UsersLookupsGetQueryKey = (
  params?: GetUserLookupsListApiV1UsersLookupsGetParams,
) => {
  return [`/api/v1/users/lookups`, ...(params ? [params] : [])] as const
}

export const getGetUserLookupsListApiV1UsersLookupsGetQueryOptions = <
  TData = Awaited<ReturnType<typeof getUserLookupsListApiV1UsersLookupsGet>>,
  TError = HttpValidationError,
>(
  params?: GetUserLookupsListApiV1UsersLookupsGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getUserLookupsListApiV1UsersLookupsGet>>,
        TError,
        TData
      >
    >
  },
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getGetUserLookupsListApiV1UsersLookupsGetQueryKey(params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getUserLookupsListApiV1UsersLookupsGet>>
  > = ({ signal }) => getUserLookupsListApiV1UsersLookupsGet(params, signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getUserLookupsListApiV1UsersLookupsGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetUserLookupsListApiV1UsersLookupsGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof getUserLookupsListApiV1UsersLookupsGet>>
>
export type GetUserLookupsListApiV1UsersLookupsGetQueryError = HttpValidationError

export function useGetUserLookupsListApiV1UsersLookupsGet<
  TData = Awaited<ReturnType<typeof getUserLookupsListApiV1UsersLookupsGet>>,
  TError = HttpValidationError,
>(
  params: undefined | GetUserLookupsListApiV1UsersLookupsGetParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getUserLookupsListApiV1UsersLookupsGet>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserLookupsListApiV1UsersLookupsGet>>,
          TError,
          Awaited<ReturnType<typeof getUserLookupsListApiV1UsersLookupsGet>>
        >,
        'initialData'
      >
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetUserLookupsListApiV1UsersLookupsGet<
  TData = Awaited<ReturnType<typeof getUserLookupsListApiV1UsersLookupsGet>>,
  TError = HttpValidationError,
>(
  params?: GetUserLookupsListApiV1UsersLookupsGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getUserLookupsListApiV1UsersLookupsGet>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserLookupsListApiV1UsersLookupsGet>>,
          TError,
          Awaited<ReturnType<typeof getUserLookupsListApiV1UsersLookupsGet>>
        >,
        'initialData'
      >
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetUserLookupsListApiV1UsersLookupsGet<
  TData = Awaited<ReturnType<typeof getUserLookupsListApiV1UsersLookupsGet>>,
  TError = HttpValidationError,
>(
  params?: GetUserLookupsListApiV1UsersLookupsGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getUserLookupsListApiV1UsersLookupsGet>>,
        TError,
        TData
      >
    >
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get User Lookups List
 */

export function useGetUserLookupsListApiV1UsersLookupsGet<
  TData = Awaited<ReturnType<typeof getUserLookupsListApiV1UsersLookupsGet>>,
  TError = HttpValidationError,
>(
  params?: GetUserLookupsListApiV1UsersLookupsGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getUserLookupsListApiV1UsersLookupsGet>>,
        TError,
        TData
      >
    >
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetUserLookupsListApiV1UsersLookupsGetQueryOptions(params, options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Get Users List
 */
export const getUsersListApiV1UsersGet = (
  params?: GetUsersListApiV1UsersGetParams,
  signal?: AbortSignal,
) => {
  return customMutator<UserListResponse>({ url: `/api/v1/users/`, method: 'GET', params, signal })
}

export const getGetUsersListApiV1UsersGetQueryKey = (params?: GetUsersListApiV1UsersGetParams) => {
  return [`/api/v1/users/`, ...(params ? [params] : [])] as const
}

export const getGetUsersListApiV1UsersGetQueryOptions = <
  TData = Awaited<ReturnType<typeof getUsersListApiV1UsersGet>>,
  TError = HttpValidationError,
>(
  params?: GetUsersListApiV1UsersGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getUsersListApiV1UsersGet>>, TError, TData>
    >
  },
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetUsersListApiV1UsersGetQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getUsersListApiV1UsersGet>>> = ({
    signal,
  }) => getUsersListApiV1UsersGet(params, signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getUsersListApiV1UsersGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetUsersListApiV1UsersGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof getUsersListApiV1UsersGet>>
>
export type GetUsersListApiV1UsersGetQueryError = HttpValidationError

export function useGetUsersListApiV1UsersGet<
  TData = Awaited<ReturnType<typeof getUsersListApiV1UsersGet>>,
  TError = HttpValidationError,
>(
  params: undefined | GetUsersListApiV1UsersGetParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getUsersListApiV1UsersGet>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUsersListApiV1UsersGet>>,
          TError,
          Awaited<ReturnType<typeof getUsersListApiV1UsersGet>>
        >,
        'initialData'
      >
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetUsersListApiV1UsersGet<
  TData = Awaited<ReturnType<typeof getUsersListApiV1UsersGet>>,
  TError = HttpValidationError,
>(
  params?: GetUsersListApiV1UsersGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getUsersListApiV1UsersGet>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUsersListApiV1UsersGet>>,
          TError,
          Awaited<ReturnType<typeof getUsersListApiV1UsersGet>>
        >,
        'initialData'
      >
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetUsersListApiV1UsersGet<
  TData = Awaited<ReturnType<typeof getUsersListApiV1UsersGet>>,
  TError = HttpValidationError,
>(
  params?: GetUsersListApiV1UsersGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getUsersListApiV1UsersGet>>, TError, TData>
    >
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Users List
 */

export function useGetUsersListApiV1UsersGet<
  TData = Awaited<ReturnType<typeof getUsersListApiV1UsersGet>>,
  TError = HttpValidationError,
>(
  params?: GetUsersListApiV1UsersGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getUsersListApiV1UsersGet>>, TError, TData>
    >
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetUsersListApiV1UsersGetQueryOptions(params, options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Create User
 */
export const createUserApiV1UsersPost = (userCreate: UserCreate, signal?: AbortSignal) => {
  return customMutator<UserDetailResponse>({
    url: `/api/v1/users/`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: userCreate,
    signal,
  })
}

export const getCreateUserApiV1UsersPostMutationOptions = <
  TError = HttpValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createUserApiV1UsersPost>>,
    TError,
    { data: UserCreate },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof createUserApiV1UsersPost>>,
  TError,
  { data: UserCreate },
  TContext
> => {
  const mutationKey = ['createUserApiV1UsersPost']
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createUserApiV1UsersPost>>,
    { data: UserCreate }
  > = (props) => {
    const { data } = props ?? {}

    return createUserApiV1UsersPost(data)
  }

  return { mutationFn, ...mutationOptions }
}

export type CreateUserApiV1UsersPostMutationResult = NonNullable<
  Awaited<ReturnType<typeof createUserApiV1UsersPost>>
>
export type CreateUserApiV1UsersPostMutationBody = UserCreate
export type CreateUserApiV1UsersPostMutationError = HttpValidationError

/**
 * @summary Create User
 */
export const useCreateUserApiV1UsersPost = <TError = HttpValidationError, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof createUserApiV1UsersPost>>,
      TError,
      { data: UserCreate },
      TContext
    >
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof createUserApiV1UsersPost>>,
  TError,
  { data: UserCreate },
  TContext
> => {
  const mutationOptions = getCreateUserApiV1UsersPostMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * @summary Get Me
 */
export const getMeApiV1UsersMeGet = (signal?: AbortSignal) => {
  return customMutator<UserDetailResponse>({ url: `/api/v1/users/me`, method: 'GET', signal })
}

export const getGetMeApiV1UsersMeGetQueryKey = () => {
  return [`/api/v1/users/me`] as const
}

export const getGetMeApiV1UsersMeGetQueryOptions = <
  TData = Awaited<ReturnType<typeof getMeApiV1UsersMeGet>>,
  TError = unknown,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeApiV1UsersMeGet>>, TError, TData>>
}) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetMeApiV1UsersMeGetQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeApiV1UsersMeGet>>> = ({ signal }) =>
    getMeApiV1UsersMeGet(signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getMeApiV1UsersMeGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetMeApiV1UsersMeGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof getMeApiV1UsersMeGet>>
>
export type GetMeApiV1UsersMeGetQueryError = unknown

export function useGetMeApiV1UsersMeGet<
  TData = Awaited<ReturnType<typeof getMeApiV1UsersMeGet>>,
  TError = unknown,
>(
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getMeApiV1UsersMeGet>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeApiV1UsersMeGet>>,
          TError,
          Awaited<ReturnType<typeof getMeApiV1UsersMeGet>>
        >,
        'initialData'
      >
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetMeApiV1UsersMeGet<
  TData = Awaited<ReturnType<typeof getMeApiV1UsersMeGet>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getMeApiV1UsersMeGet>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeApiV1UsersMeGet>>,
          TError,
          Awaited<ReturnType<typeof getMeApiV1UsersMeGet>>
        >,
        'initialData'
      >
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetMeApiV1UsersMeGet<
  TData = Awaited<ReturnType<typeof getMeApiV1UsersMeGet>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getMeApiV1UsersMeGet>>, TError, TData>
    >
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Me
 */

export function useGetMeApiV1UsersMeGet<
  TData = Awaited<ReturnType<typeof getMeApiV1UsersMeGet>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getMeApiV1UsersMeGet>>, TError, TData>
    >
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetMeApiV1UsersMeGetQueryOptions(options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Get User
 */
export const getUserApiV1UsersUserIdGet = (userId: string, signal?: AbortSignal) => {
  return customMutator<UserDetailResponse>({
    url: `/api/v1/users/${userId}`,
    method: 'GET',
    signal,
  })
}

export const getGetUserApiV1UsersUserIdGetQueryKey = (userId?: string) => {
  return [`/api/v1/users/${userId}`] as const
}

export const getGetUserApiV1UsersUserIdGetQueryOptions = <
  TData = Awaited<ReturnType<typeof getUserApiV1UsersUserIdGet>>,
  TError = HttpValidationError,
>(
  userId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getUserApiV1UsersUserIdGet>>, TError, TData>
    >
  },
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetUserApiV1UsersUserIdGetQueryKey(userId)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserApiV1UsersUserIdGet>>> = ({
    signal,
  }) => getUserApiV1UsersUserIdGet(userId, signal)

  return { queryKey, queryFn, enabled: !!userId, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getUserApiV1UsersUserIdGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetUserApiV1UsersUserIdGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof getUserApiV1UsersUserIdGet>>
>
export type GetUserApiV1UsersUserIdGetQueryError = HttpValidationError

export function useGetUserApiV1UsersUserIdGet<
  TData = Awaited<ReturnType<typeof getUserApiV1UsersUserIdGet>>,
  TError = HttpValidationError,
>(
  userId: string,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getUserApiV1UsersUserIdGet>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserApiV1UsersUserIdGet>>,
          TError,
          Awaited<ReturnType<typeof getUserApiV1UsersUserIdGet>>
        >,
        'initialData'
      >
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetUserApiV1UsersUserIdGet<
  TData = Awaited<ReturnType<typeof getUserApiV1UsersUserIdGet>>,
  TError = HttpValidationError,
>(
  userId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getUserApiV1UsersUserIdGet>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserApiV1UsersUserIdGet>>,
          TError,
          Awaited<ReturnType<typeof getUserApiV1UsersUserIdGet>>
        >,
        'initialData'
      >
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetUserApiV1UsersUserIdGet<
  TData = Awaited<ReturnType<typeof getUserApiV1UsersUserIdGet>>,
  TError = HttpValidationError,
>(
  userId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getUserApiV1UsersUserIdGet>>, TError, TData>
    >
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get User
 */

export function useGetUserApiV1UsersUserIdGet<
  TData = Awaited<ReturnType<typeof getUserApiV1UsersUserIdGet>>,
  TError = HttpValidationError,
>(
  userId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getUserApiV1UsersUserIdGet>>, TError, TData>
    >
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetUserApiV1UsersUserIdGetQueryOptions(userId, options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Update User
 */
export const updateUserApiV1UsersUserIdPut = (userId: string, userUpdate: UserUpdate) => {
  return customMutator<UserDetailResponse>({
    url: `/api/v1/users/${userId}`,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json' },
    data: userUpdate,
  })
}

export const getUpdateUserApiV1UsersUserIdPutMutationOptions = <
  TError = HttpValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateUserApiV1UsersUserIdPut>>,
    TError,
    { userId: string; data: UserUpdate },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateUserApiV1UsersUserIdPut>>,
  TError,
  { userId: string; data: UserUpdate },
  TContext
> => {
  const mutationKey = ['updateUserApiV1UsersUserIdPut']
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateUserApiV1UsersUserIdPut>>,
    { userId: string; data: UserUpdate }
  > = (props) => {
    const { userId, data } = props ?? {}

    return updateUserApiV1UsersUserIdPut(userId, data)
  }

  return { mutationFn, ...mutationOptions }
}

export type UpdateUserApiV1UsersUserIdPutMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateUserApiV1UsersUserIdPut>>
>
export type UpdateUserApiV1UsersUserIdPutMutationBody = UserUpdate
export type UpdateUserApiV1UsersUserIdPutMutationError = HttpValidationError

/**
 * @summary Update User
 */
export const useUpdateUserApiV1UsersUserIdPut = <TError = HttpValidationError, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof updateUserApiV1UsersUserIdPut>>,
      TError,
      { userId: string; data: UserUpdate },
      TContext
    >
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof updateUserApiV1UsersUserIdPut>>,
  TError,
  { userId: string; data: UserUpdate },
  TContext
> => {
  const mutationOptions = getUpdateUserApiV1UsersUserIdPutMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * @summary Delete User
 */
export const deleteUserApiV1UsersUserIdDelete = (userId: string) => {
  return customMutator<UserDetailResponse>({ url: `/api/v1/users/${userId}`, method: 'DELETE' })
}

export const getDeleteUserApiV1UsersUserIdDeleteMutationOptions = <
  TError = HttpValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteUserApiV1UsersUserIdDelete>>,
    TError,
    { userId: string },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteUserApiV1UsersUserIdDelete>>,
  TError,
  { userId: string },
  TContext
> => {
  const mutationKey = ['deleteUserApiV1UsersUserIdDelete']
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteUserApiV1UsersUserIdDelete>>,
    { userId: string }
  > = (props) => {
    const { userId } = props ?? {}

    return deleteUserApiV1UsersUserIdDelete(userId)
  }

  return { mutationFn, ...mutationOptions }
}

export type DeleteUserApiV1UsersUserIdDeleteMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteUserApiV1UsersUserIdDelete>>
>

export type DeleteUserApiV1UsersUserIdDeleteMutationError = HttpValidationError

/**
 * @summary Delete User
 */
export const useDeleteUserApiV1UsersUserIdDelete = <
  TError = HttpValidationError,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deleteUserApiV1UsersUserIdDelete>>,
      TError,
      { userId: string },
      TContext
    >
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof deleteUserApiV1UsersUserIdDelete>>,
  TError,
  { userId: string },
  TContext
> => {
  const mutationOptions = getDeleteUserApiV1UsersUserIdDeleteMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * @summary Restore User
 */
export const restoreUserApiV1UsersUserIdRestorePost = (userId: string, signal?: AbortSignal) => {
  return customMutator<UserDetailResponse>({
    url: `/api/v1/users/${userId}/restore`,
    method: 'POST',
    signal,
  })
}

export const getRestoreUserApiV1UsersUserIdRestorePostMutationOptions = <
  TError = HttpValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof restoreUserApiV1UsersUserIdRestorePost>>,
    TError,
    { userId: string },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof restoreUserApiV1UsersUserIdRestorePost>>,
  TError,
  { userId: string },
  TContext
> => {
  const mutationKey = ['restoreUserApiV1UsersUserIdRestorePost']
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof restoreUserApiV1UsersUserIdRestorePost>>,
    { userId: string }
  > = (props) => {
    const { userId } = props ?? {}

    return restoreUserApiV1UsersUserIdRestorePost(userId)
  }

  return { mutationFn, ...mutationOptions }
}

export type RestoreUserApiV1UsersUserIdRestorePostMutationResult = NonNullable<
  Awaited<ReturnType<typeof restoreUserApiV1UsersUserIdRestorePost>>
>

export type RestoreUserApiV1UsersUserIdRestorePostMutationError = HttpValidationError

/**
 * @summary Restore User
 */
export const useRestoreUserApiV1UsersUserIdRestorePost = <
  TError = HttpValidationError,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof restoreUserApiV1UsersUserIdRestorePost>>,
      TError,
      { userId: string },
      TContext
    >
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof restoreUserApiV1UsersUserIdRestorePost>>,
  TError,
  { userId: string },
  TContext
> => {
  const mutationOptions = getRestoreUserApiV1UsersUserIdRestorePostMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
