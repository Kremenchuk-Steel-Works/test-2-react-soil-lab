/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * soil_laboratory
 * OpenAPI spec version: 0.1.0
 */
import { faker } from '@faker-js/faker'
import { delay, http, HttpResponse } from 'msw'
import type { TokenPairResponse, TokenRefreshResponse } from '../../model'

export const getLoginApiV1AuthLoginPostResponseMock = (
  overrideResponse: Partial<TokenPairResponse> = {},
): TokenPairResponse => ({
  accessToken: faker.string.alpha({ length: { min: 10, max: 20 } }),
  refreshToken: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.string.alpha({ length: { min: 10, max: 20 } }), null]),
    undefined,
  ]),
  tokenType: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    undefined,
  ]),
  ...overrideResponse,
})

export const getRefreshAccessTokenApiV1AuthRefreshPostResponseMock = (
  overrideResponse: Partial<TokenRefreshResponse> = {},
): TokenRefreshResponse => ({
  accessToken: faker.string.alpha({ length: { min: 10, max: 20 } }),
  tokenType: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    undefined,
  ]),
  ...overrideResponse,
})

export const getLoginApiV1AuthLoginPostMockHandler = (
  overrideResponse?:
    | TokenPairResponse
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<TokenPairResponse> | TokenPairResponse),
) => {
  return http.post('*/api/v1/auth/login', async (info) => {
    await delay(1000)

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getLoginApiV1AuthLoginPostResponseMock(),
      ),
      { status: 201, headers: { 'Content-Type': 'application/json' } },
    )
  })
}

export const getRefreshAccessTokenApiV1AuthRefreshPostMockHandler = (
  overrideResponse?:
    | TokenRefreshResponse
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<TokenRefreshResponse> | TokenRefreshResponse),
) => {
  return http.post('*/api/v1/auth/refresh', async (info) => {
    await delay(1000)

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getRefreshAccessTokenApiV1AuthRefreshPostResponseMock(),
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } },
    )
  })
}

export const getLogoutApiV1AuthLogoutPostMockHandler = (
  overrideResponse?:
    | null
    | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<null> | null),
) => {
  return http.post('*/api/v1/auth/logout', async (info) => {
    await delay(1000)
    if (typeof overrideResponse === 'function') {
      await overrideResponse(info)
    }
    return new HttpResponse(null, { status: 204 })
  })
}
export const getAuthMock = () => [
  getLoginApiV1AuthLoginPostMockHandler(),
  getRefreshAccessTokenApiV1AuthRefreshPostMockHandler(),
  getLogoutApiV1AuthLogoutPostMockHandler(),
]
