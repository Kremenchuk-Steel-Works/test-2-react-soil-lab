/**
 * Generated by orval v7.11.2 🍺
 * Do not edit manually.
 * soil_laboratory
 * OpenAPI spec version: 0.1.0
 */
import {
  useMutation,
  useQuery,
  type DataTag,
  type DefinedInitialDataOptions,
  type DefinedUseQueryResult,
  type MutationFunction,
  type QueryClient,
  type QueryFunction,
  type QueryKey,
  type UndefinedInitialDataOptions,
  type UseMutationOptions,
  type UseMutationResult,
  type UseQueryOptions,
  type UseQueryResult,
} from '@tanstack/react-query'
import { customMutator, fileMutator } from '../../../mutator'
import type {
  GetSamplesListApiV1SamplesGetParams,
  HTTPValidationError,
  SampleCreate,
  SampleDetailResponse,
  SamplePaginatedListResponse,
  SamplesReportGenerationRequest,
} from '../../model'

/**
 * @summary Get Samples List
 */
export const getSamplesListApiV1SamplesGet = (
  params?: GetSamplesListApiV1SamplesGetParams,
  signal?: AbortSignal,
) => {
  return customMutator<SamplePaginatedListResponse>({
    url: `/api/v1/samples/`,
    method: 'GET',
    params,
    signal,
  })
}

export const getGetSamplesListApiV1SamplesGetQueryKey = (
  params?: GetSamplesListApiV1SamplesGetParams,
) => {
  return [`/api/v1/samples/`, ...(params ? [params] : [])] as const
}

export const getGetSamplesListApiV1SamplesGetQueryOptions = <
  TData = Awaited<ReturnType<typeof getSamplesListApiV1SamplesGet>>,
  TError = HTTPValidationError,
>(
  params?: GetSamplesListApiV1SamplesGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getSamplesListApiV1SamplesGet>>, TError, TData>
    >
  },
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetSamplesListApiV1SamplesGetQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getSamplesListApiV1SamplesGet>>> = ({
    signal,
  }) => getSamplesListApiV1SamplesGet(params, signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getSamplesListApiV1SamplesGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetSamplesListApiV1SamplesGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof getSamplesListApiV1SamplesGet>>
>
export type GetSamplesListApiV1SamplesGetQueryError = HTTPValidationError

export function useGetSamplesListApiV1SamplesGet<
  TData = Awaited<ReturnType<typeof getSamplesListApiV1SamplesGet>>,
  TError = HTTPValidationError,
>(
  params: undefined | GetSamplesListApiV1SamplesGetParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getSamplesListApiV1SamplesGet>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSamplesListApiV1SamplesGet>>,
          TError,
          Awaited<ReturnType<typeof getSamplesListApiV1SamplesGet>>
        >,
        'initialData'
      >
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetSamplesListApiV1SamplesGet<
  TData = Awaited<ReturnType<typeof getSamplesListApiV1SamplesGet>>,
  TError = HTTPValidationError,
>(
  params?: GetSamplesListApiV1SamplesGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getSamplesListApiV1SamplesGet>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSamplesListApiV1SamplesGet>>,
          TError,
          Awaited<ReturnType<typeof getSamplesListApiV1SamplesGet>>
        >,
        'initialData'
      >
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetSamplesListApiV1SamplesGet<
  TData = Awaited<ReturnType<typeof getSamplesListApiV1SamplesGet>>,
  TError = HTTPValidationError,
>(
  params?: GetSamplesListApiV1SamplesGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getSamplesListApiV1SamplesGet>>, TError, TData>
    >
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Samples List
 */

export function useGetSamplesListApiV1SamplesGet<
  TData = Awaited<ReturnType<typeof getSamplesListApiV1SamplesGet>>,
  TError = HTTPValidationError,
>(
  params?: GetSamplesListApiV1SamplesGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getSamplesListApiV1SamplesGet>>, TError, TData>
    >
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetSamplesListApiV1SamplesGetQueryOptions(params, options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Create Sample
 */
export const createSampleApiV1SamplesPost = (sampleCreate: SampleCreate, signal?: AbortSignal) => {
  return customMutator<SampleDetailResponse>({
    url: `/api/v1/samples/`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: sampleCreate,
    signal,
  })
}

export const getCreateSampleApiV1SamplesPostMutationOptions = <
  TError = HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createSampleApiV1SamplesPost>>,
    TError,
    { data: SampleCreate },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof createSampleApiV1SamplesPost>>,
  TError,
  { data: SampleCreate },
  TContext
> => {
  const mutationKey = ['createSampleApiV1SamplesPost']
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createSampleApiV1SamplesPost>>,
    { data: SampleCreate }
  > = (props) => {
    const { data } = props ?? {}

    return createSampleApiV1SamplesPost(data)
  }

  return { mutationFn, ...mutationOptions }
}

export type CreateSampleApiV1SamplesPostMutationResult = NonNullable<
  Awaited<ReturnType<typeof createSampleApiV1SamplesPost>>
>
export type CreateSampleApiV1SamplesPostMutationBody = SampleCreate
export type CreateSampleApiV1SamplesPostMutationError = HTTPValidationError

/**
 * @summary Create Sample
 */
export const useCreateSampleApiV1SamplesPost = <TError = HTTPValidationError, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof createSampleApiV1SamplesPost>>,
      TError,
      { data: SampleCreate },
      TContext
    >
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof createSampleApiV1SamplesPost>>,
  TError,
  { data: SampleCreate },
  TContext
> => {
  const mutationOptions = getCreateSampleApiV1SamplesPostMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * @summary Get Sample
 */
export const getSampleApiV1SamplesSampleIdGet = (sampleId: string, signal?: AbortSignal) => {
  return customMutator<SampleDetailResponse>({
    url: `/api/v1/samples/${sampleId}`,
    method: 'GET',
    signal,
  })
}

export const getGetSampleApiV1SamplesSampleIdGetQueryKey = (sampleId?: string) => {
  return [`/api/v1/samples/${sampleId}`] as const
}

export const getGetSampleApiV1SamplesSampleIdGetQueryOptions = <
  TData = Awaited<ReturnType<typeof getSampleApiV1SamplesSampleIdGet>>,
  TError = HTTPValidationError,
>(
  sampleId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getSampleApiV1SamplesSampleIdGet>>, TError, TData>
    >
  },
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetSampleApiV1SamplesSampleIdGetQueryKey(sampleId)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getSampleApiV1SamplesSampleIdGet>>> = ({
    signal,
  }) => getSampleApiV1SamplesSampleIdGet(sampleId, signal)

  return { queryKey, queryFn, enabled: !!sampleId, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getSampleApiV1SamplesSampleIdGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetSampleApiV1SamplesSampleIdGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof getSampleApiV1SamplesSampleIdGet>>
>
export type GetSampleApiV1SamplesSampleIdGetQueryError = HTTPValidationError

export function useGetSampleApiV1SamplesSampleIdGet<
  TData = Awaited<ReturnType<typeof getSampleApiV1SamplesSampleIdGet>>,
  TError = HTTPValidationError,
>(
  sampleId: string,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getSampleApiV1SamplesSampleIdGet>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSampleApiV1SamplesSampleIdGet>>,
          TError,
          Awaited<ReturnType<typeof getSampleApiV1SamplesSampleIdGet>>
        >,
        'initialData'
      >
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetSampleApiV1SamplesSampleIdGet<
  TData = Awaited<ReturnType<typeof getSampleApiV1SamplesSampleIdGet>>,
  TError = HTTPValidationError,
>(
  sampleId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getSampleApiV1SamplesSampleIdGet>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSampleApiV1SamplesSampleIdGet>>,
          TError,
          Awaited<ReturnType<typeof getSampleApiV1SamplesSampleIdGet>>
        >,
        'initialData'
      >
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetSampleApiV1SamplesSampleIdGet<
  TData = Awaited<ReturnType<typeof getSampleApiV1SamplesSampleIdGet>>,
  TError = HTTPValidationError,
>(
  sampleId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getSampleApiV1SamplesSampleIdGet>>, TError, TData>
    >
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Sample
 */

export function useGetSampleApiV1SamplesSampleIdGet<
  TData = Awaited<ReturnType<typeof getSampleApiV1SamplesSampleIdGet>>,
  TError = HTTPValidationError,
>(
  sampleId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getSampleApiV1SamplesSampleIdGet>>, TError, TData>
    >
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetSampleApiV1SamplesSampleIdGetQueryOptions(sampleId, options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Delete Sample
 */
export const deleteSampleApiV1SamplesSampleIdDelete = (sampleId: string) => {
  return customMutator<SampleDetailResponse>({
    url: `/api/v1/samples/${sampleId}`,
    method: 'DELETE',
  })
}

export const getDeleteSampleApiV1SamplesSampleIdDeleteMutationOptions = <
  TError = HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteSampleApiV1SamplesSampleIdDelete>>,
    TError,
    { sampleId: string },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteSampleApiV1SamplesSampleIdDelete>>,
  TError,
  { sampleId: string },
  TContext
> => {
  const mutationKey = ['deleteSampleApiV1SamplesSampleIdDelete']
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteSampleApiV1SamplesSampleIdDelete>>,
    { sampleId: string }
  > = (props) => {
    const { sampleId } = props ?? {}

    return deleteSampleApiV1SamplesSampleIdDelete(sampleId)
  }

  return { mutationFn, ...mutationOptions }
}

export type DeleteSampleApiV1SamplesSampleIdDeleteMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteSampleApiV1SamplesSampleIdDelete>>
>

export type DeleteSampleApiV1SamplesSampleIdDeleteMutationError = HTTPValidationError

/**
 * @summary Delete Sample
 */
export const useDeleteSampleApiV1SamplesSampleIdDelete = <
  TError = HTTPValidationError,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deleteSampleApiV1SamplesSampleIdDelete>>,
      TError,
      { sampleId: string },
      TContext
    >
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof deleteSampleApiV1SamplesSampleIdDelete>>,
  TError,
  { sampleId: string },
  TContext
> => {
  const mutationOptions = getDeleteSampleApiV1SamplesSampleIdDeleteMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * @summary Restore Sample
 */
export const restoreSampleApiV1SamplesSampleIdRestorePost = (
  sampleId: string,
  signal?: AbortSignal,
) => {
  return customMutator<SampleDetailResponse>({
    url: `/api/v1/samples/${sampleId}/restore`,
    method: 'POST',
    signal,
  })
}

export const getRestoreSampleApiV1SamplesSampleIdRestorePostMutationOptions = <
  TError = HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof restoreSampleApiV1SamplesSampleIdRestorePost>>,
    TError,
    { sampleId: string },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof restoreSampleApiV1SamplesSampleIdRestorePost>>,
  TError,
  { sampleId: string },
  TContext
> => {
  const mutationKey = ['restoreSampleApiV1SamplesSampleIdRestorePost']
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof restoreSampleApiV1SamplesSampleIdRestorePost>>,
    { sampleId: string }
  > = (props) => {
    const { sampleId } = props ?? {}

    return restoreSampleApiV1SamplesSampleIdRestorePost(sampleId)
  }

  return { mutationFn, ...mutationOptions }
}

export type RestoreSampleApiV1SamplesSampleIdRestorePostMutationResult = NonNullable<
  Awaited<ReturnType<typeof restoreSampleApiV1SamplesSampleIdRestorePost>>
>

export type RestoreSampleApiV1SamplesSampleIdRestorePostMutationError = HTTPValidationError

/**
 * @summary Restore Sample
 */
export const useRestoreSampleApiV1SamplesSampleIdRestorePost = <
  TError = HTTPValidationError,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof restoreSampleApiV1SamplesSampleIdRestorePost>>,
      TError,
      { sampleId: string },
      TContext
    >
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof restoreSampleApiV1SamplesSampleIdRestorePost>>,
  TError,
  { sampleId: string },
  TContext
> => {
  const mutationOptions = getRestoreSampleApiV1SamplesSampleIdRestorePostMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * @summary Get Samples Report
 */
export const getSamplesReportApiV1SamplesGenerateReportPost = (
  samplesReportGenerationRequest: SamplesReportGenerationRequest,
  signal?: AbortSignal,
) => {
  return fileMutator<Blob>({
    url: `/api/v1/samples/generate-report`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: samplesReportGenerationRequest,
    responseType: 'blob',
    signal,
  })
}

export const getGetSamplesReportApiV1SamplesGenerateReportPostMutationOptions = <
  TError = HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof getSamplesReportApiV1SamplesGenerateReportPost>>,
    TError,
    { data: SamplesReportGenerationRequest },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof getSamplesReportApiV1SamplesGenerateReportPost>>,
  TError,
  { data: SamplesReportGenerationRequest },
  TContext
> => {
  const mutationKey = ['getSamplesReportApiV1SamplesGenerateReportPost']
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof getSamplesReportApiV1SamplesGenerateReportPost>>,
    { data: SamplesReportGenerationRequest }
  > = (props) => {
    const { data } = props ?? {}

    return getSamplesReportApiV1SamplesGenerateReportPost(data)
  }

  return { mutationFn, ...mutationOptions }
}

export type GetSamplesReportApiV1SamplesGenerateReportPostMutationResult = NonNullable<
  Awaited<ReturnType<typeof getSamplesReportApiV1SamplesGenerateReportPost>>
>
export type GetSamplesReportApiV1SamplesGenerateReportPostMutationBody =
  SamplesReportGenerationRequest
export type GetSamplesReportApiV1SamplesGenerateReportPostMutationError = HTTPValidationError

/**
 * @summary Get Samples Report
 */
export const useGetSamplesReportApiV1SamplesGenerateReportPost = <
  TError = HTTPValidationError,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof getSamplesReportApiV1SamplesGenerateReportPost>>,
      TError,
      { data: SamplesReportGenerationRequest },
      TContext
    >
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof getSamplesReportApiV1SamplesGenerateReportPost>>,
  TError,
  { data: SamplesReportGenerationRequest },
  TContext
> => {
  const mutationOptions = getGetSamplesReportApiV1SamplesGenerateReportPostMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
