/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * soil_laboratory
 * OpenAPI spec version: 0.1.0
 */
import { faker } from '@faker-js/faker'
import { delay, http, HttpResponse } from 'msw'
import {
  TestStatus,
  TestType,
  type SampleDetailResponse,
  type SampleListResponse,
} from '../../model'

export const getGetSamplesListApiV1SamplesGetResponseMock = (
  overrideResponse: Partial<SampleListResponse> = {},
): SampleListResponse => ({
  data: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
    deletedAt: faker.helpers.arrayElement([
      faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]),
      undefined,
    ]),
    createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
    createdById: faker.helpers.arrayElement([
      faker.helpers.arrayElement([faker.string.uuid(), null]),
      undefined,
    ]),
    updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
    updatedById: faker.helpers.arrayElement([
      faker.helpers.arrayElement([faker.string.uuid(), null]),
      undefined,
    ]),
    id: faker.string.uuid(),
    moldingSandRecipe: faker.string.alpha({ length: { min: 10, max: 20 } }),
    receivedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
    tests: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
      () => ({
        id: faker.string.uuid(),
        type: faker.helpers.arrayElement(Object.values(TestType)),
        meanMeasurement: faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
        status: faker.helpers.arrayElement(Object.values(TestStatus)),
      }),
    ),
    isDeleted: faker.datatype.boolean(),
  })),
  page: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
  totalPages: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
  totalItems: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
  ...overrideResponse,
})

export const getCreateSampleApiV1SamplesPostResponseMock = (
  overrideResponse: Partial<SampleDetailResponse> = {},
): SampleDetailResponse => ({
  deletedAt: faker.helpers.arrayElement([
    faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]),
    undefined,
  ]),
  createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  createdById: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.string.uuid(), null]),
    undefined,
  ]),
  updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  updatedById: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.string.uuid(), null]),
    undefined,
  ]),
  id: faker.string.uuid(),
  moldingSandRecipe: faker.string.alpha({ length: { min: 10, max: 20 } }),
  receivedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  tests: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
    id: faker.string.uuid(),
    type: faker.helpers.arrayElement(Object.values(TestType)),
    meanMeasurement: faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
    status: faker.helpers.arrayElement(Object.values(TestStatus)),
  })),
  note: faker.helpers.arrayElement([faker.string.alpha({ length: { min: 10, max: 20 } }), null]),
  isDeleted: faker.datatype.boolean(),
  ...overrideResponse,
})

export const getGetSampleApiV1SamplesSampleIdGetResponseMock = (
  overrideResponse: Partial<SampleDetailResponse> = {},
): SampleDetailResponse => ({
  deletedAt: faker.helpers.arrayElement([
    faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]),
    undefined,
  ]),
  createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  createdById: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.string.uuid(), null]),
    undefined,
  ]),
  updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  updatedById: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.string.uuid(), null]),
    undefined,
  ]),
  id: faker.string.uuid(),
  moldingSandRecipe: faker.string.alpha({ length: { min: 10, max: 20 } }),
  receivedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  tests: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
    id: faker.string.uuid(),
    type: faker.helpers.arrayElement(Object.values(TestType)),
    meanMeasurement: faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
    status: faker.helpers.arrayElement(Object.values(TestStatus)),
  })),
  note: faker.helpers.arrayElement([faker.string.alpha({ length: { min: 10, max: 20 } }), null]),
  isDeleted: faker.datatype.boolean(),
  ...overrideResponse,
})

export const getDeleteSampleApiV1SamplesSampleIdDeleteResponseMock = (
  overrideResponse: Partial<SampleDetailResponse> = {},
): SampleDetailResponse => ({
  deletedAt: faker.helpers.arrayElement([
    faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]),
    undefined,
  ]),
  createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  createdById: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.string.uuid(), null]),
    undefined,
  ]),
  updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  updatedById: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.string.uuid(), null]),
    undefined,
  ]),
  id: faker.string.uuid(),
  moldingSandRecipe: faker.string.alpha({ length: { min: 10, max: 20 } }),
  receivedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  tests: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
    id: faker.string.uuid(),
    type: faker.helpers.arrayElement(Object.values(TestType)),
    meanMeasurement: faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
    status: faker.helpers.arrayElement(Object.values(TestStatus)),
  })),
  note: faker.helpers.arrayElement([faker.string.alpha({ length: { min: 10, max: 20 } }), null]),
  isDeleted: faker.datatype.boolean(),
  ...overrideResponse,
})

export const getRestoreSampleApiV1SamplesSampleIdRestorePostResponseMock = (
  overrideResponse: Partial<SampleDetailResponse> = {},
): SampleDetailResponse => ({
  deletedAt: faker.helpers.arrayElement([
    faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]),
    undefined,
  ]),
  createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  createdById: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.string.uuid(), null]),
    undefined,
  ]),
  updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  updatedById: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.string.uuid(), null]),
    undefined,
  ]),
  id: faker.string.uuid(),
  moldingSandRecipe: faker.string.alpha({ length: { min: 10, max: 20 } }),
  receivedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  tests: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
    id: faker.string.uuid(),
    type: faker.helpers.arrayElement(Object.values(TestType)),
    meanMeasurement: faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
    status: faker.helpers.arrayElement(Object.values(TestStatus)),
  })),
  note: faker.helpers.arrayElement([faker.string.alpha({ length: { min: 10, max: 20 } }), null]),
  isDeleted: faker.datatype.boolean(),
  ...overrideResponse,
})

export const getGetSamplesReportApiV1SamplesGenerateReportPostResponseMock = (): Blob =>
  new Blob(faker.helpers.arrayElements(faker.word.words(10).split(' ')))

export const getGetSamplesListApiV1SamplesGetMockHandler = (
  overrideResponse?:
    | SampleListResponse
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<SampleListResponse> | SampleListResponse),
) => {
  return http.get('*/api/v1/samples/', async (info) => {
    await delay(1000)

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getGetSamplesListApiV1SamplesGetResponseMock(),
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } },
    )
  })
}

export const getCreateSampleApiV1SamplesPostMockHandler = (
  overrideResponse?:
    | SampleDetailResponse
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<SampleDetailResponse> | SampleDetailResponse),
) => {
  return http.post('*/api/v1/samples/', async (info) => {
    await delay(1000)

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getCreateSampleApiV1SamplesPostResponseMock(),
      ),
      { status: 201, headers: { 'Content-Type': 'application/json' } },
    )
  })
}

export const getGetSampleApiV1SamplesSampleIdGetMockHandler = (
  overrideResponse?:
    | SampleDetailResponse
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<SampleDetailResponse> | SampleDetailResponse),
) => {
  return http.get('*/api/v1/samples/:sampleId', async (info) => {
    await delay(1000)

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getGetSampleApiV1SamplesSampleIdGetResponseMock(),
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } },
    )
  })
}

export const getDeleteSampleApiV1SamplesSampleIdDeleteMockHandler = (
  overrideResponse?:
    | SampleDetailResponse
    | ((
        info: Parameters<Parameters<typeof http.delete>[1]>[0],
      ) => Promise<SampleDetailResponse> | SampleDetailResponse),
) => {
  return http.delete('*/api/v1/samples/:sampleId', async (info) => {
    await delay(1000)

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getDeleteSampleApiV1SamplesSampleIdDeleteResponseMock(),
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } },
    )
  })
}

export const getRestoreSampleApiV1SamplesSampleIdRestorePostMockHandler = (
  overrideResponse?:
    | SampleDetailResponse
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<SampleDetailResponse> | SampleDetailResponse),
) => {
  return http.post('*/api/v1/samples/:sampleId/restore', async (info) => {
    await delay(1000)

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getRestoreSampleApiV1SamplesSampleIdRestorePostResponseMock(),
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } },
    )
  })
}

export const getGetSamplesReportApiV1SamplesGenerateReportPostMockHandler = (
  overrideResponse?:
    | Blob
    | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<Blob> | Blob),
) => {
  return http.post('*/api/v1/samples/generate-report', async (info) => {
    await delay(1000)

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getGetSamplesReportApiV1SamplesGenerateReportPostResponseMock(),
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } },
    )
  })
}
export const getSamplesMock = () => [
  getGetSamplesListApiV1SamplesGetMockHandler(),
  getCreateSampleApiV1SamplesPostMockHandler(),
  getGetSampleApiV1SamplesSampleIdGetMockHandler(),
  getDeleteSampleApiV1SamplesSampleIdDeleteMockHandler(),
  getRestoreSampleApiV1SamplesSampleIdRestorePostMockHandler(),
  getGetSamplesReportApiV1SamplesGenerateReportPostMockHandler(),
]
