/**
 * Generated by orval v7.11.2 🍺
 * Do not edit manually.
 * soil_laboratory
 * OpenAPI spec version: 0.1.0
 */
import {
  useMutation,
  useQuery,
  type DataTag,
  type DefinedInitialDataOptions,
  type DefinedUseQueryResult,
  type MutationFunction,
  type QueryClient,
  type QueryFunction,
  type QueryKey,
  type UndefinedInitialDataOptions,
  type UseMutationOptions,
  type UseMutationResult,
  type UseQueryOptions,
  type UseQueryResult,
} from '@tanstack/react-query'
import { customMutator } from '../../../mutator'
import type {
  GetTestsListApiV1TestsGetParams,
  HTTPValidationError,
  TestCreate,
  TestDetailResponse,
  TestListResponse,
  TestShortResponse,
} from '../../model'

/**
 * @summary Get Tests List
 */
export const getTestsListApiV1TestsGet = (
  params?: GetTestsListApiV1TestsGetParams,
  signal?: AbortSignal,
) => {
  return customMutator<TestListResponse>({ url: `/api/v1/tests/`, method: 'GET', params, signal })
}

export const getGetTestsListApiV1TestsGetQueryKey = (params?: GetTestsListApiV1TestsGetParams) => {
  return [`/api/v1/tests/`, ...(params ? [params] : [])] as const
}

export const getGetTestsListApiV1TestsGetQueryOptions = <
  TData = Awaited<ReturnType<typeof getTestsListApiV1TestsGet>>,
  TError = HTTPValidationError,
>(
  params?: GetTestsListApiV1TestsGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getTestsListApiV1TestsGet>>, TError, TData>
    >
  },
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetTestsListApiV1TestsGetQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getTestsListApiV1TestsGet>>> = ({
    signal,
  }) => getTestsListApiV1TestsGet(params, signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getTestsListApiV1TestsGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetTestsListApiV1TestsGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof getTestsListApiV1TestsGet>>
>
export type GetTestsListApiV1TestsGetQueryError = HTTPValidationError

export function useGetTestsListApiV1TestsGet<
  TData = Awaited<ReturnType<typeof getTestsListApiV1TestsGet>>,
  TError = HTTPValidationError,
>(
  params: undefined | GetTestsListApiV1TestsGetParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getTestsListApiV1TestsGet>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTestsListApiV1TestsGet>>,
          TError,
          Awaited<ReturnType<typeof getTestsListApiV1TestsGet>>
        >,
        'initialData'
      >
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetTestsListApiV1TestsGet<
  TData = Awaited<ReturnType<typeof getTestsListApiV1TestsGet>>,
  TError = HTTPValidationError,
>(
  params?: GetTestsListApiV1TestsGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getTestsListApiV1TestsGet>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTestsListApiV1TestsGet>>,
          TError,
          Awaited<ReturnType<typeof getTestsListApiV1TestsGet>>
        >,
        'initialData'
      >
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetTestsListApiV1TestsGet<
  TData = Awaited<ReturnType<typeof getTestsListApiV1TestsGet>>,
  TError = HTTPValidationError,
>(
  params?: GetTestsListApiV1TestsGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getTestsListApiV1TestsGet>>, TError, TData>
    >
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Tests List
 */

export function useGetTestsListApiV1TestsGet<
  TData = Awaited<ReturnType<typeof getTestsListApiV1TestsGet>>,
  TError = HTTPValidationError,
>(
  params?: GetTestsListApiV1TestsGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getTestsListApiV1TestsGet>>, TError, TData>
    >
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetTestsListApiV1TestsGetQueryOptions(params, options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Create Test
 */
export const createTestApiV1TestsPost = (testCreate: TestCreate, signal?: AbortSignal) => {
  return customMutator<TestDetailResponse>({
    url: `/api/v1/tests/`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: testCreate,
    signal,
  })
}

export const getCreateTestApiV1TestsPostMutationOptions = <
  TError = HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createTestApiV1TestsPost>>,
    TError,
    { data: TestCreate },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof createTestApiV1TestsPost>>,
  TError,
  { data: TestCreate },
  TContext
> => {
  const mutationKey = ['createTestApiV1TestsPost']
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createTestApiV1TestsPost>>,
    { data: TestCreate }
  > = (props) => {
    const { data } = props ?? {}

    return createTestApiV1TestsPost(data)
  }

  return { mutationFn, ...mutationOptions }
}

export type CreateTestApiV1TestsPostMutationResult = NonNullable<
  Awaited<ReturnType<typeof createTestApiV1TestsPost>>
>
export type CreateTestApiV1TestsPostMutationBody = TestCreate
export type CreateTestApiV1TestsPostMutationError = HTTPValidationError

/**
 * @summary Create Test
 */
export const useCreateTestApiV1TestsPost = <TError = HTTPValidationError, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof createTestApiV1TestsPost>>,
      TError,
      { data: TestCreate },
      TContext
    >
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof createTestApiV1TestsPost>>,
  TError,
  { data: TestCreate },
  TContext
> => {
  const mutationOptions = getCreateTestApiV1TestsPostMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * @summary Get Test
 */
export const getTestApiV1TestsTestIdGet = (testId: string, signal?: AbortSignal) => {
  return customMutator<TestDetailResponse>({
    url: `/api/v1/tests/${testId}`,
    method: 'GET',
    signal,
  })
}

export const getGetTestApiV1TestsTestIdGetQueryKey = (testId?: string) => {
  return [`/api/v1/tests/${testId}`] as const
}

export const getGetTestApiV1TestsTestIdGetQueryOptions = <
  TData = Awaited<ReturnType<typeof getTestApiV1TestsTestIdGet>>,
  TError = HTTPValidationError,
>(
  testId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getTestApiV1TestsTestIdGet>>, TError, TData>
    >
  },
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetTestApiV1TestsTestIdGetQueryKey(testId)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getTestApiV1TestsTestIdGet>>> = ({
    signal,
  }) => getTestApiV1TestsTestIdGet(testId, signal)

  return { queryKey, queryFn, enabled: !!testId, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getTestApiV1TestsTestIdGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetTestApiV1TestsTestIdGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof getTestApiV1TestsTestIdGet>>
>
export type GetTestApiV1TestsTestIdGetQueryError = HTTPValidationError

export function useGetTestApiV1TestsTestIdGet<
  TData = Awaited<ReturnType<typeof getTestApiV1TestsTestIdGet>>,
  TError = HTTPValidationError,
>(
  testId: string,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getTestApiV1TestsTestIdGet>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTestApiV1TestsTestIdGet>>,
          TError,
          Awaited<ReturnType<typeof getTestApiV1TestsTestIdGet>>
        >,
        'initialData'
      >
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetTestApiV1TestsTestIdGet<
  TData = Awaited<ReturnType<typeof getTestApiV1TestsTestIdGet>>,
  TError = HTTPValidationError,
>(
  testId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getTestApiV1TestsTestIdGet>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTestApiV1TestsTestIdGet>>,
          TError,
          Awaited<ReturnType<typeof getTestApiV1TestsTestIdGet>>
        >,
        'initialData'
      >
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetTestApiV1TestsTestIdGet<
  TData = Awaited<ReturnType<typeof getTestApiV1TestsTestIdGet>>,
  TError = HTTPValidationError,
>(
  testId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getTestApiV1TestsTestIdGet>>, TError, TData>
    >
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Test
 */

export function useGetTestApiV1TestsTestIdGet<
  TData = Awaited<ReturnType<typeof getTestApiV1TestsTestIdGet>>,
  TError = HTTPValidationError,
>(
  testId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getTestApiV1TestsTestIdGet>>, TError, TData>
    >
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetTestApiV1TestsTestIdGetQueryOptions(testId, options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Delete Test
 */
export const deleteTestApiV1TestsTestIdDelete = (testId: string) => {
  return customMutator<TestShortResponse>({ url: `/api/v1/tests/${testId}`, method: 'DELETE' })
}

export const getDeleteTestApiV1TestsTestIdDeleteMutationOptions = <
  TError = HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteTestApiV1TestsTestIdDelete>>,
    TError,
    { testId: string },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteTestApiV1TestsTestIdDelete>>,
  TError,
  { testId: string },
  TContext
> => {
  const mutationKey = ['deleteTestApiV1TestsTestIdDelete']
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteTestApiV1TestsTestIdDelete>>,
    { testId: string }
  > = (props) => {
    const { testId } = props ?? {}

    return deleteTestApiV1TestsTestIdDelete(testId)
  }

  return { mutationFn, ...mutationOptions }
}

export type DeleteTestApiV1TestsTestIdDeleteMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteTestApiV1TestsTestIdDelete>>
>

export type DeleteTestApiV1TestsTestIdDeleteMutationError = HTTPValidationError

/**
 * @summary Delete Test
 */
export const useDeleteTestApiV1TestsTestIdDelete = <
  TError = HTTPValidationError,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deleteTestApiV1TestsTestIdDelete>>,
      TError,
      { testId: string },
      TContext
    >
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof deleteTestApiV1TestsTestIdDelete>>,
  TError,
  { testId: string },
  TContext
> => {
  const mutationOptions = getDeleteTestApiV1TestsTestIdDeleteMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
