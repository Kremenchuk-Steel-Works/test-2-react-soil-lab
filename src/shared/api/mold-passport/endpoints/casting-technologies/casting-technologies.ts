/**
 * Generated by orval v7.11.2 🍺
 * Do not edit manually.
 * Molding Shop Service
 * OpenAPI spec version: 0.1.0
 */
import {
  useQuery,
  type DataTag,
  type DefinedInitialDataOptions,
  type DefinedUseQueryResult,
  type QueryClient,
  type QueryFunction,
  type QueryKey,
  type UndefinedInitialDataOptions,
  type UseQueryOptions,
  type UseQueryResult,
} from '@tanstack/react-query'
import { customMutator } from '../../../mutator'
import type {
  CastingTechnologyLookupsListResponse,
  GetCastingTechnologyLookupsListApiV1CastingTechnologiesLookupsGetParams,
  HttpValidationError,
} from '../../model'

/**
 * @summary Get Casting Technology Lookups List
 */
export const getCastingTechnologyLookupsListApiV1CastingTechnologiesLookupsGet = (
  params?: GetCastingTechnologyLookupsListApiV1CastingTechnologiesLookupsGetParams,
  signal?: AbortSignal,
) => {
  return customMutator<CastingTechnologyLookupsListResponse>({
    url: `/api/v1/casting-technologies/lookups`,
    method: 'GET',
    params,
    signal,
  })
}

export const getGetCastingTechnologyLookupsListApiV1CastingTechnologiesLookupsGetQueryKey = (
  params?: GetCastingTechnologyLookupsListApiV1CastingTechnologiesLookupsGetParams,
) => {
  return [`/api/v1/casting-technologies/lookups`, ...(params ? [params] : [])] as const
}

export const getGetCastingTechnologyLookupsListApiV1CastingTechnologiesLookupsGetQueryOptions = <
  TData = Awaited<
    ReturnType<typeof getCastingTechnologyLookupsListApiV1CastingTechnologiesLookupsGet>
  >,
  TError = HttpValidationError,
>(
  params?: GetCastingTechnologyLookupsListApiV1CastingTechnologiesLookupsGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<typeof getCastingTechnologyLookupsListApiV1CastingTechnologiesLookupsGet>
        >,
        TError,
        TData
      >
    >
  },
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ??
    getGetCastingTechnologyLookupsListApiV1CastingTechnologiesLookupsGetQueryKey(params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getCastingTechnologyLookupsListApiV1CastingTechnologiesLookupsGet>>
  > = ({ signal }) =>
    getCastingTechnologyLookupsListApiV1CastingTechnologiesLookupsGet(params, signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getCastingTechnologyLookupsListApiV1CastingTechnologiesLookupsGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetCastingTechnologyLookupsListApiV1CastingTechnologiesLookupsGetQueryResult =
  NonNullable<
    Awaited<ReturnType<typeof getCastingTechnologyLookupsListApiV1CastingTechnologiesLookupsGet>>
  >
export type GetCastingTechnologyLookupsListApiV1CastingTechnologiesLookupsGetQueryError =
  HttpValidationError

export function useGetCastingTechnologyLookupsListApiV1CastingTechnologiesLookupsGet<
  TData = Awaited<
    ReturnType<typeof getCastingTechnologyLookupsListApiV1CastingTechnologiesLookupsGet>
  >,
  TError = HttpValidationError,
>(
  params: undefined | GetCastingTechnologyLookupsListApiV1CastingTechnologiesLookupsGetParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<typeof getCastingTechnologyLookupsListApiV1CastingTechnologiesLookupsGet>
        >,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<
            ReturnType<typeof getCastingTechnologyLookupsListApiV1CastingTechnologiesLookupsGet>
          >,
          TError,
          Awaited<
            ReturnType<typeof getCastingTechnologyLookupsListApiV1CastingTechnologiesLookupsGet>
          >
        >,
        'initialData'
      >
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetCastingTechnologyLookupsListApiV1CastingTechnologiesLookupsGet<
  TData = Awaited<
    ReturnType<typeof getCastingTechnologyLookupsListApiV1CastingTechnologiesLookupsGet>
  >,
  TError = HttpValidationError,
>(
  params?: GetCastingTechnologyLookupsListApiV1CastingTechnologiesLookupsGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<typeof getCastingTechnologyLookupsListApiV1CastingTechnologiesLookupsGet>
        >,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<
            ReturnType<typeof getCastingTechnologyLookupsListApiV1CastingTechnologiesLookupsGet>
          >,
          TError,
          Awaited<
            ReturnType<typeof getCastingTechnologyLookupsListApiV1CastingTechnologiesLookupsGet>
          >
        >,
        'initialData'
      >
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetCastingTechnologyLookupsListApiV1CastingTechnologiesLookupsGet<
  TData = Awaited<
    ReturnType<typeof getCastingTechnologyLookupsListApiV1CastingTechnologiesLookupsGet>
  >,
  TError = HttpValidationError,
>(
  params?: GetCastingTechnologyLookupsListApiV1CastingTechnologiesLookupsGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<typeof getCastingTechnologyLookupsListApiV1CastingTechnologiesLookupsGet>
        >,
        TError,
        TData
      >
    >
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Casting Technology Lookups List
 */

export function useGetCastingTechnologyLookupsListApiV1CastingTechnologiesLookupsGet<
  TData = Awaited<
    ReturnType<typeof getCastingTechnologyLookupsListApiV1CastingTechnologiesLookupsGet>
  >,
  TError = HttpValidationError,
>(
  params?: GetCastingTechnologyLookupsListApiV1CastingTechnologiesLookupsGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<typeof getCastingTechnologyLookupsListApiV1CastingTechnologiesLookupsGet>
        >,
        TError,
        TData
      >
    >
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions =
    getGetCastingTechnologyLookupsListApiV1CastingTechnologiesLookupsGetQueryOptions(
      params,
      options,
    )

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = queryOptions.queryKey

  return query
}
