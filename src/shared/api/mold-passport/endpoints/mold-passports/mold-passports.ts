/**
 * Generated by orval v7.11.2 🍺
 * Do not edit manually.
 * Molding Shop Service
 * OpenAPI spec version: 0.1.0
 */
import {
  useMutation,
  useQuery,
  type DataTag,
  type DefinedInitialDataOptions,
  type DefinedUseQueryResult,
  type MutationFunction,
  type QueryClient,
  type QueryFunction,
  type QueryKey,
  type UndefinedInitialDataOptions,
  type UseMutationOptions,
  type UseMutationResult,
  type UseQueryOptions,
  type UseQueryResult,
} from '@tanstack/react-query'
import { customMutator } from '../../../mutator'
import type {
  GetMoldPassportsListApiV1MoldPassportsGetParams,
  HttpValidationError,
  MoldPassportCreate,
  MoldPassportDetailResponse,
  MoldPassportListResponse,
  MoldPassportShortResponse,
  MoldPassportUpdate,
} from '../../model'

/**
 * @summary Get Mold Passports List
 */
export const getMoldPassportsListApiV1MoldPassportsGet = (
  params?: GetMoldPassportsListApiV1MoldPassportsGetParams,
  signal?: AbortSignal,
) => {
  return customMutator<MoldPassportListResponse>({
    url: `/api/v1/mold-passports/`,
    method: 'GET',
    params,
    signal,
  })
}

export const getGetMoldPassportsListApiV1MoldPassportsGetQueryKey = (
  params?: GetMoldPassportsListApiV1MoldPassportsGetParams,
) => {
  return [`/api/v1/mold-passports/`, ...(params ? [params] : [])] as const
}

export const getGetMoldPassportsListApiV1MoldPassportsGetQueryOptions = <
  TData = Awaited<ReturnType<typeof getMoldPassportsListApiV1MoldPassportsGet>>,
  TError = HttpValidationError,
>(
  params?: GetMoldPassportsListApiV1MoldPassportsGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getMoldPassportsListApiV1MoldPassportsGet>>,
        TError,
        TData
      >
    >
  },
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getGetMoldPassportsListApiV1MoldPassportsGetQueryKey(params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getMoldPassportsListApiV1MoldPassportsGet>>
  > = ({ signal }) => getMoldPassportsListApiV1MoldPassportsGet(params, signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getMoldPassportsListApiV1MoldPassportsGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetMoldPassportsListApiV1MoldPassportsGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof getMoldPassportsListApiV1MoldPassportsGet>>
>
export type GetMoldPassportsListApiV1MoldPassportsGetQueryError = HttpValidationError

export function useGetMoldPassportsListApiV1MoldPassportsGet<
  TData = Awaited<ReturnType<typeof getMoldPassportsListApiV1MoldPassportsGet>>,
  TError = HttpValidationError,
>(
  params: undefined | GetMoldPassportsListApiV1MoldPassportsGetParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getMoldPassportsListApiV1MoldPassportsGet>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMoldPassportsListApiV1MoldPassportsGet>>,
          TError,
          Awaited<ReturnType<typeof getMoldPassportsListApiV1MoldPassportsGet>>
        >,
        'initialData'
      >
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetMoldPassportsListApiV1MoldPassportsGet<
  TData = Awaited<ReturnType<typeof getMoldPassportsListApiV1MoldPassportsGet>>,
  TError = HttpValidationError,
>(
  params?: GetMoldPassportsListApiV1MoldPassportsGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getMoldPassportsListApiV1MoldPassportsGet>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMoldPassportsListApiV1MoldPassportsGet>>,
          TError,
          Awaited<ReturnType<typeof getMoldPassportsListApiV1MoldPassportsGet>>
        >,
        'initialData'
      >
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetMoldPassportsListApiV1MoldPassportsGet<
  TData = Awaited<ReturnType<typeof getMoldPassportsListApiV1MoldPassportsGet>>,
  TError = HttpValidationError,
>(
  params?: GetMoldPassportsListApiV1MoldPassportsGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getMoldPassportsListApiV1MoldPassportsGet>>,
        TError,
        TData
      >
    >
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Mold Passports List
 */

export function useGetMoldPassportsListApiV1MoldPassportsGet<
  TData = Awaited<ReturnType<typeof getMoldPassportsListApiV1MoldPassportsGet>>,
  TError = HttpValidationError,
>(
  params?: GetMoldPassportsListApiV1MoldPassportsGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getMoldPassportsListApiV1MoldPassportsGet>>,
        TError,
        TData
      >
    >
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetMoldPassportsListApiV1MoldPassportsGetQueryOptions(params, options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Create Mold Passport
 */
export const createMoldPassportApiV1MoldPassportsPost = (
  moldPassportCreate: MoldPassportCreate,
  signal?: AbortSignal,
) => {
  return customMutator<MoldPassportDetailResponse>({
    url: `/api/v1/mold-passports/`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: moldPassportCreate,
    signal,
  })
}

export const getCreateMoldPassportApiV1MoldPassportsPostMutationOptions = <
  TError = HttpValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createMoldPassportApiV1MoldPassportsPost>>,
    TError,
    { data: MoldPassportCreate },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof createMoldPassportApiV1MoldPassportsPost>>,
  TError,
  { data: MoldPassportCreate },
  TContext
> => {
  const mutationKey = ['createMoldPassportApiV1MoldPassportsPost']
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createMoldPassportApiV1MoldPassportsPost>>,
    { data: MoldPassportCreate }
  > = (props) => {
    const { data } = props ?? {}

    return createMoldPassportApiV1MoldPassportsPost(data)
  }

  return { mutationFn, ...mutationOptions }
}

export type CreateMoldPassportApiV1MoldPassportsPostMutationResult = NonNullable<
  Awaited<ReturnType<typeof createMoldPassportApiV1MoldPassportsPost>>
>
export type CreateMoldPassportApiV1MoldPassportsPostMutationBody = MoldPassportCreate
export type CreateMoldPassportApiV1MoldPassportsPostMutationError = HttpValidationError

/**
 * @summary Create Mold Passport
 */
export const useCreateMoldPassportApiV1MoldPassportsPost = <
  TError = HttpValidationError,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof createMoldPassportApiV1MoldPassportsPost>>,
      TError,
      { data: MoldPassportCreate },
      TContext
    >
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof createMoldPassportApiV1MoldPassportsPost>>,
  TError,
  { data: MoldPassportCreate },
  TContext
> => {
  const mutationOptions = getCreateMoldPassportApiV1MoldPassportsPostMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * @summary Get Mold Passport
 */
export const getMoldPassportApiV1MoldPassportsMoldPassportIdGet = (
  moldPassportId: string,
  signal?: AbortSignal,
) => {
  return customMutator<MoldPassportDetailResponse>({
    url: `/api/v1/mold-passports/${moldPassportId}`,
    method: 'GET',
    signal,
  })
}

export const getGetMoldPassportApiV1MoldPassportsMoldPassportIdGetQueryKey = (
  moldPassportId?: string,
) => {
  return [`/api/v1/mold-passports/${moldPassportId}`] as const
}

export const getGetMoldPassportApiV1MoldPassportsMoldPassportIdGetQueryOptions = <
  TData = Awaited<ReturnType<typeof getMoldPassportApiV1MoldPassportsMoldPassportIdGet>>,
  TError = HttpValidationError,
>(
  moldPassportId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getMoldPassportApiV1MoldPassportsMoldPassportIdGet>>,
        TError,
        TData
      >
    >
  },
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ??
    getGetMoldPassportApiV1MoldPassportsMoldPassportIdGetQueryKey(moldPassportId)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getMoldPassportApiV1MoldPassportsMoldPassportIdGet>>
  > = ({ signal }) => getMoldPassportApiV1MoldPassportsMoldPassportIdGet(moldPassportId, signal)

  return { queryKey, queryFn, enabled: !!moldPassportId, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getMoldPassportApiV1MoldPassportsMoldPassportIdGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetMoldPassportApiV1MoldPassportsMoldPassportIdGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof getMoldPassportApiV1MoldPassportsMoldPassportIdGet>>
>
export type GetMoldPassportApiV1MoldPassportsMoldPassportIdGetQueryError = HttpValidationError

export function useGetMoldPassportApiV1MoldPassportsMoldPassportIdGet<
  TData = Awaited<ReturnType<typeof getMoldPassportApiV1MoldPassportsMoldPassportIdGet>>,
  TError = HttpValidationError,
>(
  moldPassportId: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getMoldPassportApiV1MoldPassportsMoldPassportIdGet>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMoldPassportApiV1MoldPassportsMoldPassportIdGet>>,
          TError,
          Awaited<ReturnType<typeof getMoldPassportApiV1MoldPassportsMoldPassportIdGet>>
        >,
        'initialData'
      >
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetMoldPassportApiV1MoldPassportsMoldPassportIdGet<
  TData = Awaited<ReturnType<typeof getMoldPassportApiV1MoldPassportsMoldPassportIdGet>>,
  TError = HttpValidationError,
>(
  moldPassportId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getMoldPassportApiV1MoldPassportsMoldPassportIdGet>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMoldPassportApiV1MoldPassportsMoldPassportIdGet>>,
          TError,
          Awaited<ReturnType<typeof getMoldPassportApiV1MoldPassportsMoldPassportIdGet>>
        >,
        'initialData'
      >
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetMoldPassportApiV1MoldPassportsMoldPassportIdGet<
  TData = Awaited<ReturnType<typeof getMoldPassportApiV1MoldPassportsMoldPassportIdGet>>,
  TError = HttpValidationError,
>(
  moldPassportId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getMoldPassportApiV1MoldPassportsMoldPassportIdGet>>,
        TError,
        TData
      >
    >
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Mold Passport
 */

export function useGetMoldPassportApiV1MoldPassportsMoldPassportIdGet<
  TData = Awaited<ReturnType<typeof getMoldPassportApiV1MoldPassportsMoldPassportIdGet>>,
  TError = HttpValidationError,
>(
  moldPassportId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getMoldPassportApiV1MoldPassportsMoldPassportIdGet>>,
        TError,
        TData
      >
    >
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetMoldPassportApiV1MoldPassportsMoldPassportIdGetQueryOptions(
    moldPassportId,
    options,
  )

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Update Mold Passport
 */
export const updateMoldPassportApiV1MoldPassportsMoldPassportIdPut = (
  moldPassportId: string,
  moldPassportUpdate: MoldPassportUpdate,
) => {
  return customMutator<MoldPassportDetailResponse>({
    url: `/api/v1/mold-passports/${moldPassportId}`,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json' },
    data: moldPassportUpdate,
  })
}

export const getUpdateMoldPassportApiV1MoldPassportsMoldPassportIdPutMutationOptions = <
  TError = HttpValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateMoldPassportApiV1MoldPassportsMoldPassportIdPut>>,
    TError,
    { moldPassportId: string; data: MoldPassportUpdate },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateMoldPassportApiV1MoldPassportsMoldPassportIdPut>>,
  TError,
  { moldPassportId: string; data: MoldPassportUpdate },
  TContext
> => {
  const mutationKey = ['updateMoldPassportApiV1MoldPassportsMoldPassportIdPut']
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateMoldPassportApiV1MoldPassportsMoldPassportIdPut>>,
    { moldPassportId: string; data: MoldPassportUpdate }
  > = (props) => {
    const { moldPassportId, data } = props ?? {}

    return updateMoldPassportApiV1MoldPassportsMoldPassportIdPut(moldPassportId, data)
  }

  return { mutationFn, ...mutationOptions }
}

export type UpdateMoldPassportApiV1MoldPassportsMoldPassportIdPutMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateMoldPassportApiV1MoldPassportsMoldPassportIdPut>>
>
export type UpdateMoldPassportApiV1MoldPassportsMoldPassportIdPutMutationBody = MoldPassportUpdate
export type UpdateMoldPassportApiV1MoldPassportsMoldPassportIdPutMutationError = HttpValidationError

/**
 * @summary Update Mold Passport
 */
export const useUpdateMoldPassportApiV1MoldPassportsMoldPassportIdPut = <
  TError = HttpValidationError,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof updateMoldPassportApiV1MoldPassportsMoldPassportIdPut>>,
      TError,
      { moldPassportId: string; data: MoldPassportUpdate },
      TContext
    >
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof updateMoldPassportApiV1MoldPassportsMoldPassportIdPut>>,
  TError,
  { moldPassportId: string; data: MoldPassportUpdate },
  TContext
> => {
  const mutationOptions =
    getUpdateMoldPassportApiV1MoldPassportsMoldPassportIdPutMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * @summary Delete Mold Passport
 */
export const deleteMoldPassportApiV1MoldPassportsMoldPassportIdDelete = (
  moldPassportId: string,
) => {
  return customMutator<MoldPassportShortResponse>({
    url: `/api/v1/mold-passports/${moldPassportId}`,
    method: 'DELETE',
  })
}

export const getDeleteMoldPassportApiV1MoldPassportsMoldPassportIdDeleteMutationOptions = <
  TError = HttpValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteMoldPassportApiV1MoldPassportsMoldPassportIdDelete>>,
    TError,
    { moldPassportId: string },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteMoldPassportApiV1MoldPassportsMoldPassportIdDelete>>,
  TError,
  { moldPassportId: string },
  TContext
> => {
  const mutationKey = ['deleteMoldPassportApiV1MoldPassportsMoldPassportIdDelete']
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteMoldPassportApiV1MoldPassportsMoldPassportIdDelete>>,
    { moldPassportId: string }
  > = (props) => {
    const { moldPassportId } = props ?? {}

    return deleteMoldPassportApiV1MoldPassportsMoldPassportIdDelete(moldPassportId)
  }

  return { mutationFn, ...mutationOptions }
}

export type DeleteMoldPassportApiV1MoldPassportsMoldPassportIdDeleteMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteMoldPassportApiV1MoldPassportsMoldPassportIdDelete>>
>

export type DeleteMoldPassportApiV1MoldPassportsMoldPassportIdDeleteMutationError =
  HttpValidationError

/**
 * @summary Delete Mold Passport
 */
export const useDeleteMoldPassportApiV1MoldPassportsMoldPassportIdDelete = <
  TError = HttpValidationError,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deleteMoldPassportApiV1MoldPassportsMoldPassportIdDelete>>,
      TError,
      { moldPassportId: string },
      TContext
    >
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof deleteMoldPassportApiV1MoldPassportsMoldPassportIdDelete>>,
  TError,
  { moldPassportId: string },
  TContext
> => {
  const mutationOptions =
    getDeleteMoldPassportApiV1MoldPassportsMoldPassportIdDeleteMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * @summary Restore Mold Passport
 */
export const restoreMoldPassportApiV1MoldPassportsMoldPassportIdRestorePost = (
  moldPassportId: string,
  signal?: AbortSignal,
) => {
  return customMutator<MoldPassportShortResponse>({
    url: `/api/v1/mold-passports/${moldPassportId}/restore`,
    method: 'POST',
    signal,
  })
}

export const getRestoreMoldPassportApiV1MoldPassportsMoldPassportIdRestorePostMutationOptions = <
  TError = HttpValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof restoreMoldPassportApiV1MoldPassportsMoldPassportIdRestorePost>>,
    TError,
    { moldPassportId: string },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof restoreMoldPassportApiV1MoldPassportsMoldPassportIdRestorePost>>,
  TError,
  { moldPassportId: string },
  TContext
> => {
  const mutationKey = ['restoreMoldPassportApiV1MoldPassportsMoldPassportIdRestorePost']
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof restoreMoldPassportApiV1MoldPassportsMoldPassportIdRestorePost>>,
    { moldPassportId: string }
  > = (props) => {
    const { moldPassportId } = props ?? {}

    return restoreMoldPassportApiV1MoldPassportsMoldPassportIdRestorePost(moldPassportId)
  }

  return { mutationFn, ...mutationOptions }
}

export type RestoreMoldPassportApiV1MoldPassportsMoldPassportIdRestorePostMutationResult =
  NonNullable<
    Awaited<ReturnType<typeof restoreMoldPassportApiV1MoldPassportsMoldPassportIdRestorePost>>
  >

export type RestoreMoldPassportApiV1MoldPassportsMoldPassportIdRestorePostMutationError =
  HttpValidationError

/**
 * @summary Restore Mold Passport
 */
export const useRestoreMoldPassportApiV1MoldPassportsMoldPassportIdRestorePost = <
  TError = HttpValidationError,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof restoreMoldPassportApiV1MoldPassportsMoldPassportIdRestorePost>>,
      TError,
      { moldPassportId: string },
      TContext
    >
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof restoreMoldPassportApiV1MoldPassportsMoldPassportIdRestorePost>>,
  TError,
  { moldPassportId: string },
  TContext
> => {
  const mutationOptions =
    getRestoreMoldPassportApiV1MoldPassportsMoldPassportIdRestorePostMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
