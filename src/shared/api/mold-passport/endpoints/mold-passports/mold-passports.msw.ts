/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * Molding Shop Service
 * OpenAPI spec version: 0.1.0
 */
import { faker } from '@faker-js/faker'
import { delay, http, HttpResponse } from 'msw'
import {
  AssetStatus,
  CastingProductType,
  ConsumableStatus,
  MoldingSandSystem,
  ResinType,
  type MoldPassportDetailResponse,
  type MoldPassportListResponse,
} from '../../model'

export const getGetMoldPassportsListApiV1MoldPassportsGetResponseMock = (
  overrideResponse: Partial<MoldPassportListResponse> = {},
): MoldPassportListResponse => ({
  data: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
    deletedAt: faker.helpers.arrayElement([
      faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]),
      undefined,
    ]),
    id: faker.string.uuid(),
    isComplete: faker.datatype.boolean(),
    primaryCastingProductName: faker.string.alpha({ length: { min: 10, max: 20 } }),
    referenceCode: faker.string.alpha({ length: { min: 10, max: 20 } }),
    markingYear: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
    moldingArea: {
      id: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
      name: faker.string.alpha({ length: { min: 10, max: 20 } }),
      pressureUnits: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.string.alpha({ length: { min: 10, max: 20 } }), null]),
        undefined,
      ]),
    },
    castingTechnology: {
      id: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
      name: faker.string.alpha({ length: { min: 10, max: 20 } }),
      abbreviation: faker.string.alpha({ length: { min: 10, max: 20 } }),
    },
    patternPlateFrame: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        {
          id: faker.string.uuid(),
          blueprintNumber: faker.string.alpha({ length: { min: 10, max: 20 } }),
          serialNumber: faker.string.alpha({ length: { min: 10, max: 20 } }),
        },
        null,
      ]),
      undefined,
    ]),
    moldingFlask: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        {
          id: faker.string.uuid(),
          blueprintNumber: faker.string.alpha({ length: { min: 10, max: 20 } }),
          serialNumber: faker.string.alpha({ length: { min: 10, max: 20 } }),
        },
        null,
      ]),
      undefined,
    ]),
    sequenceInShift: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
        null,
      ]),
      undefined,
    ]),
    assemblyTimestamp: faker.helpers.arrayElement([
      faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]),
      undefined,
    ]),
    status: faker.helpers.arrayElement(Object.values(AssetStatus)),
    isDeleted: faker.datatype.boolean(),
  })),
  page: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
  totalPages: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
  totalItems: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
  ...overrideResponse,
})

export const getCreateMoldPassportApiV1MoldPassportsPostResponseMock = (
  overrideResponse: Partial<MoldPassportDetailResponse> = {},
): MoldPassportDetailResponse => ({
  deletedAt: faker.helpers.arrayElement([
    faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]),
    undefined,
  ]),
  createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  createdById: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.string.uuid(), null]),
    undefined,
  ]),
  updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  updatedById: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.string.uuid(), null]),
    undefined,
  ]),
  id: faker.string.uuid(),
  isComplete: faker.datatype.boolean(),
  primaryCastingProductName: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    null,
  ]),
  referenceCode: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    null,
  ]),
  moldingArea: {
    id: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
    name: faker.string.alpha({ length: { min: 10, max: 20 } }),
    pressureUnits: faker.helpers.arrayElement([
      faker.helpers.arrayElement([faker.string.alpha({ length: { min: 10, max: 20 } }), null]),
      undefined,
    ]),
  },
  castingTechnology: {
    id: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
    name: faker.string.alpha({ length: { min: 10, max: 20 } }),
    abbreviation: faker.string.alpha({ length: { min: 10, max: 20 } }),
  },
  patternPlateFrame: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      {
        id: faker.string.uuid(),
        blueprintNumber: faker.string.alpha({ length: { min: 10, max: 20 } }),
        serialNumber: faker.string.alpha({ length: { min: 10, max: 20 } }),
      },
      null,
    ]),
    undefined,
  ]),
  moldingFlask: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      {
        id: faker.string.uuid(),
        blueprintNumber: faker.string.alpha({ length: { min: 10, max: 20 } }),
        serialNumber: faker.string.alpha({ length: { min: 10, max: 20 } }),
      },
      null,
    ]),
    undefined,
  ]),
  dataGsc: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      {
        createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
        updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
        moldPassportId: faker.string.uuid(),
        moldingSandType: {
          id: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
          name: faker.string.alpha({ length: { min: 10, max: 20 } }),
          abbreviation: faker.string.alpha({ length: { min: 10, max: 20 } }),
        },
        moldingSandSystem: faker.helpers.arrayElement(Object.values(MoldingSandSystem)),
        moldingSandNumber: faker.string.alpha({ length: { min: 10, max: 20 } }),
        moldHorizontalDensity: faker.number.float({
          min: undefined,
          max: undefined,
          fractionDigits: 2,
        }),
        moldVerticalDensity: faker.number.float({
          min: undefined,
          max: undefined,
          fractionDigits: 2,
        }),
      },
      null,
    ]),
    undefined,
  ]),
  dataAsc: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      {
        createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
        updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
        moldPassportId: faker.string.uuid(),
        moldingSandType: {
          id: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
          name: faker.string.alpha({ length: { min: 10, max: 20 } }),
          abbreviation: faker.string.alpha({ length: { min: 10, max: 20 } }),
        },
        moldHardness: faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
        resin: faker.helpers.arrayElement([
          faker.helpers.arrayElement([
            {
              id: faker.string.uuid(),
              type: faker.helpers.arrayElement(Object.values(ResinType)),
              brand: faker.string.alpha({ length: { min: 10, max: 20 } }),
              name: faker.string.alpha({ length: { min: 10, max: 20 } }),
              serialNumber: faker.string.alpha({ length: { min: 10, max: 20 } }),
            },
            null,
          ]),
          undefined,
        ]),
      },
      null,
    ]),
    undefined,
  ]),
  markingYear: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
    null,
  ]),
  moldCavities: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
    () => ({
      createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
      updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
      id: faker.string.uuid(),
      castingPattern: {
        id: faker.string.uuid(),
        castingProduct: {
          id: faker.string.uuid(),
          type: faker.helpers.arrayElement(Object.values(CastingProductType)),
          name: faker.string.alpha({ length: { min: 10, max: 20 } }),
          blueprintNumber: faker.string.alpha({ length: { min: 10, max: 20 } }),
          isCastingManualOnly: faker.datatype.boolean(),
        },
        serialNumber: faker.string.alpha({ length: { min: 10, max: 20 } }),
      },
      serialNumber: faker.string.alpha({ length: { min: 10, max: 20 } }),
      moldCores: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
        () => ({
          createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
          updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
          id: faker.string.uuid(),
          coreBatch: {
            id: faker.string.uuid(),
            moldingSandType: {
              id: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
              name: faker.string.alpha({ length: { min: 10, max: 20 } }),
              abbreviation: faker.string.alpha({ length: { min: 10, max: 20 } }),
            },
            moldCoreType: {
              id: faker.string.uuid(),
              castingProduct: {
                id: faker.string.uuid(),
                type: faker.helpers.arrayElement(Object.values(CastingProductType)),
                name: faker.string.alpha({ length: { min: 10, max: 20 } }),
                blueprintNumber: faker.string.alpha({ length: { min: 10, max: 20 } }),
                isCastingManualOnly: faker.datatype.boolean(),
              },
              modelNumber: faker.string.alpha({ length: { min: 10, max: 20 } }),
            },
            moldCoreMakingMachine: {
              id: faker.string.uuid(),
              brand: faker.string.alpha({ length: { min: 10, max: 20 } }),
              model: faker.string.alpha({ length: { min: 10, max: 20 } }),
            },
            manufacturingTimestamp: `${faker.date.past().toISOString().split('.')[0]}Z`,
            batchExpiryDate: `${faker.date.past().toISOString().split('.')[0]}Z`,
            status: faker.helpers.arrayElement(Object.values(ConsumableStatus)),
          },
          hardness: faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
        }),
      ),
      isFunctional: faker.datatype.boolean(),
    }),
  ),
  pressingPressure: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
      null,
    ]),
    undefined,
  ]),
  sequenceInShift: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
      null,
    ]),
    undefined,
  ]),
  assemblyTimestamp: faker.helpers.arrayElement([
    faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]),
    undefined,
  ]),
  status: faker.helpers.arrayElement(Object.values(AssetStatus)),
  notes: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.string.alpha({ length: { min: 10, max: 20 } }), null]),
    undefined,
  ]),
  isDeleted: faker.datatype.boolean(),
  ...overrideResponse,
})

export const getGetMoldPassportApiV1MoldPassportsMoldPassportIdGetResponseMock = (
  overrideResponse: Partial<MoldPassportDetailResponse> = {},
): MoldPassportDetailResponse => ({
  deletedAt: faker.helpers.arrayElement([
    faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]),
    undefined,
  ]),
  createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  createdById: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.string.uuid(), null]),
    undefined,
  ]),
  updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  updatedById: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.string.uuid(), null]),
    undefined,
  ]),
  id: faker.string.uuid(),
  isComplete: faker.datatype.boolean(),
  primaryCastingProductName: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    null,
  ]),
  referenceCode: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    null,
  ]),
  moldingArea: {
    id: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
    name: faker.string.alpha({ length: { min: 10, max: 20 } }),
    pressureUnits: faker.helpers.arrayElement([
      faker.helpers.arrayElement([faker.string.alpha({ length: { min: 10, max: 20 } }), null]),
      undefined,
    ]),
  },
  castingTechnology: {
    id: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
    name: faker.string.alpha({ length: { min: 10, max: 20 } }),
    abbreviation: faker.string.alpha({ length: { min: 10, max: 20 } }),
  },
  patternPlateFrame: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      {
        id: faker.string.uuid(),
        blueprintNumber: faker.string.alpha({ length: { min: 10, max: 20 } }),
        serialNumber: faker.string.alpha({ length: { min: 10, max: 20 } }),
      },
      null,
    ]),
    undefined,
  ]),
  moldingFlask: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      {
        id: faker.string.uuid(),
        blueprintNumber: faker.string.alpha({ length: { min: 10, max: 20 } }),
        serialNumber: faker.string.alpha({ length: { min: 10, max: 20 } }),
      },
      null,
    ]),
    undefined,
  ]),
  dataGsc: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      {
        createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
        updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
        moldPassportId: faker.string.uuid(),
        moldingSandType: {
          id: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
          name: faker.string.alpha({ length: { min: 10, max: 20 } }),
          abbreviation: faker.string.alpha({ length: { min: 10, max: 20 } }),
        },
        moldingSandSystem: faker.helpers.arrayElement(Object.values(MoldingSandSystem)),
        moldingSandNumber: faker.string.alpha({ length: { min: 10, max: 20 } }),
        moldHorizontalDensity: faker.number.float({
          min: undefined,
          max: undefined,
          fractionDigits: 2,
        }),
        moldVerticalDensity: faker.number.float({
          min: undefined,
          max: undefined,
          fractionDigits: 2,
        }),
      },
      null,
    ]),
    undefined,
  ]),
  dataAsc: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      {
        createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
        updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
        moldPassportId: faker.string.uuid(),
        moldingSandType: {
          id: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
          name: faker.string.alpha({ length: { min: 10, max: 20 } }),
          abbreviation: faker.string.alpha({ length: { min: 10, max: 20 } }),
        },
        moldHardness: faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
        resin: faker.helpers.arrayElement([
          faker.helpers.arrayElement([
            {
              id: faker.string.uuid(),
              type: faker.helpers.arrayElement(Object.values(ResinType)),
              brand: faker.string.alpha({ length: { min: 10, max: 20 } }),
              name: faker.string.alpha({ length: { min: 10, max: 20 } }),
              serialNumber: faker.string.alpha({ length: { min: 10, max: 20 } }),
            },
            null,
          ]),
          undefined,
        ]),
      },
      null,
    ]),
    undefined,
  ]),
  markingYear: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
    null,
  ]),
  moldCavities: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
    () => ({
      createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
      updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
      id: faker.string.uuid(),
      castingPattern: {
        id: faker.string.uuid(),
        castingProduct: {
          id: faker.string.uuid(),
          type: faker.helpers.arrayElement(Object.values(CastingProductType)),
          name: faker.string.alpha({ length: { min: 10, max: 20 } }),
          blueprintNumber: faker.string.alpha({ length: { min: 10, max: 20 } }),
          isCastingManualOnly: faker.datatype.boolean(),
        },
        serialNumber: faker.string.alpha({ length: { min: 10, max: 20 } }),
      },
      serialNumber: faker.string.alpha({ length: { min: 10, max: 20 } }),
      moldCores: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
        () => ({
          createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
          updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
          id: faker.string.uuid(),
          coreBatch: {
            id: faker.string.uuid(),
            moldingSandType: {
              id: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
              name: faker.string.alpha({ length: { min: 10, max: 20 } }),
              abbreviation: faker.string.alpha({ length: { min: 10, max: 20 } }),
            },
            moldCoreType: {
              id: faker.string.uuid(),
              castingProduct: {
                id: faker.string.uuid(),
                type: faker.helpers.arrayElement(Object.values(CastingProductType)),
                name: faker.string.alpha({ length: { min: 10, max: 20 } }),
                blueprintNumber: faker.string.alpha({ length: { min: 10, max: 20 } }),
                isCastingManualOnly: faker.datatype.boolean(),
              },
              modelNumber: faker.string.alpha({ length: { min: 10, max: 20 } }),
            },
            moldCoreMakingMachine: {
              id: faker.string.uuid(),
              brand: faker.string.alpha({ length: { min: 10, max: 20 } }),
              model: faker.string.alpha({ length: { min: 10, max: 20 } }),
            },
            manufacturingTimestamp: `${faker.date.past().toISOString().split('.')[0]}Z`,
            batchExpiryDate: `${faker.date.past().toISOString().split('.')[0]}Z`,
            status: faker.helpers.arrayElement(Object.values(ConsumableStatus)),
          },
          hardness: faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
        }),
      ),
      isFunctional: faker.datatype.boolean(),
    }),
  ),
  pressingPressure: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
      null,
    ]),
    undefined,
  ]),
  sequenceInShift: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
      null,
    ]),
    undefined,
  ]),
  assemblyTimestamp: faker.helpers.arrayElement([
    faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]),
    undefined,
  ]),
  status: faker.helpers.arrayElement(Object.values(AssetStatus)),
  notes: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.string.alpha({ length: { min: 10, max: 20 } }), null]),
    undefined,
  ]),
  isDeleted: faker.datatype.boolean(),
  ...overrideResponse,
})

export const getUpdateMoldPassportApiV1MoldPassportsMoldPassportIdPutResponseMock = (
  overrideResponse: Partial<MoldPassportDetailResponse> = {},
): MoldPassportDetailResponse => ({
  deletedAt: faker.helpers.arrayElement([
    faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]),
    undefined,
  ]),
  createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  createdById: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.string.uuid(), null]),
    undefined,
  ]),
  updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  updatedById: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.string.uuid(), null]),
    undefined,
  ]),
  id: faker.string.uuid(),
  isComplete: faker.datatype.boolean(),
  primaryCastingProductName: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    null,
  ]),
  referenceCode: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    null,
  ]),
  moldingArea: {
    id: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
    name: faker.string.alpha({ length: { min: 10, max: 20 } }),
    pressureUnits: faker.helpers.arrayElement([
      faker.helpers.arrayElement([faker.string.alpha({ length: { min: 10, max: 20 } }), null]),
      undefined,
    ]),
  },
  castingTechnology: {
    id: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
    name: faker.string.alpha({ length: { min: 10, max: 20 } }),
    abbreviation: faker.string.alpha({ length: { min: 10, max: 20 } }),
  },
  patternPlateFrame: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      {
        id: faker.string.uuid(),
        blueprintNumber: faker.string.alpha({ length: { min: 10, max: 20 } }),
        serialNumber: faker.string.alpha({ length: { min: 10, max: 20 } }),
      },
      null,
    ]),
    undefined,
  ]),
  moldingFlask: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      {
        id: faker.string.uuid(),
        blueprintNumber: faker.string.alpha({ length: { min: 10, max: 20 } }),
        serialNumber: faker.string.alpha({ length: { min: 10, max: 20 } }),
      },
      null,
    ]),
    undefined,
  ]),
  dataGsc: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      {
        createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
        updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
        moldPassportId: faker.string.uuid(),
        moldingSandType: {
          id: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
          name: faker.string.alpha({ length: { min: 10, max: 20 } }),
          abbreviation: faker.string.alpha({ length: { min: 10, max: 20 } }),
        },
        moldingSandSystem: faker.helpers.arrayElement(Object.values(MoldingSandSystem)),
        moldingSandNumber: faker.string.alpha({ length: { min: 10, max: 20 } }),
        moldHorizontalDensity: faker.number.float({
          min: undefined,
          max: undefined,
          fractionDigits: 2,
        }),
        moldVerticalDensity: faker.number.float({
          min: undefined,
          max: undefined,
          fractionDigits: 2,
        }),
      },
      null,
    ]),
    undefined,
  ]),
  dataAsc: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      {
        createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
        updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
        moldPassportId: faker.string.uuid(),
        moldingSandType: {
          id: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
          name: faker.string.alpha({ length: { min: 10, max: 20 } }),
          abbreviation: faker.string.alpha({ length: { min: 10, max: 20 } }),
        },
        moldHardness: faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
        resin: faker.helpers.arrayElement([
          faker.helpers.arrayElement([
            {
              id: faker.string.uuid(),
              type: faker.helpers.arrayElement(Object.values(ResinType)),
              brand: faker.string.alpha({ length: { min: 10, max: 20 } }),
              name: faker.string.alpha({ length: { min: 10, max: 20 } }),
              serialNumber: faker.string.alpha({ length: { min: 10, max: 20 } }),
            },
            null,
          ]),
          undefined,
        ]),
      },
      null,
    ]),
    undefined,
  ]),
  markingYear: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
    null,
  ]),
  moldCavities: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
    () => ({
      createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
      updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
      id: faker.string.uuid(),
      castingPattern: {
        id: faker.string.uuid(),
        castingProduct: {
          id: faker.string.uuid(),
          type: faker.helpers.arrayElement(Object.values(CastingProductType)),
          name: faker.string.alpha({ length: { min: 10, max: 20 } }),
          blueprintNumber: faker.string.alpha({ length: { min: 10, max: 20 } }),
          isCastingManualOnly: faker.datatype.boolean(),
        },
        serialNumber: faker.string.alpha({ length: { min: 10, max: 20 } }),
      },
      serialNumber: faker.string.alpha({ length: { min: 10, max: 20 } }),
      moldCores: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
        () => ({
          createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
          updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
          id: faker.string.uuid(),
          coreBatch: {
            id: faker.string.uuid(),
            moldingSandType: {
              id: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
              name: faker.string.alpha({ length: { min: 10, max: 20 } }),
              abbreviation: faker.string.alpha({ length: { min: 10, max: 20 } }),
            },
            moldCoreType: {
              id: faker.string.uuid(),
              castingProduct: {
                id: faker.string.uuid(),
                type: faker.helpers.arrayElement(Object.values(CastingProductType)),
                name: faker.string.alpha({ length: { min: 10, max: 20 } }),
                blueprintNumber: faker.string.alpha({ length: { min: 10, max: 20 } }),
                isCastingManualOnly: faker.datatype.boolean(),
              },
              modelNumber: faker.string.alpha({ length: { min: 10, max: 20 } }),
            },
            moldCoreMakingMachine: {
              id: faker.string.uuid(),
              brand: faker.string.alpha({ length: { min: 10, max: 20 } }),
              model: faker.string.alpha({ length: { min: 10, max: 20 } }),
            },
            manufacturingTimestamp: `${faker.date.past().toISOString().split('.')[0]}Z`,
            batchExpiryDate: `${faker.date.past().toISOString().split('.')[0]}Z`,
            status: faker.helpers.arrayElement(Object.values(ConsumableStatus)),
          },
          hardness: faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
        }),
      ),
      isFunctional: faker.datatype.boolean(),
    }),
  ),
  pressingPressure: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
      null,
    ]),
    undefined,
  ]),
  sequenceInShift: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
      null,
    ]),
    undefined,
  ]),
  assemblyTimestamp: faker.helpers.arrayElement([
    faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]),
    undefined,
  ]),
  status: faker.helpers.arrayElement(Object.values(AssetStatus)),
  notes: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.string.alpha({ length: { min: 10, max: 20 } }), null]),
    undefined,
  ]),
  isDeleted: faker.datatype.boolean(),
  ...overrideResponse,
})

export const getDeleteMoldPassportApiV1MoldPassportsMoldPassportIdDeleteResponseMock = (
  overrideResponse: Partial<MoldPassportDetailResponse> = {},
): MoldPassportDetailResponse => ({
  deletedAt: faker.helpers.arrayElement([
    faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]),
    undefined,
  ]),
  createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  createdById: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.string.uuid(), null]),
    undefined,
  ]),
  updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  updatedById: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.string.uuid(), null]),
    undefined,
  ]),
  id: faker.string.uuid(),
  isComplete: faker.datatype.boolean(),
  primaryCastingProductName: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    null,
  ]),
  referenceCode: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    null,
  ]),
  moldingArea: {
    id: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
    name: faker.string.alpha({ length: { min: 10, max: 20 } }),
    pressureUnits: faker.helpers.arrayElement([
      faker.helpers.arrayElement([faker.string.alpha({ length: { min: 10, max: 20 } }), null]),
      undefined,
    ]),
  },
  castingTechnology: {
    id: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
    name: faker.string.alpha({ length: { min: 10, max: 20 } }),
    abbreviation: faker.string.alpha({ length: { min: 10, max: 20 } }),
  },
  patternPlateFrame: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      {
        id: faker.string.uuid(),
        blueprintNumber: faker.string.alpha({ length: { min: 10, max: 20 } }),
        serialNumber: faker.string.alpha({ length: { min: 10, max: 20 } }),
      },
      null,
    ]),
    undefined,
  ]),
  moldingFlask: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      {
        id: faker.string.uuid(),
        blueprintNumber: faker.string.alpha({ length: { min: 10, max: 20 } }),
        serialNumber: faker.string.alpha({ length: { min: 10, max: 20 } }),
      },
      null,
    ]),
    undefined,
  ]),
  dataGsc: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      {
        createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
        updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
        moldPassportId: faker.string.uuid(),
        moldingSandType: {
          id: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
          name: faker.string.alpha({ length: { min: 10, max: 20 } }),
          abbreviation: faker.string.alpha({ length: { min: 10, max: 20 } }),
        },
        moldingSandSystem: faker.helpers.arrayElement(Object.values(MoldingSandSystem)),
        moldingSandNumber: faker.string.alpha({ length: { min: 10, max: 20 } }),
        moldHorizontalDensity: faker.number.float({
          min: undefined,
          max: undefined,
          fractionDigits: 2,
        }),
        moldVerticalDensity: faker.number.float({
          min: undefined,
          max: undefined,
          fractionDigits: 2,
        }),
      },
      null,
    ]),
    undefined,
  ]),
  dataAsc: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      {
        createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
        updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
        moldPassportId: faker.string.uuid(),
        moldingSandType: {
          id: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
          name: faker.string.alpha({ length: { min: 10, max: 20 } }),
          abbreviation: faker.string.alpha({ length: { min: 10, max: 20 } }),
        },
        moldHardness: faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
        resin: faker.helpers.arrayElement([
          faker.helpers.arrayElement([
            {
              id: faker.string.uuid(),
              type: faker.helpers.arrayElement(Object.values(ResinType)),
              brand: faker.string.alpha({ length: { min: 10, max: 20 } }),
              name: faker.string.alpha({ length: { min: 10, max: 20 } }),
              serialNumber: faker.string.alpha({ length: { min: 10, max: 20 } }),
            },
            null,
          ]),
          undefined,
        ]),
      },
      null,
    ]),
    undefined,
  ]),
  markingYear: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
    null,
  ]),
  moldCavities: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
    () => ({
      createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
      updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
      id: faker.string.uuid(),
      castingPattern: {
        id: faker.string.uuid(),
        castingProduct: {
          id: faker.string.uuid(),
          type: faker.helpers.arrayElement(Object.values(CastingProductType)),
          name: faker.string.alpha({ length: { min: 10, max: 20 } }),
          blueprintNumber: faker.string.alpha({ length: { min: 10, max: 20 } }),
          isCastingManualOnly: faker.datatype.boolean(),
        },
        serialNumber: faker.string.alpha({ length: { min: 10, max: 20 } }),
      },
      serialNumber: faker.string.alpha({ length: { min: 10, max: 20 } }),
      moldCores: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
        () => ({
          createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
          updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
          id: faker.string.uuid(),
          coreBatch: {
            id: faker.string.uuid(),
            moldingSandType: {
              id: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
              name: faker.string.alpha({ length: { min: 10, max: 20 } }),
              abbreviation: faker.string.alpha({ length: { min: 10, max: 20 } }),
            },
            moldCoreType: {
              id: faker.string.uuid(),
              castingProduct: {
                id: faker.string.uuid(),
                type: faker.helpers.arrayElement(Object.values(CastingProductType)),
                name: faker.string.alpha({ length: { min: 10, max: 20 } }),
                blueprintNumber: faker.string.alpha({ length: { min: 10, max: 20 } }),
                isCastingManualOnly: faker.datatype.boolean(),
              },
              modelNumber: faker.string.alpha({ length: { min: 10, max: 20 } }),
            },
            moldCoreMakingMachine: {
              id: faker.string.uuid(),
              brand: faker.string.alpha({ length: { min: 10, max: 20 } }),
              model: faker.string.alpha({ length: { min: 10, max: 20 } }),
            },
            manufacturingTimestamp: `${faker.date.past().toISOString().split('.')[0]}Z`,
            batchExpiryDate: `${faker.date.past().toISOString().split('.')[0]}Z`,
            status: faker.helpers.arrayElement(Object.values(ConsumableStatus)),
          },
          hardness: faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
        }),
      ),
      isFunctional: faker.datatype.boolean(),
    }),
  ),
  pressingPressure: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
      null,
    ]),
    undefined,
  ]),
  sequenceInShift: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
      null,
    ]),
    undefined,
  ]),
  assemblyTimestamp: faker.helpers.arrayElement([
    faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]),
    undefined,
  ]),
  status: faker.helpers.arrayElement(Object.values(AssetStatus)),
  notes: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.string.alpha({ length: { min: 10, max: 20 } }), null]),
    undefined,
  ]),
  isDeleted: faker.datatype.boolean(),
  ...overrideResponse,
})

export const getRestoreMoldPassportApiV1MoldPassportsMoldPassportIdRestorePostResponseMock = (
  overrideResponse: Partial<MoldPassportDetailResponse> = {},
): MoldPassportDetailResponse => ({
  deletedAt: faker.helpers.arrayElement([
    faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]),
    undefined,
  ]),
  createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  createdById: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.string.uuid(), null]),
    undefined,
  ]),
  updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  updatedById: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.string.uuid(), null]),
    undefined,
  ]),
  id: faker.string.uuid(),
  isComplete: faker.datatype.boolean(),
  primaryCastingProductName: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    null,
  ]),
  referenceCode: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    null,
  ]),
  moldingArea: {
    id: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
    name: faker.string.alpha({ length: { min: 10, max: 20 } }),
    pressureUnits: faker.helpers.arrayElement([
      faker.helpers.arrayElement([faker.string.alpha({ length: { min: 10, max: 20 } }), null]),
      undefined,
    ]),
  },
  castingTechnology: {
    id: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
    name: faker.string.alpha({ length: { min: 10, max: 20 } }),
    abbreviation: faker.string.alpha({ length: { min: 10, max: 20 } }),
  },
  patternPlateFrame: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      {
        id: faker.string.uuid(),
        blueprintNumber: faker.string.alpha({ length: { min: 10, max: 20 } }),
        serialNumber: faker.string.alpha({ length: { min: 10, max: 20 } }),
      },
      null,
    ]),
    undefined,
  ]),
  moldingFlask: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      {
        id: faker.string.uuid(),
        blueprintNumber: faker.string.alpha({ length: { min: 10, max: 20 } }),
        serialNumber: faker.string.alpha({ length: { min: 10, max: 20 } }),
      },
      null,
    ]),
    undefined,
  ]),
  dataGsc: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      {
        createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
        updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
        moldPassportId: faker.string.uuid(),
        moldingSandType: {
          id: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
          name: faker.string.alpha({ length: { min: 10, max: 20 } }),
          abbreviation: faker.string.alpha({ length: { min: 10, max: 20 } }),
        },
        moldingSandSystem: faker.helpers.arrayElement(Object.values(MoldingSandSystem)),
        moldingSandNumber: faker.string.alpha({ length: { min: 10, max: 20 } }),
        moldHorizontalDensity: faker.number.float({
          min: undefined,
          max: undefined,
          fractionDigits: 2,
        }),
        moldVerticalDensity: faker.number.float({
          min: undefined,
          max: undefined,
          fractionDigits: 2,
        }),
      },
      null,
    ]),
    undefined,
  ]),
  dataAsc: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      {
        createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
        updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
        moldPassportId: faker.string.uuid(),
        moldingSandType: {
          id: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
          name: faker.string.alpha({ length: { min: 10, max: 20 } }),
          abbreviation: faker.string.alpha({ length: { min: 10, max: 20 } }),
        },
        moldHardness: faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
        resin: faker.helpers.arrayElement([
          faker.helpers.arrayElement([
            {
              id: faker.string.uuid(),
              type: faker.helpers.arrayElement(Object.values(ResinType)),
              brand: faker.string.alpha({ length: { min: 10, max: 20 } }),
              name: faker.string.alpha({ length: { min: 10, max: 20 } }),
              serialNumber: faker.string.alpha({ length: { min: 10, max: 20 } }),
            },
            null,
          ]),
          undefined,
        ]),
      },
      null,
    ]),
    undefined,
  ]),
  markingYear: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
    null,
  ]),
  moldCavities: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
    () => ({
      createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
      updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
      id: faker.string.uuid(),
      castingPattern: {
        id: faker.string.uuid(),
        castingProduct: {
          id: faker.string.uuid(),
          type: faker.helpers.arrayElement(Object.values(CastingProductType)),
          name: faker.string.alpha({ length: { min: 10, max: 20 } }),
          blueprintNumber: faker.string.alpha({ length: { min: 10, max: 20 } }),
          isCastingManualOnly: faker.datatype.boolean(),
        },
        serialNumber: faker.string.alpha({ length: { min: 10, max: 20 } }),
      },
      serialNumber: faker.string.alpha({ length: { min: 10, max: 20 } }),
      moldCores: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
        () => ({
          createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
          updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
          id: faker.string.uuid(),
          coreBatch: {
            id: faker.string.uuid(),
            moldingSandType: {
              id: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
              name: faker.string.alpha({ length: { min: 10, max: 20 } }),
              abbreviation: faker.string.alpha({ length: { min: 10, max: 20 } }),
            },
            moldCoreType: {
              id: faker.string.uuid(),
              castingProduct: {
                id: faker.string.uuid(),
                type: faker.helpers.arrayElement(Object.values(CastingProductType)),
                name: faker.string.alpha({ length: { min: 10, max: 20 } }),
                blueprintNumber: faker.string.alpha({ length: { min: 10, max: 20 } }),
                isCastingManualOnly: faker.datatype.boolean(),
              },
              modelNumber: faker.string.alpha({ length: { min: 10, max: 20 } }),
            },
            moldCoreMakingMachine: {
              id: faker.string.uuid(),
              brand: faker.string.alpha({ length: { min: 10, max: 20 } }),
              model: faker.string.alpha({ length: { min: 10, max: 20 } }),
            },
            manufacturingTimestamp: `${faker.date.past().toISOString().split('.')[0]}Z`,
            batchExpiryDate: `${faker.date.past().toISOString().split('.')[0]}Z`,
            status: faker.helpers.arrayElement(Object.values(ConsumableStatus)),
          },
          hardness: faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
        }),
      ),
      isFunctional: faker.datatype.boolean(),
    }),
  ),
  pressingPressure: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
      null,
    ]),
    undefined,
  ]),
  sequenceInShift: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
      null,
    ]),
    undefined,
  ]),
  assemblyTimestamp: faker.helpers.arrayElement([
    faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]),
    undefined,
  ]),
  status: faker.helpers.arrayElement(Object.values(AssetStatus)),
  notes: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.string.alpha({ length: { min: 10, max: 20 } }), null]),
    undefined,
  ]),
  isDeleted: faker.datatype.boolean(),
  ...overrideResponse,
})

export const getGetMoldPassportsListApiV1MoldPassportsGetMockHandler = (
  overrideResponse?:
    | MoldPassportListResponse
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<MoldPassportListResponse> | MoldPassportListResponse),
) => {
  return http.get('*/api/v1/mold-passports/', async (info) => {
    await delay(1000)

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getGetMoldPassportsListApiV1MoldPassportsGetResponseMock(),
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } },
    )
  })
}

export const getCreateMoldPassportApiV1MoldPassportsPostMockHandler = (
  overrideResponse?:
    | MoldPassportDetailResponse
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<MoldPassportDetailResponse> | MoldPassportDetailResponse),
) => {
  return http.post('*/api/v1/mold-passports/', async (info) => {
    await delay(1000)

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getCreateMoldPassportApiV1MoldPassportsPostResponseMock(),
      ),
      { status: 201, headers: { 'Content-Type': 'application/json' } },
    )
  })
}

export const getGetMoldPassportApiV1MoldPassportsMoldPassportIdGetMockHandler = (
  overrideResponse?:
    | MoldPassportDetailResponse
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<MoldPassportDetailResponse> | MoldPassportDetailResponse),
) => {
  return http.get('*/api/v1/mold-passports/:moldPassportId', async (info) => {
    await delay(1000)

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getGetMoldPassportApiV1MoldPassportsMoldPassportIdGetResponseMock(),
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } },
    )
  })
}

export const getUpdateMoldPassportApiV1MoldPassportsMoldPassportIdPutMockHandler = (
  overrideResponse?:
    | MoldPassportDetailResponse
    | ((
        info: Parameters<Parameters<typeof http.put>[1]>[0],
      ) => Promise<MoldPassportDetailResponse> | MoldPassportDetailResponse),
) => {
  return http.put('*/api/v1/mold-passports/:moldPassportId', async (info) => {
    await delay(1000)

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getUpdateMoldPassportApiV1MoldPassportsMoldPassportIdPutResponseMock(),
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } },
    )
  })
}

export const getDeleteMoldPassportApiV1MoldPassportsMoldPassportIdDeleteMockHandler = (
  overrideResponse?:
    | MoldPassportDetailResponse
    | ((
        info: Parameters<Parameters<typeof http.delete>[1]>[0],
      ) => Promise<MoldPassportDetailResponse> | MoldPassportDetailResponse),
) => {
  return http.delete('*/api/v1/mold-passports/:moldPassportId', async (info) => {
    await delay(1000)

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getDeleteMoldPassportApiV1MoldPassportsMoldPassportIdDeleteResponseMock(),
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } },
    )
  })
}

export const getRestoreMoldPassportApiV1MoldPassportsMoldPassportIdRestorePostMockHandler = (
  overrideResponse?:
    | MoldPassportDetailResponse
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<MoldPassportDetailResponse> | MoldPassportDetailResponse),
) => {
  return http.post('*/api/v1/mold-passports/:moldPassportId/restore', async (info) => {
    await delay(1000)

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getRestoreMoldPassportApiV1MoldPassportsMoldPassportIdRestorePostResponseMock(),
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } },
    )
  })
}
export const getMoldPassportsMock = () => [
  getGetMoldPassportsListApiV1MoldPassportsGetMockHandler(),
  getCreateMoldPassportApiV1MoldPassportsPostMockHandler(),
  getGetMoldPassportApiV1MoldPassportsMoldPassportIdGetMockHandler(),
  getUpdateMoldPassportApiV1MoldPassportsMoldPassportIdPutMockHandler(),
  getDeleteMoldPassportApiV1MoldPassportsMoldPassportIdDeleteMockHandler(),
  getRestoreMoldPassportApiV1MoldPassportsMoldPassportIdRestorePostMockHandler(),
]
