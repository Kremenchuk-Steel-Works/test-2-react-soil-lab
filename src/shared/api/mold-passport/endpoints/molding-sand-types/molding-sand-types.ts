/**
 * Generated by orval v7.11.2 🍺
 * Do not edit manually.
 * Molding Shop Service
 * OpenAPI spec version: 0.1.0
 */
import {
  useQuery,
  type DataTag,
  type DefinedInitialDataOptions,
  type DefinedUseQueryResult,
  type QueryClient,
  type QueryFunction,
  type QueryKey,
  type UndefinedInitialDataOptions,
  type UseQueryOptions,
  type UseQueryResult,
} from '@tanstack/react-query'
import { customMutator } from '../../../mutator'
import type {
  GetMoldingSandTypeLookupsListApiV1MoldingSandTypesLookupsGetParams,
  HttpValidationError,
  MoldingSandTypeLookupsListResponse,
} from '../../model'

/**
 * @summary Get Molding Sand Type Lookups List
 */
export const getMoldingSandTypeLookupsListApiV1MoldingSandTypesLookupsGet = (
  params?: GetMoldingSandTypeLookupsListApiV1MoldingSandTypesLookupsGetParams,
  signal?: AbortSignal,
) => {
  return customMutator<MoldingSandTypeLookupsListResponse>({
    url: `/api/v1/molding-sand-types/lookups`,
    method: 'GET',
    params,
    signal,
  })
}

export const getGetMoldingSandTypeLookupsListApiV1MoldingSandTypesLookupsGetQueryKey = (
  params?: GetMoldingSandTypeLookupsListApiV1MoldingSandTypesLookupsGetParams,
) => {
  return [`/api/v1/molding-sand-types/lookups`, ...(params ? [params] : [])] as const
}

export const getGetMoldingSandTypeLookupsListApiV1MoldingSandTypesLookupsGetQueryOptions = <
  TData = Awaited<ReturnType<typeof getMoldingSandTypeLookupsListApiV1MoldingSandTypesLookupsGet>>,
  TError = HttpValidationError,
>(
  params?: GetMoldingSandTypeLookupsListApiV1MoldingSandTypesLookupsGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getMoldingSandTypeLookupsListApiV1MoldingSandTypesLookupsGet>>,
        TError,
        TData
      >
    >
  },
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ??
    getGetMoldingSandTypeLookupsListApiV1MoldingSandTypesLookupsGetQueryKey(params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getMoldingSandTypeLookupsListApiV1MoldingSandTypesLookupsGet>>
  > = ({ signal }) => getMoldingSandTypeLookupsListApiV1MoldingSandTypesLookupsGet(params, signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getMoldingSandTypeLookupsListApiV1MoldingSandTypesLookupsGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetMoldingSandTypeLookupsListApiV1MoldingSandTypesLookupsGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof getMoldingSandTypeLookupsListApiV1MoldingSandTypesLookupsGet>>
>
export type GetMoldingSandTypeLookupsListApiV1MoldingSandTypesLookupsGetQueryError =
  HttpValidationError

export function useGetMoldingSandTypeLookupsListApiV1MoldingSandTypesLookupsGet<
  TData = Awaited<ReturnType<typeof getMoldingSandTypeLookupsListApiV1MoldingSandTypesLookupsGet>>,
  TError = HttpValidationError,
>(
  params: undefined | GetMoldingSandTypeLookupsListApiV1MoldingSandTypesLookupsGetParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getMoldingSandTypeLookupsListApiV1MoldingSandTypesLookupsGet>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMoldingSandTypeLookupsListApiV1MoldingSandTypesLookupsGet>>,
          TError,
          Awaited<ReturnType<typeof getMoldingSandTypeLookupsListApiV1MoldingSandTypesLookupsGet>>
        >,
        'initialData'
      >
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetMoldingSandTypeLookupsListApiV1MoldingSandTypesLookupsGet<
  TData = Awaited<ReturnType<typeof getMoldingSandTypeLookupsListApiV1MoldingSandTypesLookupsGet>>,
  TError = HttpValidationError,
>(
  params?: GetMoldingSandTypeLookupsListApiV1MoldingSandTypesLookupsGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getMoldingSandTypeLookupsListApiV1MoldingSandTypesLookupsGet>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMoldingSandTypeLookupsListApiV1MoldingSandTypesLookupsGet>>,
          TError,
          Awaited<ReturnType<typeof getMoldingSandTypeLookupsListApiV1MoldingSandTypesLookupsGet>>
        >,
        'initialData'
      >
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetMoldingSandTypeLookupsListApiV1MoldingSandTypesLookupsGet<
  TData = Awaited<ReturnType<typeof getMoldingSandTypeLookupsListApiV1MoldingSandTypesLookupsGet>>,
  TError = HttpValidationError,
>(
  params?: GetMoldingSandTypeLookupsListApiV1MoldingSandTypesLookupsGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getMoldingSandTypeLookupsListApiV1MoldingSandTypesLookupsGet>>,
        TError,
        TData
      >
    >
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Molding Sand Type Lookups List
 */

export function useGetMoldingSandTypeLookupsListApiV1MoldingSandTypesLookupsGet<
  TData = Awaited<ReturnType<typeof getMoldingSandTypeLookupsListApiV1MoldingSandTypesLookupsGet>>,
  TError = HttpValidationError,
>(
  params?: GetMoldingSandTypeLookupsListApiV1MoldingSandTypesLookupsGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getMoldingSandTypeLookupsListApiV1MoldingSandTypesLookupsGet>>,
        TError,
        TData
      >
    >
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetMoldingSandTypeLookupsListApiV1MoldingSandTypesLookupsGetQueryOptions(
    params,
    options,
  )

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = queryOptions.queryKey

  return query
}
