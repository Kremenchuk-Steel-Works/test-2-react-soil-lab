/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * soil_laboratory
 * OpenAPI spec version: 0.1.0
 */
import { faker } from '@faker-js/faker'
import { delay, http, HttpResponse } from 'msw'
import {
  TestStatus,
  TestType,
  type TestDetailResponse,
  type TestListResponse,
  type TestShortResponse,
} from '../../model'

export const getGetTestsListApiV1TestsGetResponseMock = (
  overrideResponse: Partial<TestListResponse> = {},
): TestListResponse => ({
  data: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
    deletedAt: faker.helpers.arrayElement([
      faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]),
      undefined,
    ]),
    createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
    createdById: faker.helpers.arrayElement([
      faker.helpers.arrayElement([faker.string.uuid(), null]),
      undefined,
    ]),
    updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
    updatedById: faker.helpers.arrayElement([
      faker.helpers.arrayElement([faker.string.uuid(), null]),
      undefined,
    ]),
    id: faker.string.uuid(),
    type: faker.helpers.arrayElement(Object.values(TestType)),
    meanMeasurement: faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
    status: faker.helpers.arrayElement(Object.values(TestStatus)),
    isDeleted: faker.datatype.boolean(),
  })),
  page: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
  totalPages: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
  totalItems: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
  ...overrideResponse,
})

export const getCreateTestApiV1TestsPostResponseMock = (
  overrideResponse: Partial<TestDetailResponse> = {},
): TestDetailResponse => ({
  deletedAt: faker.helpers.arrayElement([
    faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]),
    undefined,
  ]),
  createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  createdById: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.string.uuid(), null]),
    undefined,
  ]),
  updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  updatedById: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.string.uuid(), null]),
    undefined,
  ]),
  id: faker.string.uuid(),
  type: faker.helpers.arrayElement(Object.values(TestType)),
  sample: {
    id: faker.string.uuid(),
    moldingSandRecipe: faker.string.alpha({ length: { min: 10, max: 20 } }),
    receivedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  },
  measurement1: faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
  measurement2: faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
  measurement3: faker.helpers.arrayElement([
    faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
    null,
  ]),
  selectedMeasurement1: faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
  selectedMeasurement2: faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
  differencePercent: faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
  meanMeasurement: faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
  lowerLimit: faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
  upperLimit: faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
  status: faker.helpers.arrayElement(Object.values(TestStatus)),
  isDeleted: faker.datatype.boolean(),
  ...overrideResponse,
})

export const getGetTestApiV1TestsTestIdGetResponseMock = (
  overrideResponse: Partial<TestDetailResponse> = {},
): TestDetailResponse => ({
  deletedAt: faker.helpers.arrayElement([
    faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]),
    undefined,
  ]),
  createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  createdById: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.string.uuid(), null]),
    undefined,
  ]),
  updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  updatedById: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.string.uuid(), null]),
    undefined,
  ]),
  id: faker.string.uuid(),
  type: faker.helpers.arrayElement(Object.values(TestType)),
  sample: {
    id: faker.string.uuid(),
    moldingSandRecipe: faker.string.alpha({ length: { min: 10, max: 20 } }),
    receivedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  },
  measurement1: faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
  measurement2: faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
  measurement3: faker.helpers.arrayElement([
    faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
    null,
  ]),
  selectedMeasurement1: faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
  selectedMeasurement2: faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
  differencePercent: faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
  meanMeasurement: faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
  lowerLimit: faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
  upperLimit: faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
  status: faker.helpers.arrayElement(Object.values(TestStatus)),
  isDeleted: faker.datatype.boolean(),
  ...overrideResponse,
})

export const getDeleteTestApiV1TestsTestIdDeleteResponseMock = (
  overrideResponse: Partial<TestShortResponse> = {},
): TestShortResponse => ({
  id: faker.string.uuid(),
  type: faker.helpers.arrayElement(Object.values(TestType)),
  meanMeasurement: faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
  status: faker.helpers.arrayElement(Object.values(TestStatus)),
  ...overrideResponse,
})

export const getGetTestsListApiV1TestsGetMockHandler = (
  overrideResponse?:
    | TestListResponse
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<TestListResponse> | TestListResponse),
) => {
  return http.get('*/api/v1/tests/', async (info) => {
    await delay(1000)

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getGetTestsListApiV1TestsGetResponseMock(),
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } },
    )
  })
}

export const getCreateTestApiV1TestsPostMockHandler = (
  overrideResponse?:
    | TestDetailResponse
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<TestDetailResponse> | TestDetailResponse),
) => {
  return http.post('*/api/v1/tests/', async (info) => {
    await delay(1000)

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getCreateTestApiV1TestsPostResponseMock(),
      ),
      { status: 201, headers: { 'Content-Type': 'application/json' } },
    )
  })
}

export const getGetTestApiV1TestsTestIdGetMockHandler = (
  overrideResponse?:
    | TestDetailResponse
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<TestDetailResponse> | TestDetailResponse),
) => {
  return http.get('*/api/v1/tests/:testId', async (info) => {
    await delay(1000)

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getGetTestApiV1TestsTestIdGetResponseMock(),
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } },
    )
  })
}

export const getDeleteTestApiV1TestsTestIdDeleteMockHandler = (
  overrideResponse?:
    | TestShortResponse
    | ((
        info: Parameters<Parameters<typeof http.delete>[1]>[0],
      ) => Promise<TestShortResponse> | TestShortResponse),
) => {
  return http.delete('*/api/v1/tests/:testId', async (info) => {
    await delay(1000)

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getDeleteTestApiV1TestsTestIdDeleteResponseMock(),
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } },
    )
  })
}
export const getTestsMock = () => [
  getGetTestsListApiV1TestsGetMockHandler(),
  getCreateTestApiV1TestsPostMockHandler(),
  getGetTestApiV1TestsTestIdGetMockHandler(),
  getDeleteTestApiV1TestsTestIdDeleteMockHandler(),
]
